// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: main.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "shared.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(91a9615edd4f3b7c);
CAPNP_DECLARE_SCHEMA(d8e63e340b51fcd5);
CAPNP_DECLARE_SCHEMA(e7a1fff383ec4dd3);
CAPNP_DECLARE_SCHEMA(b5eb5fe04349279e);
CAPNP_DECLARE_SCHEMA(b99e020791d89dd4);
CAPNP_DECLARE_SCHEMA(e00502d30307b862);
CAPNP_DECLARE_SCHEMA(d0381709099cc27c);
CAPNP_DECLARE_SCHEMA(c74467e7c2ba2ab4);
enum class LoginFailedReason_c74467e7c2ba2ab4: uint16_t {
  INVALID_USER_TOKEN,
  INVALID_ARGON_TOKEN,
  ARGON_NOT_SUPPORTED,
  ARGON_UNREACHABLE,
  ARGON_INTERNAL_ERROR,
};
CAPNP_DECLARE_ENUM(LoginFailedReason, c74467e7c2ba2ab4);
CAPNP_DECLARE_SCHEMA(bbfb3e6266b46e00);
CAPNP_DECLARE_SCHEMA(c0792171a7e24cec);
CAPNP_DECLARE_SCHEMA(b90a50af13cffdeb);
CAPNP_DECLARE_SCHEMA(ebbb3301ca9b3b86);
CAPNP_DECLARE_SCHEMA(de35351c7d81af2a);
CAPNP_DECLARE_SCHEMA(b6d00e88c7eab31d);
CAPNP_DECLARE_SCHEMA(da80ce7d00b0d262);
CAPNP_DECLARE_SCHEMA(ccb001c4c4eb3e03);
CAPNP_DECLARE_SCHEMA(d29a1ce11a72e63b);
CAPNP_DECLARE_SCHEMA(90a88382c0ae35d9);
CAPNP_DECLARE_SCHEMA(b2c070962aef8cf9);
enum class JoinSessionFailedReason_b2c070962aef8cf9: uint16_t {
  INVALID_ROOM,
  INVALID_SERVER,
};
CAPNP_DECLARE_ENUM(JoinSessionFailedReason, b2c070962aef8cf9);
CAPNP_DECLARE_SCHEMA(b9e820a8df044915);
CAPNP_DECLARE_SCHEMA(83b0a859b8e7faec);
CAPNP_DECLARE_SCHEMA(a55b5ef7374b3a21);

}  // namespace schemas
}  // namespace capnp

namespace globed {
namespace schema {
namespace main {

struct PlayerIconData {
  PlayerIconData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91a9615edd4f3b7c, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerAccountData {
  PlayerAccountData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8e63e340b51fcd5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LevelSession {
  LevelSession() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e7a1fff383ec4dd3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginUTokenMessage {
  LoginUTokenMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5eb5fe04349279e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginArgonMessage {
  LoginArgonMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b99e020791d89dd4, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginPlainMessage {
  LoginPlainMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e00502d30307b862, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginOkMessage {
  LoginOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0381709099cc27c, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::LoginFailedReason_c74467e7c2ba2ab4 LoginFailedReason;

struct LoginFailedMessage {
  LoginFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbfb3e6266b46e00, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginRequiredMessage {
  LoginRequiredMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0792171a7e24cec, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UpdateOwnDataMessage {
  UpdateOwnDataMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b90a50af13cffdeb, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CreateRoomMessage {
  CreateRoomMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebbb3301ca9b3b86, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinRoomMessage {
  JoinRoomMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de35351c7d81af2a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LeaveRoomMessage {
  LeaveRoomMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b6d00e88c7eab31d, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomPlayer {
  RoomPlayer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da80ce7d00b0d262, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomStateMessage {
  RoomStateMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccb001c4c4eb3e03, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionMessage {
  JoinSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d29a1ce11a72e63b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LeaveSessionMessage {
  LeaveSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90a88382c0ae35d9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::JoinSessionFailedReason_b2c070962aef8cf9 JoinSessionFailedReason;

struct JoinFailedMessage {
  JoinFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9e820a8df044915, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WarpPlayerMessage {
  WarpPlayerMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(83b0a859b8e7faec, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    LOGIN_U_TOKEN,
    LOGIN_ARGON,
    LOGIN_PLAIN,
    LOGIN_OK,
    LOGIN_FAILED,
    LOGIN_REQUIRED,
    UPDATE_OWN_DATA,
    CREATE_ROOM,
    JOIN_ROOM,
    LEAVE_ROOM,
    WARP_PLAYER,
    ROOM_STATE,
    JOIN_SESSION,
    LEAVE_SESSION,
    JOIN_FAILED,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a55b5ef7374b3a21, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlayerIconData::Reader {
public:
  typedef PlayerIconData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int16_t getCube() const;

  inline  ::int16_t getShip() const;

  inline  ::int16_t getBall() const;

  inline  ::int16_t getUfo() const;

  inline  ::int16_t getWave() const;

  inline  ::int16_t getRobot() const;

  inline  ::int16_t getSpider() const;

  inline  ::int16_t getSwing() const;

  inline  ::int16_t getJetpack() const;

  inline  ::uint16_t getColor1() const;

  inline  ::uint16_t getColor2() const;

  inline  ::uint16_t getGlowColor() const;

  inline  ::uint8_t getDeathEffect() const;

  inline  ::uint8_t getTrail() const;

  inline  ::uint8_t getShipTrail() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerIconData::Builder {
public:
  typedef PlayerIconData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int16_t getCube();
  inline void setCube( ::int16_t value);

  inline  ::int16_t getShip();
  inline void setShip( ::int16_t value);

  inline  ::int16_t getBall();
  inline void setBall( ::int16_t value);

  inline  ::int16_t getUfo();
  inline void setUfo( ::int16_t value);

  inline  ::int16_t getWave();
  inline void setWave( ::int16_t value);

  inline  ::int16_t getRobot();
  inline void setRobot( ::int16_t value);

  inline  ::int16_t getSpider();
  inline void setSpider( ::int16_t value);

  inline  ::int16_t getSwing();
  inline void setSwing( ::int16_t value);

  inline  ::int16_t getJetpack();
  inline void setJetpack( ::int16_t value);

  inline  ::uint16_t getColor1();
  inline void setColor1( ::uint16_t value);

  inline  ::uint16_t getColor2();
  inline void setColor2( ::uint16_t value);

  inline  ::uint16_t getGlowColor();
  inline void setGlowColor( ::uint16_t value);

  inline  ::uint8_t getDeathEffect();
  inline void setDeathEffect( ::uint8_t value);

  inline  ::uint8_t getTrail();
  inline void setTrail( ::uint8_t value);

  inline  ::uint8_t getShipTrail();
  inline void setShipTrail( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerIconData::Pipeline {
public:
  typedef PlayerIconData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerAccountData::Reader {
public:
  typedef PlayerAccountData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline  ::int32_t getUserId() const;

  inline bool hasUsername() const;
  inline  ::capnp::Text::Reader getUsername() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerAccountData::Builder {
public:
  typedef PlayerAccountData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline  ::int32_t getUserId();
  inline void setUserId( ::int32_t value);

  inline bool hasUsername();
  inline  ::capnp::Text::Builder getUsername();
  inline void setUsername( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUsername(unsigned int size);
  inline void adoptUsername(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUsername();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerAccountData::Pipeline {
public:
  typedef PlayerAccountData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LevelSession::Reader {
public:
  typedef LevelSession Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LevelSession::Builder {
public:
  typedef LevelSession Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LevelSession::Pipeline {
public:
  typedef LevelSession Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginUTokenMessage::Reader {
public:
  typedef LoginUTokenMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginUTokenMessage::Builder {
public:
  typedef LoginUTokenMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginUTokenMessage::Pipeline {
public:
  typedef LoginUTokenMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginArgonMessage::Reader {
public:
  typedef LoginArgonMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginArgonMessage::Builder {
public:
  typedef LoginArgonMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginArgonMessage::Pipeline {
public:
  typedef LoginArgonMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginPlainMessage::Reader {
public:
  typedef LoginPlainMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::globed::schema::main::PlayerAccountData::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginPlainMessage::Builder {
public:
  typedef LoginPlainMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::globed::schema::main::PlayerAccountData::Builder getData();
  inline void setData( ::globed::schema::main::PlayerAccountData::Reader value);
  inline  ::globed::schema::main::PlayerAccountData::Builder initData();
  inline void adoptData(::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginPlainMessage::Pipeline {
public:
  typedef LoginPlainMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::PlayerAccountData::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginOkMessage::Reader {
public:
  typedef LoginOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNewToken() const;
  inline  ::capnp::Text::Reader getNewToken() const;

  inline bool hasServers() const;
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader getServers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginOkMessage::Builder {
public:
  typedef LoginOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNewToken();
  inline  ::capnp::Text::Builder getNewToken();
  inline void setNewToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNewToken(unsigned int size);
  inline void adoptNewToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNewToken();

  inline bool hasServers();
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder getServers();
  inline void setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder initServers(unsigned int size);
  inline void adoptServers(::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> disownServers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginOkMessage::Pipeline {
public:
  typedef LoginOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginFailedMessage::Reader {
public:
  typedef LoginFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::LoginFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginFailedMessage::Builder {
public:
  typedef LoginFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::LoginFailedReason getReason();
  inline void setReason( ::globed::schema::main::LoginFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginFailedMessage::Pipeline {
public:
  typedef LoginFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginRequiredMessage::Reader {
public:
  typedef LoginRequiredMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArgonUrl() const;
  inline  ::capnp::Text::Reader getArgonUrl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginRequiredMessage::Builder {
public:
  typedef LoginRequiredMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasArgonUrl();
  inline  ::capnp::Text::Builder getArgonUrl();
  inline void setArgonUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initArgonUrl(unsigned int size);
  inline void adoptArgonUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownArgonUrl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginRequiredMessage::Pipeline {
public:
  typedef LoginRequiredMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UpdateOwnDataMessage::Reader {
public:
  typedef UpdateOwnDataMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasIcons() const;
  inline  ::globed::schema::main::PlayerIconData::Reader getIcons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UpdateOwnDataMessage::Builder {
public:
  typedef UpdateOwnDataMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIcons();
  inline  ::globed::schema::main::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::main::PlayerIconData::Reader value);
  inline  ::globed::schema::main::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::main::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerIconData> disownIcons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UpdateOwnDataMessage::Pipeline {
public:
  typedef UpdateOwnDataMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CreateRoomMessage::Reader {
public:
  typedef CreateRoomMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CreateRoomMessage::Builder {
public:
  typedef CreateRoomMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CreateRoomMessage::Pipeline {
public:
  typedef CreateRoomMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinRoomMessage::Reader {
public:
  typedef JoinRoomMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinRoomMessage::Builder {
public:
  typedef JoinRoomMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinRoomMessage::Pipeline {
public:
  typedef JoinRoomMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LeaveRoomMessage::Reader {
public:
  typedef LeaveRoomMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LeaveRoomMessage::Builder {
public:
  typedef LeaveRoomMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LeaveRoomMessage::Pipeline {
public:
  typedef LeaveRoomMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomPlayer::Reader {
public:
  typedef RoomPlayer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAccountData() const;
  inline  ::globed::schema::main::PlayerAccountData::Reader getAccountData() const;

  inline  ::int16_t getCube() const;

  inline bool hasLevel() const;
  inline  ::globed::schema::main::LevelSession::Reader getLevel() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomPlayer::Builder {
public:
  typedef RoomPlayer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAccountData();
  inline  ::globed::schema::main::PlayerAccountData::Builder getAccountData();
  inline void setAccountData( ::globed::schema::main::PlayerAccountData::Reader value);
  inline  ::globed::schema::main::PlayerAccountData::Builder initAccountData();
  inline void adoptAccountData(::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> disownAccountData();

  inline  ::int16_t getCube();
  inline void setCube( ::int16_t value);

  inline bool hasLevel();
  inline  ::globed::schema::main::LevelSession::Builder getLevel();
  inline void setLevel( ::globed::schema::main::LevelSession::Reader value);
  inline  ::globed::schema::main::LevelSession::Builder initLevel();
  inline void adoptLevel(::capnp::Orphan< ::globed::schema::main::LevelSession>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LevelSession> disownLevel();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomPlayer::Pipeline {
public:
  typedef RoomPlayer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::PlayerAccountData::Pipeline getAccountData();
  inline  ::globed::schema::main::LevelSession::Pipeline getLevel();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomStateMessage::Reader {
public:
  typedef RoomStateMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId() const;

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline bool hasPlayers() const;
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader getPlayers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomStateMessage::Builder {
public:
  typedef RoomStateMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline bool hasPlayers();
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder getPlayers();
  inline void setPlayers( ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder initPlayers(unsigned int size);
  inline void adoptPlayers(::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>> disownPlayers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomStateMessage::Pipeline {
public:
  typedef RoomStateMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionMessage::Reader {
public:
  typedef JoinSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionMessage::Builder {
public:
  typedef JoinSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionMessage::Pipeline {
public:
  typedef JoinSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LeaveSessionMessage::Reader {
public:
  typedef LeaveSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LeaveSessionMessage::Builder {
public:
  typedef LeaveSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LeaveSessionMessage::Pipeline {
public:
  typedef LeaveSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinFailedMessage::Reader {
public:
  typedef JoinFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::JoinSessionFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinFailedMessage::Builder {
public:
  typedef JoinFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::JoinSessionFailedReason getReason();
  inline void setReason( ::globed::schema::main::JoinSessionFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinFailedMessage::Pipeline {
public:
  typedef JoinFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WarpPlayerMessage::Reader {
public:
  typedef WarpPlayerMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSession() const;
  inline  ::globed::schema::main::LevelSession::Reader getSession() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WarpPlayerMessage::Builder {
public:
  typedef WarpPlayerMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSession();
  inline  ::globed::schema::main::LevelSession::Builder getSession();
  inline void setSession( ::globed::schema::main::LevelSession::Reader value);
  inline  ::globed::schema::main::LevelSession::Builder initSession();
  inline void adoptSession(::capnp::Orphan< ::globed::schema::main::LevelSession>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LevelSession> disownSession();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WarpPlayerMessage::Pipeline {
public:
  typedef WarpPlayerMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::LevelSession::Pipeline getSession();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isLoginUToken() const;
  inline bool hasLoginUToken() const;
  inline  ::globed::schema::main::LoginUTokenMessage::Reader getLoginUToken() const;

  inline bool isLoginArgon() const;
  inline bool hasLoginArgon() const;
  inline  ::globed::schema::main::LoginArgonMessage::Reader getLoginArgon() const;

  inline bool isLoginPlain() const;
  inline bool hasLoginPlain() const;
  inline  ::globed::schema::main::LoginPlainMessage::Reader getLoginPlain() const;

  inline bool isLoginOk() const;
  inline bool hasLoginOk() const;
  inline  ::globed::schema::main::LoginOkMessage::Reader getLoginOk() const;

  inline bool isLoginFailed() const;
  inline bool hasLoginFailed() const;
  inline  ::globed::schema::main::LoginFailedMessage::Reader getLoginFailed() const;

  inline bool isLoginRequired() const;
  inline bool hasLoginRequired() const;
  inline  ::globed::schema::main::LoginRequiredMessage::Reader getLoginRequired() const;

  inline bool isUpdateOwnData() const;
  inline bool hasUpdateOwnData() const;
  inline  ::globed::schema::main::UpdateOwnDataMessage::Reader getUpdateOwnData() const;

  inline bool isCreateRoom() const;
  inline bool hasCreateRoom() const;
  inline  ::globed::schema::main::CreateRoomMessage::Reader getCreateRoom() const;

  inline bool isJoinRoom() const;
  inline bool hasJoinRoom() const;
  inline  ::globed::schema::main::JoinRoomMessage::Reader getJoinRoom() const;

  inline bool isLeaveRoom() const;
  inline bool hasLeaveRoom() const;
  inline  ::globed::schema::main::LeaveRoomMessage::Reader getLeaveRoom() const;

  inline bool isWarpPlayer() const;
  inline bool hasWarpPlayer() const;
  inline  ::globed::schema::main::WarpPlayerMessage::Reader getWarpPlayer() const;

  inline bool isRoomState() const;
  inline bool hasRoomState() const;
  inline  ::globed::schema::main::RoomStateMessage::Reader getRoomState() const;

  inline bool isJoinSession() const;
  inline bool hasJoinSession() const;
  inline  ::globed::schema::main::JoinSessionMessage::Reader getJoinSession() const;

  inline bool isLeaveSession() const;
  inline bool hasLeaveSession() const;
  inline  ::globed::schema::main::LeaveSessionMessage::Reader getLeaveSession() const;

  inline bool isJoinFailed() const;
  inline bool hasJoinFailed() const;
  inline  ::globed::schema::main::JoinFailedMessage::Reader getJoinFailed() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isLoginUToken();
  inline bool hasLoginUToken();
  inline  ::globed::schema::main::LoginUTokenMessage::Builder getLoginUToken();
  inline void setLoginUToken( ::globed::schema::main::LoginUTokenMessage::Reader value);
  inline  ::globed::schema::main::LoginUTokenMessage::Builder initLoginUToken();
  inline void adoptLoginUToken(::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage> disownLoginUToken();

  inline bool isLoginArgon();
  inline bool hasLoginArgon();
  inline  ::globed::schema::main::LoginArgonMessage::Builder getLoginArgon();
  inline void setLoginArgon( ::globed::schema::main::LoginArgonMessage::Reader value);
  inline  ::globed::schema::main::LoginArgonMessage::Builder initLoginArgon();
  inline void adoptLoginArgon(::capnp::Orphan< ::globed::schema::main::LoginArgonMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage> disownLoginArgon();

  inline bool isLoginPlain();
  inline bool hasLoginPlain();
  inline  ::globed::schema::main::LoginPlainMessage::Builder getLoginPlain();
  inline void setLoginPlain( ::globed::schema::main::LoginPlainMessage::Reader value);
  inline  ::globed::schema::main::LoginPlainMessage::Builder initLoginPlain();
  inline void adoptLoginPlain(::capnp::Orphan< ::globed::schema::main::LoginPlainMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage> disownLoginPlain();

  inline bool isLoginOk();
  inline bool hasLoginOk();
  inline  ::globed::schema::main::LoginOkMessage::Builder getLoginOk();
  inline void setLoginOk( ::globed::schema::main::LoginOkMessage::Reader value);
  inline  ::globed::schema::main::LoginOkMessage::Builder initLoginOk();
  inline void adoptLoginOk(::capnp::Orphan< ::globed::schema::main::LoginOkMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginOkMessage> disownLoginOk();

  inline bool isLoginFailed();
  inline bool hasLoginFailed();
  inline  ::globed::schema::main::LoginFailedMessage::Builder getLoginFailed();
  inline void setLoginFailed( ::globed::schema::main::LoginFailedMessage::Reader value);
  inline  ::globed::schema::main::LoginFailedMessage::Builder initLoginFailed();
  inline void adoptLoginFailed(::capnp::Orphan< ::globed::schema::main::LoginFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage> disownLoginFailed();

  inline bool isLoginRequired();
  inline bool hasLoginRequired();
  inline  ::globed::schema::main::LoginRequiredMessage::Builder getLoginRequired();
  inline void setLoginRequired( ::globed::schema::main::LoginRequiredMessage::Reader value);
  inline  ::globed::schema::main::LoginRequiredMessage::Builder initLoginRequired();
  inline void adoptLoginRequired(::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage> disownLoginRequired();

  inline bool isUpdateOwnData();
  inline bool hasUpdateOwnData();
  inline  ::globed::schema::main::UpdateOwnDataMessage::Builder getUpdateOwnData();
  inline void setUpdateOwnData( ::globed::schema::main::UpdateOwnDataMessage::Reader value);
  inline  ::globed::schema::main::UpdateOwnDataMessage::Builder initUpdateOwnData();
  inline void adoptUpdateOwnData(::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage> disownUpdateOwnData();

  inline bool isCreateRoom();
  inline bool hasCreateRoom();
  inline  ::globed::schema::main::CreateRoomMessage::Builder getCreateRoom();
  inline void setCreateRoom( ::globed::schema::main::CreateRoomMessage::Reader value);
  inline  ::globed::schema::main::CreateRoomMessage::Builder initCreateRoom();
  inline void adoptCreateRoom(::capnp::Orphan< ::globed::schema::main::CreateRoomMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage> disownCreateRoom();

  inline bool isJoinRoom();
  inline bool hasJoinRoom();
  inline  ::globed::schema::main::JoinRoomMessage::Builder getJoinRoom();
  inline void setJoinRoom( ::globed::schema::main::JoinRoomMessage::Reader value);
  inline  ::globed::schema::main::JoinRoomMessage::Builder initJoinRoom();
  inline void adoptJoinRoom(::capnp::Orphan< ::globed::schema::main::JoinRoomMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage> disownJoinRoom();

  inline bool isLeaveRoom();
  inline bool hasLeaveRoom();
  inline  ::globed::schema::main::LeaveRoomMessage::Builder getLeaveRoom();
  inline void setLeaveRoom( ::globed::schema::main::LeaveRoomMessage::Reader value);
  inline  ::globed::schema::main::LeaveRoomMessage::Builder initLeaveRoom();
  inline void adoptLeaveRoom(::capnp::Orphan< ::globed::schema::main::LeaveRoomMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LeaveRoomMessage> disownLeaveRoom();

  inline bool isWarpPlayer();
  inline bool hasWarpPlayer();
  inline  ::globed::schema::main::WarpPlayerMessage::Builder getWarpPlayer();
  inline void setWarpPlayer( ::globed::schema::main::WarpPlayerMessage::Reader value);
  inline  ::globed::schema::main::WarpPlayerMessage::Builder initWarpPlayer();
  inline void adoptWarpPlayer(::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage> disownWarpPlayer();

  inline bool isRoomState();
  inline bool hasRoomState();
  inline  ::globed::schema::main::RoomStateMessage::Builder getRoomState();
  inline void setRoomState( ::globed::schema::main::RoomStateMessage::Reader value);
  inline  ::globed::schema::main::RoomStateMessage::Builder initRoomState();
  inline void adoptRoomState(::capnp::Orphan< ::globed::schema::main::RoomStateMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomStateMessage> disownRoomState();

  inline bool isJoinSession();
  inline bool hasJoinSession();
  inline  ::globed::schema::main::JoinSessionMessage::Builder getJoinSession();
  inline void setJoinSession( ::globed::schema::main::JoinSessionMessage::Reader value);
  inline  ::globed::schema::main::JoinSessionMessage::Builder initJoinSession();
  inline void adoptJoinSession(::capnp::Orphan< ::globed::schema::main::JoinSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage> disownJoinSession();

  inline bool isLeaveSession();
  inline bool hasLeaveSession();
  inline  ::globed::schema::main::LeaveSessionMessage::Builder getLeaveSession();
  inline void setLeaveSession( ::globed::schema::main::LeaveSessionMessage::Reader value);
  inline  ::globed::schema::main::LeaveSessionMessage::Builder initLeaveSession();
  inline void adoptLeaveSession(::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage> disownLeaveSession();

  inline bool isJoinFailed();
  inline bool hasJoinFailed();
  inline  ::globed::schema::main::JoinFailedMessage::Builder getJoinFailed();
  inline void setJoinFailed( ::globed::schema::main::JoinFailedMessage::Reader value);
  inline  ::globed::schema::main::JoinFailedMessage::Builder initJoinFailed();
  inline void adoptJoinFailed(::capnp::Orphan< ::globed::schema::main::JoinFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage> disownJoinFailed();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int16_t PlayerIconData::Reader::getCube() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getCube() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setCube( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getShip() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getShip() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setShip( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getBall() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getBall() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setBall( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getUfo() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getUfo() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setUfo( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getWave() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getWave() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setWave( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getRobot() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getRobot() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setRobot( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getSpider() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getSpider() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setSpider( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getSwing() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getSwing() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setSwing( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline  ::int16_t PlayerIconData::Reader::getJetpack() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::int16_t PlayerIconData::Builder::getJetpack() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setJetpack( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PlayerIconData::Reader::getColor1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PlayerIconData::Builder::getColor1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setColor1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PlayerIconData::Reader::getColor2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PlayerIconData::Builder::getColor2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setColor2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PlayerIconData::Reader::getGlowColor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PlayerIconData::Builder::getGlowColor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void PlayerIconData::Builder::setGlowColor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PlayerIconData::Reader::getDeathEffect() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 1u);
}

inline  ::uint8_t PlayerIconData::Builder::getDeathEffect() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, 1u);
}
inline void PlayerIconData::Builder::setDeathEffect( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<24>() * ::capnp::ELEMENTS, value, 1u);
}

inline  ::uint8_t PlayerIconData::Reader::getTrail() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 255u);
}

inline  ::uint8_t PlayerIconData::Builder::getTrail() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, 255u);
}
inline void PlayerIconData::Builder::setTrail( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value, 255u);
}

inline  ::uint8_t PlayerIconData::Reader::getShipTrail() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 255u);
}

inline  ::uint8_t PlayerIconData::Builder::getShipTrail() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, 255u);
}
inline void PlayerIconData::Builder::setShipTrail( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<26>() * ::capnp::ELEMENTS, value, 255u);
}

inline  ::int32_t PlayerAccountData::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerAccountData::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerAccountData::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PlayerAccountData::Reader::getUserId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerAccountData::Builder::getUserId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerAccountData::Builder::setUserId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerAccountData::Reader::hasUsername() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerAccountData::Builder::hasUsername() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlayerAccountData::Reader::getUsername() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlayerAccountData::Builder::getUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerAccountData::Builder::setUsername( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlayerAccountData::Builder::initUsername(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerAccountData::Builder::adoptUsername(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlayerAccountData::Builder::disownUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t LevelSession::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LevelSession::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LevelSession::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t LoginUTokenMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginUTokenMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginUTokenMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginUTokenMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginUTokenMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginUTokenMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginUTokenMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LoginArgonMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginArgonMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginArgonMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginArgonMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginArgonMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginArgonMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginArgonMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginArgonMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginArgonMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginArgonMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginArgonMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginPlainMessage::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginPlainMessage::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerAccountData::Reader LoginPlainMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerAccountData::Builder LoginPlainMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::PlayerAccountData::Pipeline LoginPlainMessage::Pipeline::getData() {
  return  ::globed::schema::main::PlayerAccountData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LoginPlainMessage::Builder::setData( ::globed::schema::main::PlayerAccountData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerAccountData::Builder LoginPlainMessage::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginPlainMessage::Builder::adoptData(
    ::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> LoginPlainMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasNewToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasNewToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginOkMessage::Reader::getNewToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginOkMessage::Builder::getNewToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setNewToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginOkMessage::Builder::initNewToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptNewToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginOkMessage::Builder::disownNewToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasServers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasServers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader LoginOkMessage::Reader::getServers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::getServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::initServers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptServers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> LoginOkMessage::Builder::disownServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::globed::schema::main::LoginFailedReason LoginFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::LoginFailedReason LoginFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginFailedMessage::Builder::setReason( ::globed::schema::main::LoginFailedReason value) {
  _builder.setDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginRequiredMessage::Reader::hasArgonUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginRequiredMessage::Builder::hasArgonUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginRequiredMessage::Reader::getArgonUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginRequiredMessage::Builder::getArgonUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginRequiredMessage::Builder::setArgonUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginRequiredMessage::Builder::initArgonUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginRequiredMessage::Builder::adoptArgonUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginRequiredMessage::Builder::disownArgonUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UpdateOwnDataMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UpdateOwnDataMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerIconData::Reader UpdateOwnDataMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerIconData::Builder UpdateOwnDataMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::PlayerIconData::Pipeline UpdateOwnDataMessage::Pipeline::getIcons() {
  return  ::globed::schema::main::PlayerIconData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UpdateOwnDataMessage::Builder::setIcons( ::globed::schema::main::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerIconData::Builder UpdateOwnDataMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UpdateOwnDataMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::main::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerIconData> UpdateOwnDataMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool CreateRoomMessage::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CreateRoomMessage::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CreateRoomMessage::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CreateRoomMessage::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CreateRoomMessage::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CreateRoomMessage::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CreateRoomMessage::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CreateRoomMessage::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t JoinRoomMessage::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t JoinRoomMessage::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinRoomMessage::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomPlayer::Reader::hasAccountData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomPlayer::Builder::hasAccountData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerAccountData::Reader RoomPlayer::Reader::getAccountData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerAccountData::Builder RoomPlayer::Builder::getAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::PlayerAccountData::Pipeline RoomPlayer::Pipeline::getAccountData() {
  return  ::globed::schema::main::PlayerAccountData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoomPlayer::Builder::setAccountData( ::globed::schema::main::PlayerAccountData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerAccountData::Builder RoomPlayer::Builder::initAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomPlayer::Builder::adoptAccountData(
    ::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> RoomPlayer::Builder::disownAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t RoomPlayer::Reader::getCube() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoomPlayer::Builder::getCube() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setCube( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomPlayer::Reader::hasLevel() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoomPlayer::Builder::hasLevel() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LevelSession::Reader RoomPlayer::Reader::getLevel() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LevelSession::Builder RoomPlayer::Builder::getLevel() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::LevelSession::Pipeline RoomPlayer::Pipeline::getLevel() {
  return  ::globed::schema::main::LevelSession::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RoomPlayer::Builder::setLevel( ::globed::schema::main::LevelSession::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LevelSession::Builder RoomPlayer::Builder::initLevel() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoomPlayer::Builder::adoptLevel(
    ::capnp::Orphan< ::globed::schema::main::LevelSession>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LevelSession> RoomPlayer::Builder::disownLevel() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t RoomStateMessage::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RoomStateMessage::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomStateMessage::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomStateMessage::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoomStateMessage::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoomStateMessage::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoomStateMessage::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoomStateMessage::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoomStateMessage::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoomStateMessage::Reader::hasPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader RoomStateMessage::Reader::getPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder RoomStateMessage::Builder::getPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::setPlayers( ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder RoomStateMessage::Builder::initPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoomStateMessage::Builder::adoptPlayers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>> RoomStateMessage::Builder::disownPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t JoinSessionMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::JoinSessionFailedReason JoinFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::JoinSessionFailedReason JoinFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinFailedMessage::Builder::setReason( ::globed::schema::main::JoinSessionFailedReason value) {
  _builder.setDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool WarpPlayerMessage::Reader::hasSession() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WarpPlayerMessage::Builder::hasSession() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LevelSession::Reader WarpPlayerMessage::Reader::getSession() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LevelSession::Builder WarpPlayerMessage::Builder::getSession() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::LevelSession::Pipeline WarpPlayerMessage::Pipeline::getSession() {
  return  ::globed::schema::main::LevelSession::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void WarpPlayerMessage::Builder::setSession( ::globed::schema::main::LevelSession::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LevelSession::Builder WarpPlayerMessage::Builder::initSession() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WarpPlayerMessage::Builder::adoptSession(
    ::capnp::Orphan< ::globed::schema::main::LevelSession>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LevelSession> WarpPlayerMessage::Builder::disownSession() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LevelSession>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::main::Message::Which Message::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::globed::schema::main::Message::Which Message::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Message::Reader::isLoginUToken() const {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Builder::isLoginUToken() {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Reader::hasLoginUToken() const {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginUToken() {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginUTokenMessage::Reader Message::Reader::getLoginUToken() const {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginUTokenMessage::Builder Message::Builder::getLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginUToken( ::globed::schema::main::LoginUTokenMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginUTokenMessage::Builder Message::Builder::initLoginUToken() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginUToken(
    ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage> Message::Builder::disownLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginArgon() const {
  return which() == Message::LOGIN_ARGON;
}
inline bool Message::Builder::isLoginArgon() {
  return which() == Message::LOGIN_ARGON;
}
inline bool Message::Reader::hasLoginArgon() const {
  if (which() != Message::LOGIN_ARGON) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginArgon() {
  if (which() != Message::LOGIN_ARGON) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginArgonMessage::Reader Message::Reader::getLoginArgon() const {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginArgonMessage::Builder Message::Builder::getLoginArgon() {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginArgon( ::globed::schema::main::LoginArgonMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginArgonMessage::Builder Message::Builder::initLoginArgon() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginArgon(
    ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage> Message::Builder::disownLoginArgon() {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginPlain() const {
  return which() == Message::LOGIN_PLAIN;
}
inline bool Message::Builder::isLoginPlain() {
  return which() == Message::LOGIN_PLAIN;
}
inline bool Message::Reader::hasLoginPlain() const {
  if (which() != Message::LOGIN_PLAIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginPlain() {
  if (which() != Message::LOGIN_PLAIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginPlainMessage::Reader Message::Reader::getLoginPlain() const {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginPlainMessage::Builder Message::Builder::getLoginPlain() {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginPlain( ::globed::schema::main::LoginPlainMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginPlainMessage::Builder Message::Builder::initLoginPlain() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginPlain(
    ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage> Message::Builder::disownLoginPlain() {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginOk() const {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Builder::isLoginOk() {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Reader::hasLoginOk() const {
  if (which() != Message::LOGIN_OK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginOk() {
  if (which() != Message::LOGIN_OK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginOkMessage::Reader Message::Reader::getLoginOk() const {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginOkMessage::Builder Message::Builder::getLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginOk( ::globed::schema::main::LoginOkMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginOkMessage::Builder Message::Builder::initLoginOk() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginOk(
    ::capnp::Orphan< ::globed::schema::main::LoginOkMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginOkMessage> Message::Builder::disownLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginFailed() const {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Builder::isLoginFailed() {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Reader::hasLoginFailed() const {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginFailed() {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginFailedMessage::Reader Message::Reader::getLoginFailed() const {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginFailedMessage::Builder Message::Builder::getLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginFailed( ::globed::schema::main::LoginFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginFailedMessage::Builder Message::Builder::initLoginFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginFailed(
    ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage> Message::Builder::disownLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginRequired() const {
  return which() == Message::LOGIN_REQUIRED;
}
inline bool Message::Builder::isLoginRequired() {
  return which() == Message::LOGIN_REQUIRED;
}
inline bool Message::Reader::hasLoginRequired() const {
  if (which() != Message::LOGIN_REQUIRED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginRequired() {
  if (which() != Message::LOGIN_REQUIRED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginRequiredMessage::Reader Message::Reader::getLoginRequired() const {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginRequiredMessage::Builder Message::Builder::getLoginRequired() {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginRequired( ::globed::schema::main::LoginRequiredMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginRequiredMessage::Builder Message::Builder::initLoginRequired() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginRequired(
    ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage> Message::Builder::disownLoginRequired() {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isUpdateOwnData() const {
  return which() == Message::UPDATE_OWN_DATA;
}
inline bool Message::Builder::isUpdateOwnData() {
  return which() == Message::UPDATE_OWN_DATA;
}
inline bool Message::Reader::hasUpdateOwnData() const {
  if (which() != Message::UPDATE_OWN_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasUpdateOwnData() {
  if (which() != Message::UPDATE_OWN_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Reader Message::Reader::getUpdateOwnData() const {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Builder Message::Builder::getUpdateOwnData() {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setUpdateOwnData( ::globed::schema::main::UpdateOwnDataMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Builder Message::Builder::initUpdateOwnData() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptUpdateOwnData(
    ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage> Message::Builder::disownUpdateOwnData() {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isCreateRoom() const {
  return which() == Message::CREATE_ROOM;
}
inline bool Message::Builder::isCreateRoom() {
  return which() == Message::CREATE_ROOM;
}
inline bool Message::Reader::hasCreateRoom() const {
  if (which() != Message::CREATE_ROOM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasCreateRoom() {
  if (which() != Message::CREATE_ROOM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::CreateRoomMessage::Reader Message::Reader::getCreateRoom() const {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::CreateRoomMessage::Builder Message::Builder::getCreateRoom() {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setCreateRoom( ::globed::schema::main::CreateRoomMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::CreateRoomMessage::Builder Message::Builder::initCreateRoom() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptCreateRoom(
    ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage> Message::Builder::disownCreateRoom() {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinRoom() const {
  return which() == Message::JOIN_ROOM;
}
inline bool Message::Builder::isJoinRoom() {
  return which() == Message::JOIN_ROOM;
}
inline bool Message::Reader::hasJoinRoom() const {
  if (which() != Message::JOIN_ROOM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinRoom() {
  if (which() != Message::JOIN_ROOM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinRoomMessage::Reader Message::Reader::getJoinRoom() const {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinRoomMessage::Builder Message::Builder::getJoinRoom() {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinRoom( ::globed::schema::main::JoinRoomMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinRoomMessage::Builder Message::Builder::initJoinRoom() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinRoom(
    ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage> Message::Builder::disownJoinRoom() {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveRoom() const {
  return which() == Message::LEAVE_ROOM;
}
inline bool Message::Builder::isLeaveRoom() {
  return which() == Message::LEAVE_ROOM;
}
inline bool Message::Reader::hasLeaveRoom() const {
  if (which() != Message::LEAVE_ROOM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLeaveRoom() {
  if (which() != Message::LEAVE_ROOM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LeaveRoomMessage::Reader Message::Reader::getLeaveRoom() const {
  KJ_IREQUIRE((which() == Message::LEAVE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LeaveRoomMessage::Builder Message::Builder::getLeaveRoom() {
  KJ_IREQUIRE((which() == Message::LEAVE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLeaveRoom( ::globed::schema::main::LeaveRoomMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LeaveRoomMessage::Builder Message::Builder::initLeaveRoom() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_ROOM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLeaveRoom(
    ::capnp::Orphan< ::globed::schema::main::LeaveRoomMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LeaveRoomMessage> Message::Builder::disownLeaveRoom() {
  KJ_IREQUIRE((which() == Message::LEAVE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveRoomMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isWarpPlayer() const {
  return which() == Message::WARP_PLAYER;
}
inline bool Message::Builder::isWarpPlayer() {
  return which() == Message::WARP_PLAYER;
}
inline bool Message::Reader::hasWarpPlayer() const {
  if (which() != Message::WARP_PLAYER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasWarpPlayer() {
  if (which() != Message::WARP_PLAYER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::WarpPlayerMessage::Reader Message::Reader::getWarpPlayer() const {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::WarpPlayerMessage::Builder Message::Builder::getWarpPlayer() {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setWarpPlayer( ::globed::schema::main::WarpPlayerMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::WarpPlayerMessage::Builder Message::Builder::initWarpPlayer() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptWarpPlayer(
    ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage> Message::Builder::disownWarpPlayer() {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomState() const {
  return which() == Message::ROOM_STATE;
}
inline bool Message::Builder::isRoomState() {
  return which() == Message::ROOM_STATE;
}
inline bool Message::Reader::hasRoomState() const {
  if (which() != Message::ROOM_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomState() {
  if (which() != Message::ROOM_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomStateMessage::Reader Message::Reader::getRoomState() const {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomStateMessage::Builder Message::Builder::getRoomState() {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomState( ::globed::schema::main::RoomStateMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomStateMessage::Builder Message::Builder::initRoomState() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomState(
    ::capnp::Orphan< ::globed::schema::main::RoomStateMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomStateMessage> Message::Builder::disownRoomState() {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSession() const {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Builder::isJoinSession() {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Reader::hasJoinSession() const {
  if (which() != Message::JOIN_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSession() {
  if (which() != Message::JOIN_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinSessionMessage::Reader Message::Reader::getJoinSession() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinSessionMessage::Builder Message::Builder::getJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSession( ::globed::schema::main::JoinSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinSessionMessage::Builder Message::Builder::initJoinSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSession(
    ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage> Message::Builder::disownJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveSession() const {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Builder::isLeaveSession() {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Reader::hasLeaveSession() const {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLeaveSession() {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LeaveSessionMessage::Reader Message::Reader::getLeaveSession() const {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LeaveSessionMessage::Builder Message::Builder::getLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLeaveSession( ::globed::schema::main::LeaveSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LeaveSessionMessage::Builder Message::Builder::initLeaveSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLeaveSession(
    ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage> Message::Builder::disownLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinFailed() const {
  return which() == Message::JOIN_FAILED;
}
inline bool Message::Builder::isJoinFailed() {
  return which() == Message::JOIN_FAILED;
}
inline bool Message::Reader::hasJoinFailed() const {
  if (which() != Message::JOIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinFailed() {
  if (which() != Message::JOIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinFailedMessage::Reader Message::Reader::getJoinFailed() const {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinFailedMessage::Builder Message::Builder::getJoinFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinFailed( ::globed::schema::main::JoinFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinFailedMessage::Builder Message::Builder::initJoinFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinFailed(
    ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage> Message::Builder::disownJoinFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

