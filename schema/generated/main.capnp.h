// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: main.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "shared.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(d8e63e340b51fcd5);
CAPNP_DECLARE_SCHEMA(b5eb5fe04349279e);
CAPNP_DECLARE_SCHEMA(b99e020791d89dd4);
CAPNP_DECLARE_SCHEMA(e00502d30307b862);
CAPNP_DECLARE_SCHEMA(d0381709099cc27c);
CAPNP_DECLARE_SCHEMA(c74467e7c2ba2ab4);
enum class LoginFailedReason_c74467e7c2ba2ab4: uint16_t {
  INVALID_USER_TOKEN,
  INVALID_ARGON_TOKEN,
  ARGON_NOT_SUPPORTED,
  ARGON_UNREACHABLE,
  ARGON_INTERNAL_ERROR,
  INTERNAL_DB_ERROR,
  INVALID_ACCOUNT_DATA,
};
CAPNP_DECLARE_ENUM(LoginFailedReason, c74467e7c2ba2ab4);
CAPNP_DECLARE_SCHEMA(bbfb3e6266b46e00);
CAPNP_DECLARE_SCHEMA(c0792171a7e24cec);
CAPNP_DECLARE_SCHEMA(e94115bf16c4b5a8);
CAPNP_DECLARE_SCHEMA(8292c7927f0e291e);
CAPNP_DECLARE_SCHEMA(b90a50af13cffdeb);
CAPNP_DECLARE_SCHEMA(f6f0f63e8a860c1c);
CAPNP_DECLARE_SCHEMA(8eeeb2b3e84844c7);
CAPNP_DECLARE_SCHEMA(b8949f0d2a5b8019);
CAPNP_DECLARE_SCHEMA(ebbb3301ca9b3b86);
CAPNP_DECLARE_SCHEMA(de35351c7d81af2a);
CAPNP_DECLARE_SCHEMA(cc26655ccf6a542b);
CAPNP_DECLARE_SCHEMA(86fe6b2a144f9ede);
CAPNP_DECLARE_SCHEMA(9255f17560996ebf);
CAPNP_DECLARE_SCHEMA(be60fa65a05f681c);
CAPNP_DECLARE_SCHEMA(daacd2abd0f350f2);
CAPNP_DECLARE_SCHEMA(92cd3a7f718b5b65);
CAPNP_DECLARE_SCHEMA(8d66f9fc39526e6f);
enum class RoomOwnerActionType_8d66f9fc39526e6f: uint16_t {
  BAN_USER,
  KICK_USER,
  CLOSE_ROOM,
};
CAPNP_DECLARE_ENUM(RoomOwnerActionType, 8d66f9fc39526e6f);
CAPNP_DECLARE_SCHEMA(eb7ef953c325008a);
CAPNP_DECLARE_SCHEMA(9ec3ab1a6e918576);
CAPNP_DECLARE_SCHEMA(c3594139526425cd);
CAPNP_DECLARE_SCHEMA(da80ce7d00b0d262);
CAPNP_DECLARE_SCHEMA(c2c08e4fc6a797b6);
CAPNP_DECLARE_SCHEMA(ccb001c4c4eb3e03);
CAPNP_DECLARE_SCHEMA(b4e1d4b92dce90f4);
CAPNP_DECLARE_SCHEMA(e8b80e1d2395f44a);
enum class RoomJoinFailedReason_e8b80e1d2395f44a: uint16_t {
  NOT_FOUND,
  INVALID_PASSCODE,
  FULL,
  BANNED,
};
CAPNP_DECLARE_ENUM(RoomJoinFailedReason, e8b80e1d2395f44a);
CAPNP_DECLARE_SCHEMA(8911338fc9a382c3);
CAPNP_DECLARE_SCHEMA(84e06a378efe2263);
enum class RoomCreateFailedReason_84e06a378efe2263: uint16_t {
  INVALID_NAME,
  INVALID_SETTINGS,
  INVALID_PASSCODE,
  INVALID_SERVER,
  SERVER_DOWN,
  INAPPROPRIATE_NAME,
};
CAPNP_DECLARE_ENUM(RoomCreateFailedReason, 84e06a378efe2263);
CAPNP_DECLARE_SCHEMA(ea1cad45b5cbffd4);
CAPNP_DECLARE_SCHEMA(aebac2806ec82f8d);
CAPNP_DECLARE_SCHEMA(dae9ec8d26c6d0b3);
CAPNP_DECLARE_SCHEMA(d56d617651a514bf);
CAPNP_DECLARE_SCHEMA(d29a1ce11a72e63b);
CAPNP_DECLARE_SCHEMA(90a88382c0ae35d9);
CAPNP_DECLARE_SCHEMA(b2c070962aef8cf9);
enum class JoinSessionFailedReason_b2c070962aef8cf9: uint16_t {
  INVALID_ROOM,
  INVALID_SERVER,
};
CAPNP_DECLARE_ENUM(JoinSessionFailedReason, b2c070962aef8cf9);
CAPNP_DECLARE_SCHEMA(b9e820a8df044915);
CAPNP_DECLARE_SCHEMA(83b0a859b8e7faec);
CAPNP_DECLARE_SCHEMA(dd60476e8cb3a480);
enum class KickReason_dd60476e8cb3a480: uint16_t {
  CUSTOM,
  DUPLICATE_LOGIN,
};
CAPNP_DECLARE_ENUM(KickReason, dd60476e8cb3a480);
CAPNP_DECLARE_SCHEMA(ad6874573952b8c9);
CAPNP_DECLARE_SCHEMA(aae75eac1c000a68);
CAPNP_DECLARE_SCHEMA(8c0515d61d5278e4);
CAPNP_DECLARE_SCHEMA(98be444f11a5df16);
CAPNP_DECLARE_SCHEMA(945c6ba9031f6b45);
CAPNP_DECLARE_SCHEMA(85af7e66f3f02a6b);
CAPNP_DECLARE_SCHEMA(807e4e669ff643b1);
CAPNP_DECLARE_SCHEMA(a2ab0121cd9f02f2);
CAPNP_DECLARE_SCHEMA(bd8811afd7bca71b);
CAPNP_DECLARE_SCHEMA(aeadaa76cd8a73fb);
CAPNP_DECLARE_SCHEMA(b778faa471a4fa3b);
CAPNP_DECLARE_SCHEMA(a37d9373872b3e96);
CAPNP_DECLARE_SCHEMA(ff741da91232584c);
CAPNP_DECLARE_SCHEMA(a6d8ce6fbce7dccb);
CAPNP_DECLARE_SCHEMA(b1efeff4fd3fa28d);
CAPNP_DECLARE_SCHEMA(f3e9ed6f52631d00);
CAPNP_DECLARE_SCHEMA(d5b4a9451f06c093);
CAPNP_DECLARE_SCHEMA(8091a4ca04e25d0a);
CAPNP_DECLARE_SCHEMA(d57f5187bd5b3167);
CAPNP_DECLARE_SCHEMA(8e6c5f1db63d3471);
CAPNP_DECLARE_SCHEMA(d806796e0d483927);
CAPNP_DECLARE_SCHEMA(cc3c33b6ddb6e1a4);
CAPNP_DECLARE_SCHEMA(ea67ae6a66745db6);
CAPNP_DECLARE_SCHEMA(911c9aa5c4c5f520);
CAPNP_DECLARE_SCHEMA(a55b5ef7374b3a21);

}  // namespace schemas
}  // namespace capnp

namespace globed {
namespace schema {
namespace main {

struct PlayerAccountData {
  PlayerAccountData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d8e63e340b51fcd5, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginUTokenMessage {
  LoginUTokenMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5eb5fe04349279e, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginArgonMessage {
  LoginArgonMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b99e020791d89dd4, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginPlainMessage {
  LoginPlainMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e00502d30307b862, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginOkMessage {
  LoginOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0381709099cc27c, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::LoginFailedReason_c74467e7c2ba2ab4 LoginFailedReason;

struct LoginFailedMessage {
  LoginFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bbfb3e6266b46e00, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginRequiredMessage {
  LoginRequiredMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c0792171a7e24cec, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct BannedMessage {
  BannedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e94115bf16c4b5a8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ServersChangedMessage {
  ServersChangedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8292c7927f0e291e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UpdateOwnDataMessage {
  UpdateOwnDataMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b90a50af13cffdeb, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RequestPlayerCountsMessage {
  RequestPlayerCountsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f6f0f63e8a860c1c, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerCountsMessage {
  PlayerCountsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8eeeb2b3e84844c7, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomSettings {
  RoomSettings() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b8949f0d2a5b8019, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CreateRoomMessage {
  CreateRoomMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ebbb3301ca9b3b86, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinRoomMessage {
  JoinRoomMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(de35351c7d81af2a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RequestRoomListMessage {
  RequestRoomListMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc26655ccf6a542b, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AssignTeamMessage {
  AssignTeamMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86fe6b2a144f9ede, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct CreateTeamMessage {
  CreateTeamMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9255f17560996ebf, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct DeleteTeamMessage {
  DeleteTeamMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be60fa65a05f681c, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UpdateTeamMessage {
  UpdateTeamMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(daacd2abd0f350f2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GetTeamMembersMessage {
  GetTeamMembersMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(92cd3a7f718b5b65, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::RoomOwnerActionType_8d66f9fc39526e6f RoomOwnerActionType;

struct RoomOwnerActionMessage {
  RoomOwnerActionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(eb7ef953c325008a, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TeamCreationResultMessage {
  TeamCreationResultMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9ec3ab1a6e918576, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TeamChangedMessage {
  TeamChangedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c3594139526425cd, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomPlayer {
  RoomPlayer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(da80ce7d00b0d262, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TeamMembersMessage {
  TeamMembersMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c2c08e4fc6a797b6, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomStateMessage {
  RoomStateMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ccb001c4c4eb3e03, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TeamsUpdatedMessage {
  TeamsUpdatedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b4e1d4b92dce90f4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::RoomJoinFailedReason_e8b80e1d2395f44a RoomJoinFailedReason;

struct RoomJoinFailedMessage {
  RoomJoinFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8911338fc9a382c3, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::RoomCreateFailedReason_84e06a378efe2263 RoomCreateFailedReason;

struct RoomCreateFailedMessage {
  RoomCreateFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea1cad45b5cbffd4, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomListingInfo {
  RoomListingInfo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aebac2806ec82f8d, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomBannedMessage {
  RoomBannedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dae9ec8d26c6d0b3, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RoomListMessage {
  RoomListMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d56d617651a514bf, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionMessage {
  JoinSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d29a1ce11a72e63b, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LeaveSessionMessage {
  LeaveSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(90a88382c0ae35d9, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::JoinSessionFailedReason_b2c070962aef8cf9 JoinSessionFailedReason;

struct JoinFailedMessage {
  JoinFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b9e820a8df044915, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WarpPlayerMessage {
  WarpPlayerMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(83b0a859b8e7faec, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::KickReason_dd60476e8cb3a480 KickReason;

struct KickedMessage {
  KickedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad6874573952b8c9, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct NoticeMessage {
  NoticeMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aae75eac1c000a68, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct WarnMessage {
  WarnMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c0515d61d5278e4, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminLoginMessage {
  AdminLoginMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(98be444f11a5df16, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminKickMessage {
  AdminKickMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(945c6ba9031f6b45, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminNoticeMessage {
  AdminNoticeMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(85af7e66f3f02a6b, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminNoticeEveryoneMessage {
  AdminNoticeEveryoneMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(807e4e669ff643b1, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminFetchUserMessage {
  AdminFetchUserMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a2ab0121cd9f02f2, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UserPunishment {
  UserPunishment() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bd8811afd7bca71b, 3, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminFetchResponseMessage {
  AdminFetchResponseMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aeadaa76cd8a73fb, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct FetchedMod {
  FetchedMod() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b778faa471a4fa3b, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminFetchModsResponseMessage {
  AdminFetchModsResponseMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a37d9373872b3e96, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminFetchLogsMessage {
  AdminFetchLogsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff741da91232584c, 4, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AuditLog {
  AuditLog() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a6d8ce6fbce7dccb, 4, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminLogsResponseMessage {
  AdminLogsResponseMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b1efeff4fd3fa28d, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminBanMessage {
  AdminBanMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3e9ed6f52631d00, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminUnbanMessage {
  AdminUnbanMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5b4a9451f06c093, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminRoomBanMessage {
  AdminRoomBanMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8091a4ca04e25d0a, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminRoomUnbanMessage {
  AdminRoomUnbanMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d57f5187bd5b3167, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminEditRolesMessage {
  AdminEditRolesMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8e6c5f1db63d3471, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminSetPasswordMessage {
  AdminSetPasswordMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d806796e0d483927, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminUpdateUserMessage {
  AdminUpdateUserMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc3c33b6ddb6e1a4, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminFetchModsMessage {
  AdminFetchModsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea67ae6a66745db6, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct AdminResultMessage {
  AdminResultMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(911c9aa5c4c5f520, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    LOGIN_U_TOKEN,
    LOGIN_ARGON,
    LOGIN_PLAIN,
    LOGIN_OK,
    LOGIN_FAILED,
    LOGIN_REQUIRED,
    UPDATE_OWN_DATA,
    CREATE_ROOM,
    JOIN_ROOM,
    LEAVE_ROOM,
    WARP_PLAYER,
    ROOM_STATE,
    JOIN_SESSION,
    LEAVE_SESSION,
    JOIN_FAILED,
    KICKED,
    CHECK_ROOM_STATE,
    REQUEST_PLAYER_COUNTS,
    PLAYER_COUNTS,
    ROOM_JOIN_FAILED,
    ROOM_CREATE_FAILED,
    REQUEST_ROOM_LIST,
    ROOM_LIST,
    BANNED,
    ROOM_BANNED,
    ADMIN_LOGIN,
    ADMIN_KICK,
    ADMIN_NOTICE,
    ADMIN_NOTICE_EVERYONE,
    ADMIN_FETCH_USER,
    ADMIN_BAN,
    ADMIN_UNBAN,
    ADMIN_ROOM_BAN,
    ADMIN_ROOM_UNBAN,
    ADMIN_EDIT_ROLES,
    ADMIN_SET_PASSWORD,
    ADMIN_RESULT,
    ADMIN_FETCH_RESPONSE,
    NOTICE,
    ADMIN_UPDATE_USER,
    ADMIN_FETCH_LOGS,
    ADMIN_LOGS_RESPONSE,
    ASSIGN_TEAM,
    CREATE_TEAM,
    DELETE_TEAM,
    WARN,
    TEAM_CREATION_RESULT,
    TEAM_CHANGED,
    GET_TEAM_MEMBERS,
    TEAM_MEMBERS,
    UPDATE_TEAM,
    TEAMS_UPDATED,
    ADMIN_FETCH_MODS,
    ADMIN_FETCH_MODS_RESPONSE,
    SERVERS_CHANGED,
    ROOM_OWNER_ACTION,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a55b5ef7374b3a21, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlayerAccountData::Reader {
public:
  typedef PlayerAccountData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline  ::int32_t getUserId() const;

  inline bool hasUsername() const;
  inline  ::capnp::Text::Reader getUsername() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerAccountData::Builder {
public:
  typedef PlayerAccountData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline  ::int32_t getUserId();
  inline void setUserId( ::int32_t value);

  inline bool hasUsername();
  inline  ::capnp::Text::Builder getUsername();
  inline void setUsername( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUsername(unsigned int size);
  inline void adoptUsername(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUsername();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerAccountData::Pipeline {
public:
  typedef PlayerAccountData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginUTokenMessage::Reader {
public:
  typedef LoginUTokenMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

  inline bool hasUident() const;
  inline  ::capnp::Data::Reader getUident() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginUTokenMessage::Builder {
public:
  typedef LoginUTokenMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

  inline bool hasUident();
  inline  ::capnp::Data::Builder getUident();
  inline void setUident( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUident(unsigned int size);
  inline void adoptUident(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUident();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginUTokenMessage::Pipeline {
public:
  typedef LoginUTokenMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginArgonMessage::Reader {
public:
  typedef LoginArgonMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

  inline bool hasUident() const;
  inline  ::capnp::Data::Reader getUident() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginArgonMessage::Builder {
public:
  typedef LoginArgonMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

  inline bool hasUident();
  inline  ::capnp::Data::Builder getUident();
  inline void setUident( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initUident(unsigned int size);
  inline void adoptUident(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownUident();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginArgonMessage::Pipeline {
public:
  typedef LoginArgonMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginPlainMessage::Reader {
public:
  typedef LoginPlainMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::globed::schema::main::PlayerAccountData::Reader getData() const;

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginPlainMessage::Builder {
public:
  typedef LoginPlainMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::globed::schema::main::PlayerAccountData::Builder getData();
  inline void setData( ::globed::schema::main::PlayerAccountData::Reader value);
  inline  ::globed::schema::main::PlayerAccountData::Builder initData();
  inline void adoptData(::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> disownData();

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginPlainMessage::Pipeline {
public:
  typedef LoginPlainMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::PlayerAccountData::Pipeline getData();
  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginOkMessage::Reader {
public:
  typedef LoginOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasNewToken() const;
  inline  ::capnp::Text::Reader getNewToken() const;

  inline bool hasServers() const;
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader getServers() const;

  inline bool hasAllRoles() const;
  inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Reader getAllRoles() const;

  inline bool hasUserRoles() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getUserRoles() const;

  inline bool getIsModerator() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginOkMessage::Builder {
public:
  typedef LoginOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasNewToken();
  inline  ::capnp::Text::Builder getNewToken();
  inline void setNewToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNewToken(unsigned int size);
  inline void adoptNewToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNewToken();

  inline bool hasServers();
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder getServers();
  inline void setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder initServers(unsigned int size);
  inline void adoptServers(::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> disownServers();

  inline bool hasAllRoles();
  inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Builder getAllRoles();
  inline void setAllRoles( ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Builder initAllRoles(unsigned int size);
  inline void adoptAllRoles(::capnp::Orphan< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>> disownAllRoles();

  inline bool hasUserRoles();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getUserRoles();
  inline void setUserRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUserRoles(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initUserRoles(unsigned int size);
  inline void adoptUserRoles(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownUserRoles();

  inline bool getIsModerator();
  inline void setIsModerator(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginOkMessage::Pipeline {
public:
  typedef LoginOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginFailedMessage::Reader {
public:
  typedef LoginFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::LoginFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginFailedMessage::Builder {
public:
  typedef LoginFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::LoginFailedReason getReason();
  inline void setReason( ::globed::schema::main::LoginFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginFailedMessage::Pipeline {
public:
  typedef LoginFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginRequiredMessage::Reader {
public:
  typedef LoginRequiredMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasArgonUrl() const;
  inline  ::capnp::Text::Reader getArgonUrl() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginRequiredMessage::Builder {
public:
  typedef LoginRequiredMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasArgonUrl();
  inline  ::capnp::Text::Builder getArgonUrl();
  inline void setArgonUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initArgonUrl(unsigned int size);
  inline void adoptArgonUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownArgonUrl();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginRequiredMessage::Pipeline {
public:
  typedef LoginRequiredMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class BannedMessage::Reader {
public:
  typedef BannedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline  ::int64_t getExpiresAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class BannedMessage::Builder {
public:
  typedef BannedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class BannedMessage::Pipeline {
public:
  typedef BannedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ServersChangedMessage::Reader {
public:
  typedef ServersChangedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasServers() const;
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader getServers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ServersChangedMessage::Builder {
public:
  typedef ServersChangedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasServers();
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder getServers();
  inline void setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder initServers(unsigned int size);
  inline void adoptServers(::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> disownServers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ServersChangedMessage::Pipeline {
public:
  typedef ServersChangedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UpdateOwnDataMessage::Reader {
public:
  typedef UpdateOwnDataMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

  inline bool hasFriendList() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getFriendList() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UpdateOwnDataMessage::Builder {
public:
  typedef UpdateOwnDataMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

  inline bool hasFriendList();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getFriendList();
  inline void setFriendList( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setFriendList(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initFriendList(unsigned int size);
  inline void adoptFriendList(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownFriendList();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UpdateOwnDataMessage::Pipeline {
public:
  typedef UpdateOwnDataMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RequestPlayerCountsMessage::Reader {
public:
  typedef RequestPlayerCountsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevels() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLevels() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RequestPlayerCountsMessage::Builder {
public:
  typedef RequestPlayerCountsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevels();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLevels();
  inline void setLevels( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLevels(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLevels(unsigned int size);
  inline void adoptLevels(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLevels();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RequestPlayerCountsMessage::Pipeline {
public:
  typedef RequestPlayerCountsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerCountsMessage::Reader {
public:
  typedef PlayerCountsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLevelIds() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getLevelIds() const;

  inline bool hasCounts() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getCounts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerCountsMessage::Builder {
public:
  typedef PlayerCountsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLevelIds();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getLevelIds();
  inline void setLevelIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setLevelIds(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initLevelIds(unsigned int size);
  inline void adoptLevelIds(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownLevelIds();

  inline bool hasCounts();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getCounts();
  inline void setCounts( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setCounts(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initCounts(unsigned int size);
  inline void adoptCounts(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownCounts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerCountsMessage::Pipeline {
public:
  typedef PlayerCountsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomSettings::Reader {
public:
  typedef RoomSettings Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getPlayerLimit() const;

  inline bool getFasterReset() const;

  inline bool getHidden() const;

  inline bool getPrivateInvites() const;

  inline bool getIsFollower() const;

  inline bool getCollision() const;

  inline bool getTwoPlayerMode() const;

  inline bool getDeathlink() const;

  inline bool getLevelIntegrity() const;

  inline  ::uint8_t getServerId() const;

  inline bool getTeams() const;

  inline bool getLockedTeams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomSettings::Builder {
public:
  typedef RoomSettings Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getPlayerLimit();
  inline void setPlayerLimit( ::uint16_t value);

  inline bool getFasterReset();
  inline void setFasterReset(bool value);

  inline bool getHidden();
  inline void setHidden(bool value);

  inline bool getPrivateInvites();
  inline void setPrivateInvites(bool value);

  inline bool getIsFollower();
  inline void setIsFollower(bool value);

  inline bool getCollision();
  inline void setCollision(bool value);

  inline bool getTwoPlayerMode();
  inline void setTwoPlayerMode(bool value);

  inline bool getDeathlink();
  inline void setDeathlink(bool value);

  inline bool getLevelIntegrity();
  inline void setLevelIntegrity(bool value);

  inline  ::uint8_t getServerId();
  inline void setServerId( ::uint8_t value);

  inline bool getTeams();
  inline void setTeams(bool value);

  inline bool getLockedTeams();
  inline void setLockedTeams(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomSettings::Pipeline {
public:
  typedef RoomSettings Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CreateRoomMessage::Reader {
public:
  typedef CreateRoomMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasName() const;
  inline  ::capnp::Text::Reader getName() const;

  inline  ::uint32_t getPasscode() const;

  inline bool hasSettings() const;
  inline  ::globed::schema::main::RoomSettings::Reader getSettings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CreateRoomMessage::Builder {
public:
  typedef CreateRoomMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasName();
  inline  ::capnp::Text::Builder getName();
  inline void setName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initName(unsigned int size);
  inline void adoptName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownName();

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

  inline bool hasSettings();
  inline  ::globed::schema::main::RoomSettings::Builder getSettings();
  inline void setSettings( ::globed::schema::main::RoomSettings::Reader value);
  inline  ::globed::schema::main::RoomSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> disownSettings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CreateRoomMessage::Pipeline {
public:
  typedef CreateRoomMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::RoomSettings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinRoomMessage::Reader {
public:
  typedef JoinRoomMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId() const;

  inline  ::uint32_t getPasscode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinRoomMessage::Builder {
public:
  typedef JoinRoomMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinRoomMessage::Pipeline {
public:
  typedef JoinRoomMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RequestRoomListMessage::Reader {
public:
  typedef RequestRoomListMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RequestRoomListMessage::Builder {
public:
  typedef RequestRoomListMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RequestRoomListMessage::Pipeline {
public:
  typedef RequestRoomListMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AssignTeamMessage::Reader {
public:
  typedef AssignTeamMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline  ::uint16_t getTeamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AssignTeamMessage::Builder {
public:
  typedef AssignTeamMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline  ::uint16_t getTeamId();
  inline void setTeamId( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AssignTeamMessage::Pipeline {
public:
  typedef AssignTeamMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class CreateTeamMessage::Reader {
public:
  typedef CreateTeamMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class CreateTeamMessage::Builder {
public:
  typedef CreateTeamMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getColor();
  inline void setColor( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class CreateTeamMessage::Pipeline {
public:
  typedef CreateTeamMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class DeleteTeamMessage::Reader {
public:
  typedef DeleteTeamMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class DeleteTeamMessage::Builder {
public:
  typedef DeleteTeamMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId();
  inline void setTeamId( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class DeleteTeamMessage::Pipeline {
public:
  typedef DeleteTeamMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UpdateTeamMessage::Reader {
public:
  typedef UpdateTeamMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId() const;

  inline  ::uint32_t getColor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UpdateTeamMessage::Builder {
public:
  typedef UpdateTeamMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId();
  inline void setTeamId( ::uint16_t value);

  inline  ::uint32_t getColor();
  inline void setColor( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UpdateTeamMessage::Pipeline {
public:
  typedef UpdateTeamMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GetTeamMembersMessage::Reader {
public:
  typedef GetTeamMembersMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GetTeamMembersMessage::Builder {
public:
  typedef GetTeamMembersMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GetTeamMembersMessage::Pipeline {
public:
  typedef GetTeamMembersMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomOwnerActionMessage::Reader {
public:
  typedef RoomOwnerActionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomOwnerActionType getType() const;

  inline  ::int32_t getTarget() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomOwnerActionMessage::Builder {
public:
  typedef RoomOwnerActionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomOwnerActionType getType();
  inline void setType( ::globed::schema::main::RoomOwnerActionType value);

  inline  ::int32_t getTarget();
  inline void setTarget( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomOwnerActionMessage::Pipeline {
public:
  typedef RoomOwnerActionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TeamCreationResultMessage::Reader {
public:
  typedef TeamCreationResultMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

  inline  ::uint16_t getTeamCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TeamCreationResultMessage::Builder {
public:
  typedef TeamCreationResultMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

  inline  ::uint16_t getTeamCount();
  inline void setTeamCount( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TeamCreationResultMessage::Pipeline {
public:
  typedef TeamCreationResultMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TeamChangedMessage::Reader {
public:
  typedef TeamChangedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TeamChangedMessage::Builder {
public:
  typedef TeamChangedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTeamId();
  inline void setTeamId( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TeamChangedMessage::Pipeline {
public:
  typedef TeamChangedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomPlayer::Reader {
public:
  typedef RoomPlayer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasAccountData() const;
  inline  ::globed::schema::main::PlayerAccountData::Reader getAccountData() const;

  inline  ::int16_t getCube() const;

  inline  ::uint16_t getColor1() const;

  inline  ::uint16_t getColor2() const;

  inline  ::uint16_t getGlowColor() const;

  inline  ::uint64_t getSession() const;

  inline  ::uint16_t getTeamId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomPlayer::Builder {
public:
  typedef RoomPlayer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasAccountData();
  inline  ::globed::schema::main::PlayerAccountData::Builder getAccountData();
  inline void setAccountData( ::globed::schema::main::PlayerAccountData::Reader value);
  inline  ::globed::schema::main::PlayerAccountData::Builder initAccountData();
  inline void adoptAccountData(::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> disownAccountData();

  inline  ::int16_t getCube();
  inline void setCube( ::int16_t value);

  inline  ::uint16_t getColor1();
  inline void setColor1( ::uint16_t value);

  inline  ::uint16_t getColor2();
  inline void setColor2( ::uint16_t value);

  inline  ::uint16_t getGlowColor();
  inline void setGlowColor( ::uint16_t value);

  inline  ::uint64_t getSession();
  inline void setSession( ::uint64_t value);

  inline  ::uint16_t getTeamId();
  inline void setTeamId( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomPlayer::Pipeline {
public:
  typedef RoomPlayer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::PlayerAccountData::Pipeline getAccountData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TeamMembersMessage::Reader {
public:
  typedef TeamMembersMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMembers() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getMembers() const;

  inline bool hasTeamIds() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getTeamIds() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TeamMembersMessage::Builder {
public:
  typedef TeamMembersMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMembers();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getMembers();
  inline void setMembers( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMembers(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initMembers(unsigned int size);
  inline void adoptMembers(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownMembers();

  inline bool hasTeamIds();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getTeamIds();
  inline void setTeamIds( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTeamIds(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initTeamIds(unsigned int size);
  inline void adoptTeamIds(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownTeamIds();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TeamMembersMessage::Pipeline {
public:
  typedef TeamMembersMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomStateMessage::Reader {
public:
  typedef RoomStateMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId() const;

  inline  ::int32_t getRoomOwner() const;

  inline bool hasRoomName() const;
  inline  ::capnp::Text::Reader getRoomName() const;

  inline bool hasPlayers() const;
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader getPlayers() const;

  inline bool hasSettings() const;
  inline  ::globed::schema::main::RoomSettings::Reader getSettings() const;

  inline bool hasTeams() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTeams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomStateMessage::Builder {
public:
  typedef RoomStateMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

  inline  ::int32_t getRoomOwner();
  inline void setRoomOwner( ::int32_t value);

  inline bool hasRoomName();
  inline  ::capnp::Text::Builder getRoomName();
  inline void setRoomName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoomName(unsigned int size);
  inline void adoptRoomName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoomName();

  inline bool hasPlayers();
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder getPlayers();
  inline void setPlayers( ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder initPlayers(unsigned int size);
  inline void adoptPlayers(::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>> disownPlayers();

  inline bool hasSettings();
  inline  ::globed::schema::main::RoomSettings::Builder getSettings();
  inline void setSettings( ::globed::schema::main::RoomSettings::Reader value);
  inline  ::globed::schema::main::RoomSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> disownSettings();

  inline bool hasTeams();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTeams();
  inline void setTeams( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTeams(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTeams(unsigned int size);
  inline void adoptTeams(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownTeams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomStateMessage::Pipeline {
public:
  typedef RoomStateMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::RoomSettings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TeamsUpdatedMessage::Reader {
public:
  typedef TeamsUpdatedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTeams() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getTeams() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TeamsUpdatedMessage::Builder {
public:
  typedef TeamsUpdatedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTeams();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getTeams();
  inline void setTeams( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTeams(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initTeams(unsigned int size);
  inline void adoptTeams(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownTeams();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TeamsUpdatedMessage::Pipeline {
public:
  typedef TeamsUpdatedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomJoinFailedMessage::Reader {
public:
  typedef RoomJoinFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomJoinFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomJoinFailedMessage::Builder {
public:
  typedef RoomJoinFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomJoinFailedReason getReason();
  inline void setReason( ::globed::schema::main::RoomJoinFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomJoinFailedMessage::Pipeline {
public:
  typedef RoomJoinFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomCreateFailedMessage::Reader {
public:
  typedef RoomCreateFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomCreateFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomCreateFailedMessage::Builder {
public:
  typedef RoomCreateFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::RoomCreateFailedReason getReason();
  inline void setReason( ::globed::schema::main::RoomCreateFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomCreateFailedMessage::Pipeline {
public:
  typedef RoomCreateFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomListingInfo::Reader {
public:
  typedef RoomListingInfo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId() const;

  inline bool hasRoomName() const;
  inline  ::capnp::Text::Reader getRoomName() const;

  inline bool hasRoomOwner() const;
  inline  ::globed::schema::main::RoomPlayer::Reader getRoomOwner() const;

  inline  ::uint32_t getPlayerCount() const;

  inline bool getHasPassword() const;

  inline bool hasSettings() const;
  inline  ::globed::schema::main::RoomSettings::Reader getSettings() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomListingInfo::Builder {
public:
  typedef RoomListingInfo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

  inline bool hasRoomName();
  inline  ::capnp::Text::Builder getRoomName();
  inline void setRoomName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initRoomName(unsigned int size);
  inline void adoptRoomName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownRoomName();

  inline bool hasRoomOwner();
  inline  ::globed::schema::main::RoomPlayer::Builder getRoomOwner();
  inline void setRoomOwner( ::globed::schema::main::RoomPlayer::Reader value);
  inline  ::globed::schema::main::RoomPlayer::Builder initRoomOwner();
  inline void adoptRoomOwner(::capnp::Orphan< ::globed::schema::main::RoomPlayer>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomPlayer> disownRoomOwner();

  inline  ::uint32_t getPlayerCount();
  inline void setPlayerCount( ::uint32_t value);

  inline bool getHasPassword();
  inline void setHasPassword(bool value);

  inline bool hasSettings();
  inline  ::globed::schema::main::RoomSettings::Builder getSettings();
  inline void setSettings( ::globed::schema::main::RoomSettings::Reader value);
  inline  ::globed::schema::main::RoomSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> disownSettings();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomListingInfo::Pipeline {
public:
  typedef RoomListingInfo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::RoomPlayer::Pipeline getRoomOwner();
  inline  ::globed::schema::main::RoomSettings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomBannedMessage::Reader {
public:
  typedef RoomBannedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline  ::int64_t getExpiresAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomBannedMessage::Builder {
public:
  typedef RoomBannedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomBannedMessage::Pipeline {
public:
  typedef RoomBannedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RoomListMessage::Reader {
public:
  typedef RoomListMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRooms() const;
  inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Reader getRooms() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoomListMessage::Builder {
public:
  typedef RoomListMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRooms();
  inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Builder getRooms();
  inline void setRooms( ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Builder initRooms(unsigned int size);
  inline void adoptRooms(::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>> disownRooms();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoomListMessage::Pipeline {
public:
  typedef RoomListMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionMessage::Reader {
public:
  typedef JoinSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionMessage::Builder {
public:
  typedef JoinSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionMessage::Pipeline {
public:
  typedef JoinSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LeaveSessionMessage::Reader {
public:
  typedef LeaveSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LeaveSessionMessage::Builder {
public:
  typedef LeaveSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LeaveSessionMessage::Pipeline {
public:
  typedef LeaveSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinFailedMessage::Reader {
public:
  typedef JoinFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::JoinSessionFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinFailedMessage::Builder {
public:
  typedef JoinFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::JoinSessionFailedReason getReason();
  inline void setReason( ::globed::schema::main::JoinSessionFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinFailedMessage::Pipeline {
public:
  typedef JoinFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WarpPlayerMessage::Reader {
public:
  typedef WarpPlayerMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSession() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WarpPlayerMessage::Builder {
public:
  typedef WarpPlayerMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSession();
  inline void setSession( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WarpPlayerMessage::Pipeline {
public:
  typedef WarpPlayerMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KickedMessage::Reader {
public:
  typedef KickedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::KickReason getReason() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KickedMessage::Builder {
public:
  typedef KickedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::main::KickReason getReason();
  inline void setReason( ::globed::schema::main::KickReason value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KickedMessage::Pipeline {
public:
  typedef KickedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NoticeMessage::Reader {
public:
  typedef NoticeMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSenderId() const;

  inline bool hasSenderName() const;
  inline  ::capnp::Text::Reader getSenderName() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline bool getCanReply() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NoticeMessage::Builder {
public:
  typedef NoticeMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getSenderId();
  inline void setSenderId( ::int32_t value);

  inline bool hasSenderName();
  inline  ::capnp::Text::Builder getSenderName();
  inline void setSenderName( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSenderName(unsigned int size);
  inline void adoptSenderName(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSenderName();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline bool getCanReply();
  inline void setCanReply(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NoticeMessage::Pipeline {
public:
  typedef NoticeMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class WarnMessage::Reader {
public:
  typedef WarnMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class WarnMessage::Builder {
public:
  typedef WarnMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class WarnMessage::Pipeline {
public:
  typedef WarnMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminLoginMessage::Reader {
public:
  typedef AdminLoginMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPassword() const;
  inline  ::capnp::Text::Reader getPassword() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminLoginMessage::Builder {
public:
  typedef AdminLoginMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPassword();
  inline  ::capnp::Text::Builder getPassword();
  inline void setPassword( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPassword(unsigned int size);
  inline void adoptPassword(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPassword();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminLoginMessage::Pipeline {
public:
  typedef AdminLoginMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminKickMessage::Reader {
public:
  typedef AdminKickMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminKickMessage::Builder {
public:
  typedef AdminKickMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminKickMessage::Pipeline {
public:
  typedef AdminKickMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminNoticeMessage::Reader {
public:
  typedef AdminNoticeMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasTargetUser() const;
  inline  ::capnp::Text::Reader getTargetUser() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline  ::uint32_t getRoomId() const;

  inline  ::int32_t getLevelId() const;

  inline bool getCanReply() const;

  inline bool getShowSender() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminNoticeMessage::Builder {
public:
  typedef AdminNoticeMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasTargetUser();
  inline  ::capnp::Text::Builder getTargetUser();
  inline void setTargetUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTargetUser(unsigned int size);
  inline void adoptTargetUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTargetUser();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline  ::uint32_t getRoomId();
  inline void setRoomId( ::uint32_t value);

  inline  ::int32_t getLevelId();
  inline void setLevelId( ::int32_t value);

  inline bool getCanReply();
  inline void setCanReply(bool value);

  inline bool getShowSender();
  inline void setShowSender(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminNoticeMessage::Pipeline {
public:
  typedef AdminNoticeMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminNoticeEveryoneMessage::Reader {
public:
  typedef AdminNoticeEveryoneMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminNoticeEveryoneMessage::Builder {
public:
  typedef AdminNoticeEveryoneMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminNoticeEveryoneMessage::Pipeline {
public:
  typedef AdminNoticeEveryoneMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminFetchUserMessage::Reader {
public:
  typedef AdminFetchUserMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasQuery() const;
  inline  ::capnp::Text::Reader getQuery() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminFetchUserMessage::Builder {
public:
  typedef AdminFetchUserMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasQuery();
  inline  ::capnp::Text::Builder getQuery();
  inline void setQuery( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initQuery(unsigned int size);
  inline void adoptQuery(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownQuery();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminFetchUserMessage::Pipeline {
public:
  typedef AdminFetchUserMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UserPunishment::Reader {
public:
  typedef UserPunishment Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getIssuedBy() const;

  inline  ::int64_t getIssuedAt() const;

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline  ::int64_t getExpiresAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UserPunishment::Builder {
public:
  typedef UserPunishment Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getIssuedBy();
  inline void setIssuedBy( ::int32_t value);

  inline  ::int64_t getIssuedAt();
  inline void setIssuedAt( ::int64_t value);

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UserPunishment::Pipeline {
public:
  typedef UserPunishment Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminFetchResponseMessage::Reader {
public:
  typedef AdminFetchResponseMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool getFound() const;

  inline bool getWhitelisted() const;

  inline bool hasRoles() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getRoles() const;

  inline bool hasActiveBan() const;
  inline  ::globed::schema::main::UserPunishment::Reader getActiveBan() const;

  inline bool hasActiveRoomBan() const;
  inline  ::globed::schema::main::UserPunishment::Reader getActiveRoomBan() const;

  inline bool hasActiveMute() const;
  inline  ::globed::schema::main::UserPunishment::Reader getActiveMute() const;

  inline  ::uint32_t getPunishmentCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminFetchResponseMessage::Builder {
public:
  typedef AdminFetchResponseMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool getFound();
  inline void setFound(bool value);

  inline bool getWhitelisted();
  inline void setWhitelisted(bool value);

  inline bool hasRoles();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getRoles();
  inline void setRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoles(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initRoles(unsigned int size);
  inline void adoptRoles(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownRoles();

  inline bool hasActiveBan();
  inline  ::globed::schema::main::UserPunishment::Builder getActiveBan();
  inline void setActiveBan( ::globed::schema::main::UserPunishment::Reader value);
  inline  ::globed::schema::main::UserPunishment::Builder initActiveBan();
  inline void adoptActiveBan(::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> disownActiveBan();

  inline bool hasActiveRoomBan();
  inline  ::globed::schema::main::UserPunishment::Builder getActiveRoomBan();
  inline void setActiveRoomBan( ::globed::schema::main::UserPunishment::Reader value);
  inline  ::globed::schema::main::UserPunishment::Builder initActiveRoomBan();
  inline void adoptActiveRoomBan(::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> disownActiveRoomBan();

  inline bool hasActiveMute();
  inline  ::globed::schema::main::UserPunishment::Builder getActiveMute();
  inline void setActiveMute( ::globed::schema::main::UserPunishment::Reader value);
  inline  ::globed::schema::main::UserPunishment::Builder initActiveMute();
  inline void adoptActiveMute(::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> disownActiveMute();

  inline  ::uint32_t getPunishmentCount();
  inline void setPunishmentCount( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminFetchResponseMessage::Pipeline {
public:
  typedef AdminFetchResponseMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::main::UserPunishment::Pipeline getActiveBan();
  inline  ::globed::schema::main::UserPunishment::Pipeline getActiveRoomBan();
  inline  ::globed::schema::main::UserPunishment::Pipeline getActiveMute();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class FetchedMod::Reader {
public:
  typedef FetchedMod Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasUsername() const;
  inline  ::capnp::Text::Reader getUsername() const;

  inline  ::int16_t getCube() const;

  inline  ::uint16_t getColor1() const;

  inline  ::uint16_t getColor2() const;

  inline  ::uint16_t getGlowColor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class FetchedMod::Builder {
public:
  typedef FetchedMod Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasUsername();
  inline  ::capnp::Text::Builder getUsername();
  inline void setUsername( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUsername(unsigned int size);
  inline void adoptUsername(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUsername();

  inline  ::int16_t getCube();
  inline void setCube( ::int16_t value);

  inline  ::uint16_t getColor1();
  inline void setColor1( ::uint16_t value);

  inline  ::uint16_t getColor2();
  inline void setColor2( ::uint16_t value);

  inline  ::uint16_t getGlowColor();
  inline void setGlowColor( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class FetchedMod::Pipeline {
public:
  typedef FetchedMod Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminFetchModsResponseMessage::Reader {
public:
  typedef AdminFetchModsResponseMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasUsers() const;
  inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Reader getUsers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminFetchModsResponseMessage::Builder {
public:
  typedef AdminFetchModsResponseMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasUsers();
  inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Builder getUsers();
  inline void setUsers( ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Builder initUsers(unsigned int size);
  inline void adoptUsers(::capnp::Orphan< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>> disownUsers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminFetchModsResponseMessage::Pipeline {
public:
  typedef AdminFetchModsResponseMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminFetchLogsMessage::Reader {
public:
  typedef AdminFetchLogsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getIssuer() const;

  inline  ::int32_t getTarget() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline  ::int64_t getBefore() const;

  inline  ::int64_t getAfter() const;

  inline  ::uint32_t getPage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminFetchLogsMessage::Builder {
public:
  typedef AdminFetchLogsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getIssuer();
  inline void setIssuer( ::int32_t value);

  inline  ::int32_t getTarget();
  inline void setTarget( ::int32_t value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline  ::int64_t getBefore();
  inline void setBefore( ::int64_t value);

  inline  ::int64_t getAfter();
  inline void setAfter( ::int64_t value);

  inline  ::uint32_t getPage();
  inline void setPage( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminFetchLogsMessage::Pipeline {
public:
  typedef AdminFetchLogsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AuditLog::Reader {
public:
  typedef AuditLog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId() const;

  inline  ::int32_t getAccountId() const;

  inline  ::int32_t getTargetAccountId() const;

  inline bool hasType() const;
  inline  ::capnp::Text::Reader getType() const;

  inline  ::int64_t getTimestamp() const;

  inline  ::int64_t getExpiresAt() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AuditLog::Builder {
public:
  typedef AuditLog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline  ::int32_t getTargetAccountId();
  inline void setTargetAccountId( ::int32_t value);

  inline bool hasType();
  inline  ::capnp::Text::Builder getType();
  inline void setType( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initType(unsigned int size);
  inline void adoptType(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownType();

  inline  ::int64_t getTimestamp();
  inline void setTimestamp( ::int64_t value);

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AuditLog::Pipeline {
public:
  typedef AuditLog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminLogsResponseMessage::Reader {
public:
  typedef AdminLogsResponseMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLogs() const;
  inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Reader getLogs() const;

  inline bool hasAccounts() const;
  inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Reader getAccounts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminLogsResponseMessage::Builder {
public:
  typedef AdminLogsResponseMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLogs();
  inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Builder getLogs();
  inline void setLogs( ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Builder initLogs(unsigned int size);
  inline void adoptLogs(::capnp::Orphan< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>> disownLogs();

  inline bool hasAccounts();
  inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Builder getAccounts();
  inline void setAccounts( ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Builder initAccounts(unsigned int size);
  inline void adoptAccounts(::capnp::Orphan< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>> disownAccounts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminLogsResponseMessage::Pipeline {
public:
  typedef AdminLogsResponseMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminBanMessage::Reader {
public:
  typedef AdminBanMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline  ::int64_t getExpiresAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminBanMessage::Builder {
public:
  typedef AdminBanMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminBanMessage::Pipeline {
public:
  typedef AdminBanMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminUnbanMessage::Reader {
public:
  typedef AdminUnbanMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminUnbanMessage::Builder {
public:
  typedef AdminUnbanMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminUnbanMessage::Pipeline {
public:
  typedef AdminUnbanMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminRoomBanMessage::Reader {
public:
  typedef AdminRoomBanMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasReason() const;
  inline  ::capnp::Text::Reader getReason() const;

  inline  ::int64_t getExpiresAt() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminRoomBanMessage::Builder {
public:
  typedef AdminRoomBanMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasReason();
  inline  ::capnp::Text::Builder getReason();
  inline void setReason( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReason(unsigned int size);
  inline void adoptReason(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReason();

  inline  ::int64_t getExpiresAt();
  inline void setExpiresAt( ::int64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminRoomBanMessage::Pipeline {
public:
  typedef AdminRoomBanMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminRoomUnbanMessage::Reader {
public:
  typedef AdminRoomUnbanMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminRoomUnbanMessage::Builder {
public:
  typedef AdminRoomUnbanMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminRoomUnbanMessage::Pipeline {
public:
  typedef AdminRoomUnbanMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminEditRolesMessage::Reader {
public:
  typedef AdminEditRolesMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasRoles() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getRoles() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminEditRolesMessage::Builder {
public:
  typedef AdminEditRolesMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasRoles();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getRoles();
  inline void setRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setRoles(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initRoles(unsigned int size);
  inline void adoptRoles(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownRoles();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminEditRolesMessage::Pipeline {
public:
  typedef AdminEditRolesMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminSetPasswordMessage::Reader {
public:
  typedef AdminSetPasswordMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasNewPassword() const;
  inline  ::capnp::Text::Reader getNewPassword() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminSetPasswordMessage::Builder {
public:
  typedef AdminSetPasswordMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasNewPassword();
  inline  ::capnp::Text::Builder getNewPassword();
  inline void setNewPassword( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initNewPassword(unsigned int size);
  inline void adoptNewPassword(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownNewPassword();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminSetPasswordMessage::Pipeline {
public:
  typedef AdminSetPasswordMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminUpdateUserMessage::Reader {
public:
  typedef AdminUpdateUserMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasUsername() const;
  inline  ::capnp::Text::Reader getUsername() const;

  inline  ::int16_t getCube() const;

  inline  ::uint16_t getColor1() const;

  inline  ::uint16_t getColor2() const;

  inline  ::uint16_t getGlowColor() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminUpdateUserMessage::Builder {
public:
  typedef AdminUpdateUserMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasUsername();
  inline  ::capnp::Text::Builder getUsername();
  inline void setUsername( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUsername(unsigned int size);
  inline void adoptUsername(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUsername();

  inline  ::int16_t getCube();
  inline void setCube( ::int16_t value);

  inline  ::uint16_t getColor1();
  inline void setColor1( ::uint16_t value);

  inline  ::uint16_t getColor2();
  inline void setColor2( ::uint16_t value);

  inline  ::uint16_t getGlowColor();
  inline void setGlowColor( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminUpdateUserMessage::Pipeline {
public:
  typedef AdminUpdateUserMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminFetchModsMessage::Reader {
public:
  typedef AdminFetchModsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminFetchModsMessage::Builder {
public:
  typedef AdminFetchModsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminFetchModsMessage::Pipeline {
public:
  typedef AdminFetchModsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class AdminResultMessage::Reader {
public:
  typedef AdminResultMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool getSuccess() const;

  inline bool hasError() const;
  inline  ::capnp::Text::Reader getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class AdminResultMessage::Builder {
public:
  typedef AdminResultMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool getSuccess();
  inline void setSuccess(bool value);

  inline bool hasError();
  inline  ::capnp::Text::Builder getError();
  inline void setError( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initError(unsigned int size);
  inline void adoptError(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownError();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class AdminResultMessage::Pipeline {
public:
  typedef AdminResultMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isLoginUToken() const;
  inline bool hasLoginUToken() const;
  inline  ::globed::schema::main::LoginUTokenMessage::Reader getLoginUToken() const;

  inline bool isLoginArgon() const;
  inline bool hasLoginArgon() const;
  inline  ::globed::schema::main::LoginArgonMessage::Reader getLoginArgon() const;

  inline bool isLoginPlain() const;
  inline bool hasLoginPlain() const;
  inline  ::globed::schema::main::LoginPlainMessage::Reader getLoginPlain() const;

  inline bool isLoginOk() const;
  inline bool hasLoginOk() const;
  inline  ::globed::schema::main::LoginOkMessage::Reader getLoginOk() const;

  inline bool isLoginFailed() const;
  inline bool hasLoginFailed() const;
  inline  ::globed::schema::main::LoginFailedMessage::Reader getLoginFailed() const;

  inline bool isLoginRequired() const;
  inline bool hasLoginRequired() const;
  inline  ::globed::schema::main::LoginRequiredMessage::Reader getLoginRequired() const;

  inline bool isUpdateOwnData() const;
  inline bool hasUpdateOwnData() const;
  inline  ::globed::schema::main::UpdateOwnDataMessage::Reader getUpdateOwnData() const;

  inline bool isCreateRoom() const;
  inline bool hasCreateRoom() const;
  inline  ::globed::schema::main::CreateRoomMessage::Reader getCreateRoom() const;

  inline bool isJoinRoom() const;
  inline bool hasJoinRoom() const;
  inline  ::globed::schema::main::JoinRoomMessage::Reader getJoinRoom() const;

  inline bool isLeaveRoom() const;
  inline  ::capnp::Void getLeaveRoom() const;

  inline bool isWarpPlayer() const;
  inline bool hasWarpPlayer() const;
  inline  ::globed::schema::main::WarpPlayerMessage::Reader getWarpPlayer() const;

  inline bool isRoomState() const;
  inline bool hasRoomState() const;
  inline  ::globed::schema::main::RoomStateMessage::Reader getRoomState() const;

  inline bool isJoinSession() const;
  inline bool hasJoinSession() const;
  inline  ::globed::schema::main::JoinSessionMessage::Reader getJoinSession() const;

  inline bool isLeaveSession() const;
  inline bool hasLeaveSession() const;
  inline  ::globed::schema::main::LeaveSessionMessage::Reader getLeaveSession() const;

  inline bool isJoinFailed() const;
  inline bool hasJoinFailed() const;
  inline  ::globed::schema::main::JoinFailedMessage::Reader getJoinFailed() const;

  inline bool isKicked() const;
  inline bool hasKicked() const;
  inline  ::globed::schema::main::KickedMessage::Reader getKicked() const;

  inline bool isCheckRoomState() const;
  inline  ::capnp::Void getCheckRoomState() const;

  inline bool isRequestPlayerCounts() const;
  inline bool hasRequestPlayerCounts() const;
  inline  ::globed::schema::main::RequestPlayerCountsMessage::Reader getRequestPlayerCounts() const;

  inline bool isPlayerCounts() const;
  inline bool hasPlayerCounts() const;
  inline  ::globed::schema::main::PlayerCountsMessage::Reader getPlayerCounts() const;

  inline bool isRoomJoinFailed() const;
  inline bool hasRoomJoinFailed() const;
  inline  ::globed::schema::main::RoomJoinFailedMessage::Reader getRoomJoinFailed() const;

  inline bool isRoomCreateFailed() const;
  inline bool hasRoomCreateFailed() const;
  inline  ::globed::schema::main::RoomCreateFailedMessage::Reader getRoomCreateFailed() const;

  inline bool isRequestRoomList() const;
  inline bool hasRequestRoomList() const;
  inline  ::globed::schema::main::RequestRoomListMessage::Reader getRequestRoomList() const;

  inline bool isRoomList() const;
  inline bool hasRoomList() const;
  inline  ::globed::schema::main::RoomListMessage::Reader getRoomList() const;

  inline bool isBanned() const;
  inline bool hasBanned() const;
  inline  ::globed::schema::main::BannedMessage::Reader getBanned() const;

  inline bool isRoomBanned() const;
  inline bool hasRoomBanned() const;
  inline  ::globed::schema::main::RoomBannedMessage::Reader getRoomBanned() const;

  inline bool isAdminLogin() const;
  inline bool hasAdminLogin() const;
  inline  ::globed::schema::main::AdminLoginMessage::Reader getAdminLogin() const;

  inline bool isAdminKick() const;
  inline bool hasAdminKick() const;
  inline  ::globed::schema::main::AdminKickMessage::Reader getAdminKick() const;

  inline bool isAdminNotice() const;
  inline bool hasAdminNotice() const;
  inline  ::globed::schema::main::AdminNoticeMessage::Reader getAdminNotice() const;

  inline bool isAdminNoticeEveryone() const;
  inline bool hasAdminNoticeEveryone() const;
  inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Reader getAdminNoticeEveryone() const;

  inline bool isAdminFetchUser() const;
  inline bool hasAdminFetchUser() const;
  inline  ::globed::schema::main::AdminFetchUserMessage::Reader getAdminFetchUser() const;

  inline bool isAdminBan() const;
  inline bool hasAdminBan() const;
  inline  ::globed::schema::main::AdminBanMessage::Reader getAdminBan() const;

  inline bool isAdminUnban() const;
  inline bool hasAdminUnban() const;
  inline  ::globed::schema::main::AdminUnbanMessage::Reader getAdminUnban() const;

  inline bool isAdminRoomBan() const;
  inline bool hasAdminRoomBan() const;
  inline  ::globed::schema::main::AdminRoomBanMessage::Reader getAdminRoomBan() const;

  inline bool isAdminRoomUnban() const;
  inline bool hasAdminRoomUnban() const;
  inline  ::globed::schema::main::AdminRoomUnbanMessage::Reader getAdminRoomUnban() const;

  inline bool isAdminEditRoles() const;
  inline bool hasAdminEditRoles() const;
  inline  ::globed::schema::main::AdminEditRolesMessage::Reader getAdminEditRoles() const;

  inline bool isAdminSetPassword() const;
  inline bool hasAdminSetPassword() const;
  inline  ::globed::schema::main::AdminSetPasswordMessage::Reader getAdminSetPassword() const;

  inline bool isAdminResult() const;
  inline bool hasAdminResult() const;
  inline  ::globed::schema::main::AdminResultMessage::Reader getAdminResult() const;

  inline bool isAdminFetchResponse() const;
  inline bool hasAdminFetchResponse() const;
  inline  ::globed::schema::main::AdminFetchResponseMessage::Reader getAdminFetchResponse() const;

  inline bool isNotice() const;
  inline bool hasNotice() const;
  inline  ::globed::schema::main::NoticeMessage::Reader getNotice() const;

  inline bool isAdminUpdateUser() const;
  inline bool hasAdminUpdateUser() const;
  inline  ::globed::schema::main::AdminUpdateUserMessage::Reader getAdminUpdateUser() const;

  inline bool isAdminFetchLogs() const;
  inline bool hasAdminFetchLogs() const;
  inline  ::globed::schema::main::AdminFetchLogsMessage::Reader getAdminFetchLogs() const;

  inline bool isAdminLogsResponse() const;
  inline bool hasAdminLogsResponse() const;
  inline  ::globed::schema::main::AdminLogsResponseMessage::Reader getAdminLogsResponse() const;

  inline bool isAssignTeam() const;
  inline bool hasAssignTeam() const;
  inline  ::globed::schema::main::AssignTeamMessage::Reader getAssignTeam() const;

  inline bool isCreateTeam() const;
  inline bool hasCreateTeam() const;
  inline  ::globed::schema::main::CreateTeamMessage::Reader getCreateTeam() const;

  inline bool isDeleteTeam() const;
  inline bool hasDeleteTeam() const;
  inline  ::globed::schema::main::DeleteTeamMessage::Reader getDeleteTeam() const;

  inline bool isWarn() const;
  inline bool hasWarn() const;
  inline  ::globed::schema::main::WarnMessage::Reader getWarn() const;

  inline bool isTeamCreationResult() const;
  inline bool hasTeamCreationResult() const;
  inline  ::globed::schema::main::TeamCreationResultMessage::Reader getTeamCreationResult() const;

  inline bool isTeamChanged() const;
  inline bool hasTeamChanged() const;
  inline  ::globed::schema::main::TeamChangedMessage::Reader getTeamChanged() const;

  inline bool isGetTeamMembers() const;
  inline bool hasGetTeamMembers() const;
  inline  ::globed::schema::main::GetTeamMembersMessage::Reader getGetTeamMembers() const;

  inline bool isTeamMembers() const;
  inline bool hasTeamMembers() const;
  inline  ::globed::schema::main::TeamMembersMessage::Reader getTeamMembers() const;

  inline bool isUpdateTeam() const;
  inline bool hasUpdateTeam() const;
  inline  ::globed::schema::main::UpdateTeamMessage::Reader getUpdateTeam() const;

  inline bool isTeamsUpdated() const;
  inline bool hasTeamsUpdated() const;
  inline  ::globed::schema::main::TeamsUpdatedMessage::Reader getTeamsUpdated() const;

  inline bool isAdminFetchMods() const;
  inline bool hasAdminFetchMods() const;
  inline  ::globed::schema::main::AdminFetchModsMessage::Reader getAdminFetchMods() const;

  inline bool isAdminFetchModsResponse() const;
  inline bool hasAdminFetchModsResponse() const;
  inline  ::globed::schema::main::AdminFetchModsResponseMessage::Reader getAdminFetchModsResponse() const;

  inline bool isServersChanged() const;
  inline bool hasServersChanged() const;
  inline  ::globed::schema::main::ServersChangedMessage::Reader getServersChanged() const;

  inline bool isRoomOwnerAction() const;
  inline bool hasRoomOwnerAction() const;
  inline  ::globed::schema::main::RoomOwnerActionMessage::Reader getRoomOwnerAction() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isLoginUToken();
  inline bool hasLoginUToken();
  inline  ::globed::schema::main::LoginUTokenMessage::Builder getLoginUToken();
  inline void setLoginUToken( ::globed::schema::main::LoginUTokenMessage::Reader value);
  inline  ::globed::schema::main::LoginUTokenMessage::Builder initLoginUToken();
  inline void adoptLoginUToken(::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage> disownLoginUToken();

  inline bool isLoginArgon();
  inline bool hasLoginArgon();
  inline  ::globed::schema::main::LoginArgonMessage::Builder getLoginArgon();
  inline void setLoginArgon( ::globed::schema::main::LoginArgonMessage::Reader value);
  inline  ::globed::schema::main::LoginArgonMessage::Builder initLoginArgon();
  inline void adoptLoginArgon(::capnp::Orphan< ::globed::schema::main::LoginArgonMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage> disownLoginArgon();

  inline bool isLoginPlain();
  inline bool hasLoginPlain();
  inline  ::globed::schema::main::LoginPlainMessage::Builder getLoginPlain();
  inline void setLoginPlain( ::globed::schema::main::LoginPlainMessage::Reader value);
  inline  ::globed::schema::main::LoginPlainMessage::Builder initLoginPlain();
  inline void adoptLoginPlain(::capnp::Orphan< ::globed::schema::main::LoginPlainMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage> disownLoginPlain();

  inline bool isLoginOk();
  inline bool hasLoginOk();
  inline  ::globed::schema::main::LoginOkMessage::Builder getLoginOk();
  inline void setLoginOk( ::globed::schema::main::LoginOkMessage::Reader value);
  inline  ::globed::schema::main::LoginOkMessage::Builder initLoginOk();
  inline void adoptLoginOk(::capnp::Orphan< ::globed::schema::main::LoginOkMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginOkMessage> disownLoginOk();

  inline bool isLoginFailed();
  inline bool hasLoginFailed();
  inline  ::globed::schema::main::LoginFailedMessage::Builder getLoginFailed();
  inline void setLoginFailed( ::globed::schema::main::LoginFailedMessage::Reader value);
  inline  ::globed::schema::main::LoginFailedMessage::Builder initLoginFailed();
  inline void adoptLoginFailed(::capnp::Orphan< ::globed::schema::main::LoginFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage> disownLoginFailed();

  inline bool isLoginRequired();
  inline bool hasLoginRequired();
  inline  ::globed::schema::main::LoginRequiredMessage::Builder getLoginRequired();
  inline void setLoginRequired( ::globed::schema::main::LoginRequiredMessage::Reader value);
  inline  ::globed::schema::main::LoginRequiredMessage::Builder initLoginRequired();
  inline void adoptLoginRequired(::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage> disownLoginRequired();

  inline bool isUpdateOwnData();
  inline bool hasUpdateOwnData();
  inline  ::globed::schema::main::UpdateOwnDataMessage::Builder getUpdateOwnData();
  inline void setUpdateOwnData( ::globed::schema::main::UpdateOwnDataMessage::Reader value);
  inline  ::globed::schema::main::UpdateOwnDataMessage::Builder initUpdateOwnData();
  inline void adoptUpdateOwnData(::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage> disownUpdateOwnData();

  inline bool isCreateRoom();
  inline bool hasCreateRoom();
  inline  ::globed::schema::main::CreateRoomMessage::Builder getCreateRoom();
  inline void setCreateRoom( ::globed::schema::main::CreateRoomMessage::Reader value);
  inline  ::globed::schema::main::CreateRoomMessage::Builder initCreateRoom();
  inline void adoptCreateRoom(::capnp::Orphan< ::globed::schema::main::CreateRoomMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage> disownCreateRoom();

  inline bool isJoinRoom();
  inline bool hasJoinRoom();
  inline  ::globed::schema::main::JoinRoomMessage::Builder getJoinRoom();
  inline void setJoinRoom( ::globed::schema::main::JoinRoomMessage::Reader value);
  inline  ::globed::schema::main::JoinRoomMessage::Builder initJoinRoom();
  inline void adoptJoinRoom(::capnp::Orphan< ::globed::schema::main::JoinRoomMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage> disownJoinRoom();

  inline bool isLeaveRoom();
  inline  ::capnp::Void getLeaveRoom();
  inline void setLeaveRoom( ::capnp::Void value = ::capnp::VOID);

  inline bool isWarpPlayer();
  inline bool hasWarpPlayer();
  inline  ::globed::schema::main::WarpPlayerMessage::Builder getWarpPlayer();
  inline void setWarpPlayer( ::globed::schema::main::WarpPlayerMessage::Reader value);
  inline  ::globed::schema::main::WarpPlayerMessage::Builder initWarpPlayer();
  inline void adoptWarpPlayer(::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage> disownWarpPlayer();

  inline bool isRoomState();
  inline bool hasRoomState();
  inline  ::globed::schema::main::RoomStateMessage::Builder getRoomState();
  inline void setRoomState( ::globed::schema::main::RoomStateMessage::Reader value);
  inline  ::globed::schema::main::RoomStateMessage::Builder initRoomState();
  inline void adoptRoomState(::capnp::Orphan< ::globed::schema::main::RoomStateMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomStateMessage> disownRoomState();

  inline bool isJoinSession();
  inline bool hasJoinSession();
  inline  ::globed::schema::main::JoinSessionMessage::Builder getJoinSession();
  inline void setJoinSession( ::globed::schema::main::JoinSessionMessage::Reader value);
  inline  ::globed::schema::main::JoinSessionMessage::Builder initJoinSession();
  inline void adoptJoinSession(::capnp::Orphan< ::globed::schema::main::JoinSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage> disownJoinSession();

  inline bool isLeaveSession();
  inline bool hasLeaveSession();
  inline  ::globed::schema::main::LeaveSessionMessage::Builder getLeaveSession();
  inline void setLeaveSession( ::globed::schema::main::LeaveSessionMessage::Reader value);
  inline  ::globed::schema::main::LeaveSessionMessage::Builder initLeaveSession();
  inline void adoptLeaveSession(::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage> disownLeaveSession();

  inline bool isJoinFailed();
  inline bool hasJoinFailed();
  inline  ::globed::schema::main::JoinFailedMessage::Builder getJoinFailed();
  inline void setJoinFailed( ::globed::schema::main::JoinFailedMessage::Reader value);
  inline  ::globed::schema::main::JoinFailedMessage::Builder initJoinFailed();
  inline void adoptJoinFailed(::capnp::Orphan< ::globed::schema::main::JoinFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage> disownJoinFailed();

  inline bool isKicked();
  inline bool hasKicked();
  inline  ::globed::schema::main::KickedMessage::Builder getKicked();
  inline void setKicked( ::globed::schema::main::KickedMessage::Reader value);
  inline  ::globed::schema::main::KickedMessage::Builder initKicked();
  inline void adoptKicked(::capnp::Orphan< ::globed::schema::main::KickedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::KickedMessage> disownKicked();

  inline bool isCheckRoomState();
  inline  ::capnp::Void getCheckRoomState();
  inline void setCheckRoomState( ::capnp::Void value = ::capnp::VOID);

  inline bool isRequestPlayerCounts();
  inline bool hasRequestPlayerCounts();
  inline  ::globed::schema::main::RequestPlayerCountsMessage::Builder getRequestPlayerCounts();
  inline void setRequestPlayerCounts( ::globed::schema::main::RequestPlayerCountsMessage::Reader value);
  inline  ::globed::schema::main::RequestPlayerCountsMessage::Builder initRequestPlayerCounts();
  inline void adoptRequestPlayerCounts(::capnp::Orphan< ::globed::schema::main::RequestPlayerCountsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RequestPlayerCountsMessage> disownRequestPlayerCounts();

  inline bool isPlayerCounts();
  inline bool hasPlayerCounts();
  inline  ::globed::schema::main::PlayerCountsMessage::Builder getPlayerCounts();
  inline void setPlayerCounts( ::globed::schema::main::PlayerCountsMessage::Reader value);
  inline  ::globed::schema::main::PlayerCountsMessage::Builder initPlayerCounts();
  inline void adoptPlayerCounts(::capnp::Orphan< ::globed::schema::main::PlayerCountsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::PlayerCountsMessage> disownPlayerCounts();

  inline bool isRoomJoinFailed();
  inline bool hasRoomJoinFailed();
  inline  ::globed::schema::main::RoomJoinFailedMessage::Builder getRoomJoinFailed();
  inline void setRoomJoinFailed( ::globed::schema::main::RoomJoinFailedMessage::Reader value);
  inline  ::globed::schema::main::RoomJoinFailedMessage::Builder initRoomJoinFailed();
  inline void adoptRoomJoinFailed(::capnp::Orphan< ::globed::schema::main::RoomJoinFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomJoinFailedMessage> disownRoomJoinFailed();

  inline bool isRoomCreateFailed();
  inline bool hasRoomCreateFailed();
  inline  ::globed::schema::main::RoomCreateFailedMessage::Builder getRoomCreateFailed();
  inline void setRoomCreateFailed( ::globed::schema::main::RoomCreateFailedMessage::Reader value);
  inline  ::globed::schema::main::RoomCreateFailedMessage::Builder initRoomCreateFailed();
  inline void adoptRoomCreateFailed(::capnp::Orphan< ::globed::schema::main::RoomCreateFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomCreateFailedMessage> disownRoomCreateFailed();

  inline bool isRequestRoomList();
  inline bool hasRequestRoomList();
  inline  ::globed::schema::main::RequestRoomListMessage::Builder getRequestRoomList();
  inline void setRequestRoomList( ::globed::schema::main::RequestRoomListMessage::Reader value);
  inline  ::globed::schema::main::RequestRoomListMessage::Builder initRequestRoomList();
  inline void adoptRequestRoomList(::capnp::Orphan< ::globed::schema::main::RequestRoomListMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RequestRoomListMessage> disownRequestRoomList();

  inline bool isRoomList();
  inline bool hasRoomList();
  inline  ::globed::schema::main::RoomListMessage::Builder getRoomList();
  inline void setRoomList( ::globed::schema::main::RoomListMessage::Reader value);
  inline  ::globed::schema::main::RoomListMessage::Builder initRoomList();
  inline void adoptRoomList(::capnp::Orphan< ::globed::schema::main::RoomListMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomListMessage> disownRoomList();

  inline bool isBanned();
  inline bool hasBanned();
  inline  ::globed::schema::main::BannedMessage::Builder getBanned();
  inline void setBanned( ::globed::schema::main::BannedMessage::Reader value);
  inline  ::globed::schema::main::BannedMessage::Builder initBanned();
  inline void adoptBanned(::capnp::Orphan< ::globed::schema::main::BannedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::BannedMessage> disownBanned();

  inline bool isRoomBanned();
  inline bool hasRoomBanned();
  inline  ::globed::schema::main::RoomBannedMessage::Builder getRoomBanned();
  inline void setRoomBanned( ::globed::schema::main::RoomBannedMessage::Reader value);
  inline  ::globed::schema::main::RoomBannedMessage::Builder initRoomBanned();
  inline void adoptRoomBanned(::capnp::Orphan< ::globed::schema::main::RoomBannedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomBannedMessage> disownRoomBanned();

  inline bool isAdminLogin();
  inline bool hasAdminLogin();
  inline  ::globed::schema::main::AdminLoginMessage::Builder getAdminLogin();
  inline void setAdminLogin( ::globed::schema::main::AdminLoginMessage::Reader value);
  inline  ::globed::schema::main::AdminLoginMessage::Builder initAdminLogin();
  inline void adoptAdminLogin(::capnp::Orphan< ::globed::schema::main::AdminLoginMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminLoginMessage> disownAdminLogin();

  inline bool isAdminKick();
  inline bool hasAdminKick();
  inline  ::globed::schema::main::AdminKickMessage::Builder getAdminKick();
  inline void setAdminKick( ::globed::schema::main::AdminKickMessage::Reader value);
  inline  ::globed::schema::main::AdminKickMessage::Builder initAdminKick();
  inline void adoptAdminKick(::capnp::Orphan< ::globed::schema::main::AdminKickMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminKickMessage> disownAdminKick();

  inline bool isAdminNotice();
  inline bool hasAdminNotice();
  inline  ::globed::schema::main::AdminNoticeMessage::Builder getAdminNotice();
  inline void setAdminNotice( ::globed::schema::main::AdminNoticeMessage::Reader value);
  inline  ::globed::schema::main::AdminNoticeMessage::Builder initAdminNotice();
  inline void adoptAdminNotice(::capnp::Orphan< ::globed::schema::main::AdminNoticeMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminNoticeMessage> disownAdminNotice();

  inline bool isAdminNoticeEveryone();
  inline bool hasAdminNoticeEveryone();
  inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Builder getAdminNoticeEveryone();
  inline void setAdminNoticeEveryone( ::globed::schema::main::AdminNoticeEveryoneMessage::Reader value);
  inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Builder initAdminNoticeEveryone();
  inline void adoptAdminNoticeEveryone(::capnp::Orphan< ::globed::schema::main::AdminNoticeEveryoneMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminNoticeEveryoneMessage> disownAdminNoticeEveryone();

  inline bool isAdminFetchUser();
  inline bool hasAdminFetchUser();
  inline  ::globed::schema::main::AdminFetchUserMessage::Builder getAdminFetchUser();
  inline void setAdminFetchUser( ::globed::schema::main::AdminFetchUserMessage::Reader value);
  inline  ::globed::schema::main::AdminFetchUserMessage::Builder initAdminFetchUser();
  inline void adoptAdminFetchUser(::capnp::Orphan< ::globed::schema::main::AdminFetchUserMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminFetchUserMessage> disownAdminFetchUser();

  inline bool isAdminBan();
  inline bool hasAdminBan();
  inline  ::globed::schema::main::AdminBanMessage::Builder getAdminBan();
  inline void setAdminBan( ::globed::schema::main::AdminBanMessage::Reader value);
  inline  ::globed::schema::main::AdminBanMessage::Builder initAdminBan();
  inline void adoptAdminBan(::capnp::Orphan< ::globed::schema::main::AdminBanMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminBanMessage> disownAdminBan();

  inline bool isAdminUnban();
  inline bool hasAdminUnban();
  inline  ::globed::schema::main::AdminUnbanMessage::Builder getAdminUnban();
  inline void setAdminUnban( ::globed::schema::main::AdminUnbanMessage::Reader value);
  inline  ::globed::schema::main::AdminUnbanMessage::Builder initAdminUnban();
  inline void adoptAdminUnban(::capnp::Orphan< ::globed::schema::main::AdminUnbanMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminUnbanMessage> disownAdminUnban();

  inline bool isAdminRoomBan();
  inline bool hasAdminRoomBan();
  inline  ::globed::schema::main::AdminRoomBanMessage::Builder getAdminRoomBan();
  inline void setAdminRoomBan( ::globed::schema::main::AdminRoomBanMessage::Reader value);
  inline  ::globed::schema::main::AdminRoomBanMessage::Builder initAdminRoomBan();
  inline void adoptAdminRoomBan(::capnp::Orphan< ::globed::schema::main::AdminRoomBanMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminRoomBanMessage> disownAdminRoomBan();

  inline bool isAdminRoomUnban();
  inline bool hasAdminRoomUnban();
  inline  ::globed::schema::main::AdminRoomUnbanMessage::Builder getAdminRoomUnban();
  inline void setAdminRoomUnban( ::globed::schema::main::AdminRoomUnbanMessage::Reader value);
  inline  ::globed::schema::main::AdminRoomUnbanMessage::Builder initAdminRoomUnban();
  inline void adoptAdminRoomUnban(::capnp::Orphan< ::globed::schema::main::AdminRoomUnbanMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminRoomUnbanMessage> disownAdminRoomUnban();

  inline bool isAdminEditRoles();
  inline bool hasAdminEditRoles();
  inline  ::globed::schema::main::AdminEditRolesMessage::Builder getAdminEditRoles();
  inline void setAdminEditRoles( ::globed::schema::main::AdminEditRolesMessage::Reader value);
  inline  ::globed::schema::main::AdminEditRolesMessage::Builder initAdminEditRoles();
  inline void adoptAdminEditRoles(::capnp::Orphan< ::globed::schema::main::AdminEditRolesMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminEditRolesMessage> disownAdminEditRoles();

  inline bool isAdminSetPassword();
  inline bool hasAdminSetPassword();
  inline  ::globed::schema::main::AdminSetPasswordMessage::Builder getAdminSetPassword();
  inline void setAdminSetPassword( ::globed::schema::main::AdminSetPasswordMessage::Reader value);
  inline  ::globed::schema::main::AdminSetPasswordMessage::Builder initAdminSetPassword();
  inline void adoptAdminSetPassword(::capnp::Orphan< ::globed::schema::main::AdminSetPasswordMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminSetPasswordMessage> disownAdminSetPassword();

  inline bool isAdminResult();
  inline bool hasAdminResult();
  inline  ::globed::schema::main::AdminResultMessage::Builder getAdminResult();
  inline void setAdminResult( ::globed::schema::main::AdminResultMessage::Reader value);
  inline  ::globed::schema::main::AdminResultMessage::Builder initAdminResult();
  inline void adoptAdminResult(::capnp::Orphan< ::globed::schema::main::AdminResultMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminResultMessage> disownAdminResult();

  inline bool isAdminFetchResponse();
  inline bool hasAdminFetchResponse();
  inline  ::globed::schema::main::AdminFetchResponseMessage::Builder getAdminFetchResponse();
  inline void setAdminFetchResponse( ::globed::schema::main::AdminFetchResponseMessage::Reader value);
  inline  ::globed::schema::main::AdminFetchResponseMessage::Builder initAdminFetchResponse();
  inline void adoptAdminFetchResponse(::capnp::Orphan< ::globed::schema::main::AdminFetchResponseMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminFetchResponseMessage> disownAdminFetchResponse();

  inline bool isNotice();
  inline bool hasNotice();
  inline  ::globed::schema::main::NoticeMessage::Builder getNotice();
  inline void setNotice( ::globed::schema::main::NoticeMessage::Reader value);
  inline  ::globed::schema::main::NoticeMessage::Builder initNotice();
  inline void adoptNotice(::capnp::Orphan< ::globed::schema::main::NoticeMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::NoticeMessage> disownNotice();

  inline bool isAdminUpdateUser();
  inline bool hasAdminUpdateUser();
  inline  ::globed::schema::main::AdminUpdateUserMessage::Builder getAdminUpdateUser();
  inline void setAdminUpdateUser( ::globed::schema::main::AdminUpdateUserMessage::Reader value);
  inline  ::globed::schema::main::AdminUpdateUserMessage::Builder initAdminUpdateUser();
  inline void adoptAdminUpdateUser(::capnp::Orphan< ::globed::schema::main::AdminUpdateUserMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminUpdateUserMessage> disownAdminUpdateUser();

  inline bool isAdminFetchLogs();
  inline bool hasAdminFetchLogs();
  inline  ::globed::schema::main::AdminFetchLogsMessage::Builder getAdminFetchLogs();
  inline void setAdminFetchLogs( ::globed::schema::main::AdminFetchLogsMessage::Reader value);
  inline  ::globed::schema::main::AdminFetchLogsMessage::Builder initAdminFetchLogs();
  inline void adoptAdminFetchLogs(::capnp::Orphan< ::globed::schema::main::AdminFetchLogsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminFetchLogsMessage> disownAdminFetchLogs();

  inline bool isAdminLogsResponse();
  inline bool hasAdminLogsResponse();
  inline  ::globed::schema::main::AdminLogsResponseMessage::Builder getAdminLogsResponse();
  inline void setAdminLogsResponse( ::globed::schema::main::AdminLogsResponseMessage::Reader value);
  inline  ::globed::schema::main::AdminLogsResponseMessage::Builder initAdminLogsResponse();
  inline void adoptAdminLogsResponse(::capnp::Orphan< ::globed::schema::main::AdminLogsResponseMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminLogsResponseMessage> disownAdminLogsResponse();

  inline bool isAssignTeam();
  inline bool hasAssignTeam();
  inline  ::globed::schema::main::AssignTeamMessage::Builder getAssignTeam();
  inline void setAssignTeam( ::globed::schema::main::AssignTeamMessage::Reader value);
  inline  ::globed::schema::main::AssignTeamMessage::Builder initAssignTeam();
  inline void adoptAssignTeam(::capnp::Orphan< ::globed::schema::main::AssignTeamMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AssignTeamMessage> disownAssignTeam();

  inline bool isCreateTeam();
  inline bool hasCreateTeam();
  inline  ::globed::schema::main::CreateTeamMessage::Builder getCreateTeam();
  inline void setCreateTeam( ::globed::schema::main::CreateTeamMessage::Reader value);
  inline  ::globed::schema::main::CreateTeamMessage::Builder initCreateTeam();
  inline void adoptCreateTeam(::capnp::Orphan< ::globed::schema::main::CreateTeamMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::CreateTeamMessage> disownCreateTeam();

  inline bool isDeleteTeam();
  inline bool hasDeleteTeam();
  inline  ::globed::schema::main::DeleteTeamMessage::Builder getDeleteTeam();
  inline void setDeleteTeam( ::globed::schema::main::DeleteTeamMessage::Reader value);
  inline  ::globed::schema::main::DeleteTeamMessage::Builder initDeleteTeam();
  inline void adoptDeleteTeam(::capnp::Orphan< ::globed::schema::main::DeleteTeamMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::DeleteTeamMessage> disownDeleteTeam();

  inline bool isWarn();
  inline bool hasWarn();
  inline  ::globed::schema::main::WarnMessage::Builder getWarn();
  inline void setWarn( ::globed::schema::main::WarnMessage::Reader value);
  inline  ::globed::schema::main::WarnMessage::Builder initWarn();
  inline void adoptWarn(::capnp::Orphan< ::globed::schema::main::WarnMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::WarnMessage> disownWarn();

  inline bool isTeamCreationResult();
  inline bool hasTeamCreationResult();
  inline  ::globed::schema::main::TeamCreationResultMessage::Builder getTeamCreationResult();
  inline void setTeamCreationResult( ::globed::schema::main::TeamCreationResultMessage::Reader value);
  inline  ::globed::schema::main::TeamCreationResultMessage::Builder initTeamCreationResult();
  inline void adoptTeamCreationResult(::capnp::Orphan< ::globed::schema::main::TeamCreationResultMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::TeamCreationResultMessage> disownTeamCreationResult();

  inline bool isTeamChanged();
  inline bool hasTeamChanged();
  inline  ::globed::schema::main::TeamChangedMessage::Builder getTeamChanged();
  inline void setTeamChanged( ::globed::schema::main::TeamChangedMessage::Reader value);
  inline  ::globed::schema::main::TeamChangedMessage::Builder initTeamChanged();
  inline void adoptTeamChanged(::capnp::Orphan< ::globed::schema::main::TeamChangedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::TeamChangedMessage> disownTeamChanged();

  inline bool isGetTeamMembers();
  inline bool hasGetTeamMembers();
  inline  ::globed::schema::main::GetTeamMembersMessage::Builder getGetTeamMembers();
  inline void setGetTeamMembers( ::globed::schema::main::GetTeamMembersMessage::Reader value);
  inline  ::globed::schema::main::GetTeamMembersMessage::Builder initGetTeamMembers();
  inline void adoptGetTeamMembers(::capnp::Orphan< ::globed::schema::main::GetTeamMembersMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::GetTeamMembersMessage> disownGetTeamMembers();

  inline bool isTeamMembers();
  inline bool hasTeamMembers();
  inline  ::globed::schema::main::TeamMembersMessage::Builder getTeamMembers();
  inline void setTeamMembers( ::globed::schema::main::TeamMembersMessage::Reader value);
  inline  ::globed::schema::main::TeamMembersMessage::Builder initTeamMembers();
  inline void adoptTeamMembers(::capnp::Orphan< ::globed::schema::main::TeamMembersMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::TeamMembersMessage> disownTeamMembers();

  inline bool isUpdateTeam();
  inline bool hasUpdateTeam();
  inline  ::globed::schema::main::UpdateTeamMessage::Builder getUpdateTeam();
  inline void setUpdateTeam( ::globed::schema::main::UpdateTeamMessage::Reader value);
  inline  ::globed::schema::main::UpdateTeamMessage::Builder initUpdateTeam();
  inline void adoptUpdateTeam(::capnp::Orphan< ::globed::schema::main::UpdateTeamMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::UpdateTeamMessage> disownUpdateTeam();

  inline bool isTeamsUpdated();
  inline bool hasTeamsUpdated();
  inline  ::globed::schema::main::TeamsUpdatedMessage::Builder getTeamsUpdated();
  inline void setTeamsUpdated( ::globed::schema::main::TeamsUpdatedMessage::Reader value);
  inline  ::globed::schema::main::TeamsUpdatedMessage::Builder initTeamsUpdated();
  inline void adoptTeamsUpdated(::capnp::Orphan< ::globed::schema::main::TeamsUpdatedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::TeamsUpdatedMessage> disownTeamsUpdated();

  inline bool isAdminFetchMods();
  inline bool hasAdminFetchMods();
  inline  ::globed::schema::main::AdminFetchModsMessage::Builder getAdminFetchMods();
  inline void setAdminFetchMods( ::globed::schema::main::AdminFetchModsMessage::Reader value);
  inline  ::globed::schema::main::AdminFetchModsMessage::Builder initAdminFetchMods();
  inline void adoptAdminFetchMods(::capnp::Orphan< ::globed::schema::main::AdminFetchModsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminFetchModsMessage> disownAdminFetchMods();

  inline bool isAdminFetchModsResponse();
  inline bool hasAdminFetchModsResponse();
  inline  ::globed::schema::main::AdminFetchModsResponseMessage::Builder getAdminFetchModsResponse();
  inline void setAdminFetchModsResponse( ::globed::schema::main::AdminFetchModsResponseMessage::Reader value);
  inline  ::globed::schema::main::AdminFetchModsResponseMessage::Builder initAdminFetchModsResponse();
  inline void adoptAdminFetchModsResponse(::capnp::Orphan< ::globed::schema::main::AdminFetchModsResponseMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::AdminFetchModsResponseMessage> disownAdminFetchModsResponse();

  inline bool isServersChanged();
  inline bool hasServersChanged();
  inline  ::globed::schema::main::ServersChangedMessage::Builder getServersChanged();
  inline void setServersChanged( ::globed::schema::main::ServersChangedMessage::Reader value);
  inline  ::globed::schema::main::ServersChangedMessage::Builder initServersChanged();
  inline void adoptServersChanged(::capnp::Orphan< ::globed::schema::main::ServersChangedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::ServersChangedMessage> disownServersChanged();

  inline bool isRoomOwnerAction();
  inline bool hasRoomOwnerAction();
  inline  ::globed::schema::main::RoomOwnerActionMessage::Builder getRoomOwnerAction();
  inline void setRoomOwnerAction( ::globed::schema::main::RoomOwnerActionMessage::Reader value);
  inline  ::globed::schema::main::RoomOwnerActionMessage::Builder initRoomOwnerAction();
  inline void adoptRoomOwnerAction(::capnp::Orphan< ::globed::schema::main::RoomOwnerActionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::main::RoomOwnerActionMessage> disownRoomOwnerAction();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t PlayerAccountData::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerAccountData::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerAccountData::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t PlayerAccountData::Reader::getUserId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerAccountData::Builder::getUserId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerAccountData::Builder::setUserId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerAccountData::Reader::hasUsername() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerAccountData::Builder::hasUsername() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlayerAccountData::Reader::getUsername() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlayerAccountData::Builder::getUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerAccountData::Builder::setUsername( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlayerAccountData::Builder::initUsername(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerAccountData::Builder::adoptUsername(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlayerAccountData::Builder::disownUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LoginUTokenMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginUTokenMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginUTokenMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginUTokenMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginUTokenMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginUTokenMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginUTokenMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginUTokenMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader LoginUTokenMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginUTokenMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline LoginUTokenMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LoginUTokenMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginUTokenMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginUTokenMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> LoginUTokenMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LoginUTokenMessage::Reader::hasUident() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenMessage::Builder::hasUident() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LoginUTokenMessage::Reader::getUident() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LoginUTokenMessage::Builder::getUident() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LoginUTokenMessage::Builder::setUident( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LoginUTokenMessage::Builder::initUident(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LoginUTokenMessage::Builder::adoptUident(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LoginUTokenMessage::Builder::disownUident() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t LoginArgonMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginArgonMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginArgonMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginArgonMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginArgonMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginArgonMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginArgonMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginArgonMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginArgonMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginArgonMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginArgonMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginArgonMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginArgonMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader LoginArgonMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginArgonMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline LoginArgonMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LoginArgonMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginArgonMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginArgonMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> LoginArgonMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LoginArgonMessage::Reader::hasUident() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LoginArgonMessage::Builder::hasUident() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LoginArgonMessage::Reader::getUident() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LoginArgonMessage::Builder::getUident() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LoginArgonMessage::Builder::setUident( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LoginArgonMessage::Builder::initUident(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LoginArgonMessage::Builder::adoptUident(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LoginArgonMessage::Builder::disownUident() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LoginPlainMessage::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginPlainMessage::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerAccountData::Reader LoginPlainMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerAccountData::Builder LoginPlainMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::PlayerAccountData::Pipeline LoginPlainMessage::Pipeline::getData() {
  return  ::globed::schema::main::PlayerAccountData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void LoginPlainMessage::Builder::setData( ::globed::schema::main::PlayerAccountData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerAccountData::Builder LoginPlainMessage::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginPlainMessage::Builder::adoptData(
    ::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> LoginPlainMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginPlainMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginPlainMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader LoginPlainMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginPlainMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline LoginPlainMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LoginPlainMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginPlainMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginPlainMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> LoginPlainMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasNewToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasNewToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginOkMessage::Reader::getNewToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginOkMessage::Builder::getNewToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setNewToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginOkMessage::Builder::initNewToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptNewToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginOkMessage::Builder::disownNewToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasServers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasServers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader LoginOkMessage::Reader::getServers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::getServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::initServers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptServers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> LoginOkMessage::Builder::disownServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasAllRoles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasAllRoles() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Reader LoginOkMessage::Reader::getAllRoles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::getAllRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setAllRoles( ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>::Builder LoginOkMessage::Builder::initAllRoles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptAllRoles(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>> LoginOkMessage::Builder::disownAllRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::UserRole,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::hasUserRoles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool LoginOkMessage::Builder::hasUserRoles() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader LoginOkMessage::Reader::getUserRoles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LoginOkMessage::Builder::getUserRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void LoginOkMessage::Builder::setUserRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void LoginOkMessage::Builder::setUserRoles(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder LoginOkMessage::Builder::initUserRoles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void LoginOkMessage::Builder::adoptUserRoles(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> LoginOkMessage::Builder::disownUserRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool LoginOkMessage::Reader::getIsModerator() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LoginOkMessage::Builder::getIsModerator() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginOkMessage::Builder::setIsModerator(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::LoginFailedReason LoginFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::LoginFailedReason LoginFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginFailedMessage::Builder::setReason( ::globed::schema::main::LoginFailedReason value) {
  _builder.setDataField< ::globed::schema::main::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginRequiredMessage::Reader::hasArgonUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginRequiredMessage::Builder::hasArgonUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginRequiredMessage::Reader::getArgonUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginRequiredMessage::Builder::getArgonUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginRequiredMessage::Builder::setArgonUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginRequiredMessage::Builder::initArgonUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginRequiredMessage::Builder::adoptArgonUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginRequiredMessage::Builder::disownArgonUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool BannedMessage::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool BannedMessage::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader BannedMessage::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder BannedMessage::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void BannedMessage::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder BannedMessage::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void BannedMessage::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> BannedMessage::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t BannedMessage::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t BannedMessage::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void BannedMessage::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ServersChangedMessage::Reader::hasServers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ServersChangedMessage::Builder::hasServers() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader ServersChangedMessage::Reader::getServers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder ServersChangedMessage::Builder::getServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ServersChangedMessage::Builder::setServers( ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>::Builder ServersChangedMessage::Builder::initServers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ServersChangedMessage::Builder::adoptServers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>> ServersChangedMessage::Builder::disownServers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::GameServer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UpdateOwnDataMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UpdateOwnDataMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader UpdateOwnDataMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder UpdateOwnDataMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline UpdateOwnDataMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UpdateOwnDataMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder UpdateOwnDataMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UpdateOwnDataMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> UpdateOwnDataMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool UpdateOwnDataMessage::Reader::hasFriendList() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool UpdateOwnDataMessage::Builder::hasFriendList() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader UpdateOwnDataMessage::Reader::getFriendList() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder UpdateOwnDataMessage::Builder::getFriendList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void UpdateOwnDataMessage::Builder::setFriendList( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void UpdateOwnDataMessage::Builder::setFriendList(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder UpdateOwnDataMessage::Builder::initFriendList(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void UpdateOwnDataMessage::Builder::adoptFriendList(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> UpdateOwnDataMessage::Builder::disownFriendList() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RequestPlayerCountsMessage::Reader::hasLevels() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RequestPlayerCountsMessage::Builder::hasLevels() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader RequestPlayerCountsMessage::Reader::getLevels() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RequestPlayerCountsMessage::Builder::getLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RequestPlayerCountsMessage::Builder::setLevels( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RequestPlayerCountsMessage::Builder::setLevels(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder RequestPlayerCountsMessage::Builder::initLevels(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RequestPlayerCountsMessage::Builder::adoptLevels(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> RequestPlayerCountsMessage::Builder::disownLevels() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerCountsMessage::Reader::hasLevelIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerCountsMessage::Builder::hasLevelIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader PlayerCountsMessage::Reader::getLevelIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerCountsMessage::Builder::getLevelIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerCountsMessage::Builder::setLevelIds( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void PlayerCountsMessage::Builder::setLevelIds(::kj::ArrayPtr<const  ::uint64_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerCountsMessage::Builder::initLevelIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerCountsMessage::Builder::adoptLevelIds(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> PlayerCountsMessage::Builder::disownLevelIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerCountsMessage::Reader::hasCounts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerCountsMessage::Builder::hasCounts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader PlayerCountsMessage::Reader::getCounts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerCountsMessage::Builder::getCounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerCountsMessage::Builder::setCounts( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PlayerCountsMessage::Builder::setCounts(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerCountsMessage::Builder::initCounts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlayerCountsMessage::Builder::adoptCounts(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> PlayerCountsMessage::Builder::disownCounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint16_t RoomSettings::Reader::getPlayerLimit() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoomSettings::Builder::getPlayerLimit() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setPlayerLimit( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getFasterReset() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getFasterReset() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setFasterReset(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getHidden() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getHidden() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setHidden(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getPrivateInvites() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getPrivateInvites() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setPrivateInvites(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<18>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getIsFollower() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getIsFollower() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setIsFollower(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getCollision() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getCollision() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setCollision(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getTwoPlayerMode() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getTwoPlayerMode() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setTwoPlayerMode(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getDeathlink() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getDeathlink() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setDeathlink(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<22>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getLevelIntegrity() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getLevelIntegrity() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setLevelIntegrity(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<23>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t RoomSettings::Reader::getServerId() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t RoomSettings::Builder::getServerId() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setServerId( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getTeams() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getTeams() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setTeams(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool RoomSettings::Reader::getLockedTeams() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool RoomSettings::Builder::getLockedTeams() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void RoomSettings::Builder::setLockedTeams(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool CreateRoomMessage::Reader::hasName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool CreateRoomMessage::Builder::hasName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader CreateRoomMessage::Reader::getName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder CreateRoomMessage::Builder::getName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void CreateRoomMessage::Builder::setName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder CreateRoomMessage::Builder::initName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void CreateRoomMessage::Builder::adoptName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> CreateRoomMessage::Builder::disownName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t CreateRoomMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CreateRoomMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CreateRoomMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool CreateRoomMessage::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool CreateRoomMessage::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomSettings::Reader CreateRoomMessage::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomSettings::Builder CreateRoomMessage::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::RoomSettings::Pipeline CreateRoomMessage::Pipeline::getSettings() {
  return  ::globed::schema::main::RoomSettings::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void CreateRoomMessage::Builder::setSettings( ::globed::schema::main::RoomSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomSettings::Builder CreateRoomMessage::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void CreateRoomMessage::Builder::adoptSettings(
    ::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> CreateRoomMessage::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t JoinRoomMessage::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t JoinRoomMessage::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinRoomMessage::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t JoinRoomMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t JoinRoomMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void JoinRoomMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AssignTeamMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AssignTeamMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AssignTeamMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AssignTeamMessage::Reader::getTeamId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AssignTeamMessage::Builder::getTeamId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AssignTeamMessage::Builder::setTeamId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t CreateTeamMessage::Reader::getColor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t CreateTeamMessage::Builder::getColor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void CreateTeamMessage::Builder::setColor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t DeleteTeamMessage::Reader::getTeamId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t DeleteTeamMessage::Builder::getTeamId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void DeleteTeamMessage::Builder::setTeamId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t UpdateTeamMessage::Reader::getTeamId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t UpdateTeamMessage::Builder::getTeamId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UpdateTeamMessage::Builder::setTeamId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t UpdateTeamMessage::Reader::getColor() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t UpdateTeamMessage::Builder::getColor() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UpdateTeamMessage::Builder::setColor( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::RoomOwnerActionType RoomOwnerActionMessage::Reader::getType() const {
  return _reader.getDataField< ::globed::schema::main::RoomOwnerActionType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::RoomOwnerActionType RoomOwnerActionMessage::Builder::getType() {
  return _builder.getDataField< ::globed::schema::main::RoomOwnerActionType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomOwnerActionMessage::Builder::setType( ::globed::schema::main::RoomOwnerActionType value) {
  _builder.setDataField< ::globed::schema::main::RoomOwnerActionType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RoomOwnerActionMessage::Reader::getTarget() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RoomOwnerActionMessage::Builder::getTarget() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoomOwnerActionMessage::Builder::setTarget( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TeamCreationResultMessage::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool TeamCreationResultMessage::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TeamCreationResultMessage::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TeamCreationResultMessage::Reader::getTeamCount() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TeamCreationResultMessage::Builder::getTeamCount() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TeamCreationResultMessage::Builder::setTeamCount( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t TeamChangedMessage::Reader::getTeamId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t TeamChangedMessage::Builder::getTeamId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TeamChangedMessage::Builder::setTeamId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomPlayer::Reader::hasAccountData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomPlayer::Builder::hasAccountData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerAccountData::Reader RoomPlayer::Reader::getAccountData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerAccountData::Builder RoomPlayer::Builder::getAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::PlayerAccountData::Pipeline RoomPlayer::Pipeline::getAccountData() {
  return  ::globed::schema::main::PlayerAccountData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void RoomPlayer::Builder::setAccountData( ::globed::schema::main::PlayerAccountData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerAccountData::Builder RoomPlayer::Builder::initAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomPlayer::Builder::adoptAccountData(
    ::capnp::Orphan< ::globed::schema::main::PlayerAccountData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerAccountData> RoomPlayer::Builder::disownAccountData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerAccountData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t RoomPlayer::Reader::getCube() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int16_t RoomPlayer::Builder::getCube() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setCube( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RoomPlayer::Reader::getColor1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoomPlayer::Builder::getColor1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setColor1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RoomPlayer::Reader::getColor2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoomPlayer::Builder::getColor2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setColor2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RoomPlayer::Reader::getGlowColor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoomPlayer::Builder::getGlowColor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setGlowColor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t RoomPlayer::Reader::getSession() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t RoomPlayer::Builder::getSession() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setSession( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t RoomPlayer::Reader::getTeamId() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t RoomPlayer::Builder::getTeamId() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void RoomPlayer::Builder::setTeamId( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool TeamMembersMessage::Reader::hasMembers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TeamMembersMessage::Builder::hasMembers() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader TeamMembersMessage::Reader::getMembers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamMembersMessage::Builder::getMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TeamMembersMessage::Builder::setMembers( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TeamMembersMessage::Builder::setMembers(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamMembersMessage::Builder::initMembers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TeamMembersMessage::Builder::adoptMembers(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> TeamMembersMessage::Builder::disownMembers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool TeamMembersMessage::Reader::hasTeamIds() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TeamMembersMessage::Builder::hasTeamIds() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader TeamMembersMessage::Reader::getTeamIds() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamMembersMessage::Builder::getTeamIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TeamMembersMessage::Builder::setTeamIds( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void TeamMembersMessage::Builder::setTeamIds(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamMembersMessage::Builder::initTeamIds(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TeamMembersMessage::Builder::adoptTeamIds(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> TeamMembersMessage::Builder::disownTeamIds() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t RoomStateMessage::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RoomStateMessage::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomStateMessage::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t RoomStateMessage::Reader::getRoomOwner() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t RoomStateMessage::Builder::getRoomOwner() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoomStateMessage::Builder::setRoomOwner( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RoomStateMessage::Reader::hasRoomName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasRoomName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoomStateMessage::Reader::getRoomName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoomStateMessage::Builder::getRoomName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::setRoomName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoomStateMessage::Builder::initRoomName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoomStateMessage::Builder::adoptRoomName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoomStateMessage::Builder::disownRoomName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoomStateMessage::Reader::hasPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader RoomStateMessage::Reader::getPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder RoomStateMessage::Builder::getPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::setPlayers( ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>::Builder RoomStateMessage::Builder::initPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoomStateMessage::Builder::adoptPlayers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>> RoomStateMessage::Builder::disownPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomPlayer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RoomStateMessage::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomSettings::Reader RoomStateMessage::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomSettings::Builder RoomStateMessage::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::RoomSettings::Pipeline RoomStateMessage::Pipeline::getSettings() {
  return  ::globed::schema::main::RoomSettings::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoomStateMessage::Builder::setSettings( ::globed::schema::main::RoomSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomSettings::Builder RoomStateMessage::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::adoptSettings(
    ::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> RoomStateMessage::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoomStateMessage::Reader::hasTeams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool RoomStateMessage::Builder::hasTeams() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader RoomStateMessage::Reader::getTeams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder RoomStateMessage::Builder::getTeams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void RoomStateMessage::Builder::setTeams( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline void RoomStateMessage::Builder::setTeams(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder RoomStateMessage::Builder::initTeams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void RoomStateMessage::Builder::adoptTeams(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> RoomStateMessage::Builder::disownTeams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TeamsUpdatedMessage::Reader::hasTeams() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TeamsUpdatedMessage::Builder::hasTeams() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader TeamsUpdatedMessage::Reader::getTeams() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamsUpdatedMessage::Builder::getTeams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TeamsUpdatedMessage::Builder::setTeams( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void TeamsUpdatedMessage::Builder::setTeams(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder TeamsUpdatedMessage::Builder::initTeams(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TeamsUpdatedMessage::Builder::adoptTeams(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> TeamsUpdatedMessage::Builder::disownTeams() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::main::RoomJoinFailedReason RoomJoinFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::RoomJoinFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::RoomJoinFailedReason RoomJoinFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::RoomJoinFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomJoinFailedMessage::Builder::setReason( ::globed::schema::main::RoomJoinFailedReason value) {
  _builder.setDataField< ::globed::schema::main::RoomJoinFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::RoomCreateFailedReason RoomCreateFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::RoomCreateFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::RoomCreateFailedReason RoomCreateFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::RoomCreateFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomCreateFailedMessage::Builder::setReason( ::globed::schema::main::RoomCreateFailedReason value) {
  _builder.setDataField< ::globed::schema::main::RoomCreateFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t RoomListingInfo::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RoomListingInfo::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomListingInfo::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomListingInfo::Reader::hasRoomName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomListingInfo::Builder::hasRoomName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoomListingInfo::Reader::getRoomName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoomListingInfo::Builder::getRoomName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomListingInfo::Builder::setRoomName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoomListingInfo::Builder::initRoomName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoomListingInfo::Builder::adoptRoomName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoomListingInfo::Builder::disownRoomName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RoomListingInfo::Reader::hasRoomOwner() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoomListingInfo::Builder::hasRoomOwner() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomPlayer::Reader RoomListingInfo::Reader::getRoomOwner() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomPlayer::Builder RoomListingInfo::Builder::getRoomOwner() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::RoomPlayer::Pipeline RoomListingInfo::Pipeline::getRoomOwner() {
  return  ::globed::schema::main::RoomPlayer::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RoomListingInfo::Builder::setRoomOwner( ::globed::schema::main::RoomPlayer::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomPlayer::Builder RoomListingInfo::Builder::initRoomOwner() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoomListingInfo::Builder::adoptRoomOwner(
    ::capnp::Orphan< ::globed::schema::main::RoomPlayer>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomPlayer> RoomListingInfo::Builder::disownRoomOwner() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomPlayer>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t RoomListingInfo::Reader::getPlayerCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RoomListingInfo::Builder::getPlayerCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoomListingInfo::Builder::setPlayerCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RoomListingInfo::Reader::getHasPassword() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool RoomListingInfo::Builder::getHasPassword() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void RoomListingInfo::Builder::setHasPassword(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool RoomListingInfo::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RoomListingInfo::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomSettings::Reader RoomListingInfo::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomSettings::Builder RoomListingInfo::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::RoomSettings::Pipeline RoomListingInfo::Pipeline::getSettings() {
  return  ::globed::schema::main::RoomSettings::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RoomListingInfo::Builder::setSettings( ::globed::schema::main::RoomSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomSettings::Builder RoomListingInfo::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RoomListingInfo::Builder::adoptSettings(
    ::capnp::Orphan< ::globed::schema::main::RoomSettings>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomSettings> RoomListingInfo::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool RoomBannedMessage::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomBannedMessage::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RoomBannedMessage::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RoomBannedMessage::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomBannedMessage::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RoomBannedMessage::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoomBannedMessage::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RoomBannedMessage::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t RoomBannedMessage::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int64_t RoomBannedMessage::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoomBannedMessage::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RoomListMessage::Reader::hasRooms() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoomListMessage::Builder::hasRooms() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Reader RoomListMessage::Reader::getRooms() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Builder RoomListMessage::Builder::getRooms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoomListMessage::Builder::setRooms( ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>::Builder RoomListMessage::Builder::initRooms(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoomListMessage::Builder::adoptRooms(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>> RoomListMessage::Builder::disownRooms() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::RoomListingInfo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t JoinSessionMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::JoinSessionFailedReason JoinFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::JoinSessionFailedReason JoinFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinFailedMessage::Builder::setReason( ::globed::schema::main::JoinSessionFailedReason value) {
  _builder.setDataField< ::globed::schema::main::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t WarpPlayerMessage::Reader::getSession() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t WarpPlayerMessage::Builder::getSession() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void WarpPlayerMessage::Builder::setSession( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::main::KickReason KickedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::main::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::main::KickReason KickedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::main::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KickedMessage::Builder::setReason( ::globed::schema::main::KickReason value) {
  _builder.setDataField< ::globed::schema::main::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool KickedMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KickedMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KickedMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KickedMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KickedMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KickedMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KickedMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KickedMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t NoticeMessage::Reader::getSenderId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t NoticeMessage::Builder::getSenderId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NoticeMessage::Builder::setSenderId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NoticeMessage::Reader::hasSenderName() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NoticeMessage::Builder::hasSenderName() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NoticeMessage::Reader::getSenderName() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NoticeMessage::Builder::getSenderName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NoticeMessage::Builder::setSenderName( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NoticeMessage::Builder::initSenderName(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NoticeMessage::Builder::adoptSenderName(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NoticeMessage::Builder::disownSenderName() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool NoticeMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool NoticeMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NoticeMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NoticeMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void NoticeMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NoticeMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void NoticeMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NoticeMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool NoticeMessage::Reader::getCanReply() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool NoticeMessage::Builder::getCanReply() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void NoticeMessage::Builder::setCanReply(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool WarnMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool WarnMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader WarnMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder WarnMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void WarnMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder WarnMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void WarnMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> WarnMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminLoginMessage::Reader::hasPassword() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminLoginMessage::Builder::hasPassword() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminLoginMessage::Reader::getPassword() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminLoginMessage::Builder::getPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminLoginMessage::Builder::setPassword( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminLoginMessage::Builder::initPassword(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminLoginMessage::Builder::adoptPassword(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminLoginMessage::Builder::disownPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AdminKickMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminKickMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminKickMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminKickMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminKickMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminKickMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminKickMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminKickMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminKickMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminKickMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminKickMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminNoticeMessage::Reader::hasTargetUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminNoticeMessage::Builder::hasTargetUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminNoticeMessage::Reader::getTargetUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminNoticeMessage::Builder::getTargetUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminNoticeMessage::Builder::setTargetUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminNoticeMessage::Builder::initTargetUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminNoticeMessage::Builder::adoptTargetUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminNoticeMessage::Builder::disownTargetUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminNoticeMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdminNoticeMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminNoticeMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminNoticeMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdminNoticeMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminNoticeMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AdminNoticeMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminNoticeMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint32_t AdminNoticeMessage::Reader::getRoomId() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdminNoticeMessage::Builder::getRoomId() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminNoticeMessage::Builder::setRoomId( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminNoticeMessage::Reader::getLevelId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminNoticeMessage::Builder::getLevelId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdminNoticeMessage::Builder::setLevelId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AdminNoticeMessage::Reader::getCanReply() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool AdminNoticeMessage::Builder::getCanReply() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void AdminNoticeMessage::Builder::setCanReply(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline bool AdminNoticeMessage::Reader::getShowSender() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool AdminNoticeMessage::Builder::getShowSender() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void AdminNoticeMessage::Builder::setShowSender(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline bool AdminNoticeEveryoneMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminNoticeEveryoneMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminNoticeEveryoneMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminNoticeEveryoneMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminNoticeEveryoneMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminNoticeEveryoneMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminNoticeEveryoneMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminNoticeEveryoneMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminFetchUserMessage::Reader::hasQuery() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchUserMessage::Builder::hasQuery() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminFetchUserMessage::Reader::getQuery() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminFetchUserMessage::Builder::getQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminFetchUserMessage::Builder::setQuery( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminFetchUserMessage::Builder::initQuery(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminFetchUserMessage::Builder::adoptQuery(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminFetchUserMessage::Builder::disownQuery() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t UserPunishment::Reader::getIssuedBy() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t UserPunishment::Builder::getIssuedBy() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void UserPunishment::Builder::setIssuedBy( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t UserPunishment::Reader::getIssuedAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UserPunishment::Builder::getIssuedAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void UserPunishment::Builder::setIssuedAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool UserPunishment::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UserPunishment::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader UserPunishment::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder UserPunishment::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UserPunishment::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder UserPunishment::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void UserPunishment::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> UserPunishment::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t UserPunishment::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t UserPunishment::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void UserPunishment::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminFetchResponseMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminFetchResponseMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminFetchResponseMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminFetchResponseMessage::Reader::getFound() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}

inline bool AdminFetchResponseMessage::Builder::getFound() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS);
}
inline void AdminFetchResponseMessage::Builder::setFound(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<32>() * ::capnp::ELEMENTS, value);
}

inline bool AdminFetchResponseMessage::Reader::getWhitelisted() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}

inline bool AdminFetchResponseMessage::Builder::getWhitelisted() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS);
}
inline void AdminFetchResponseMessage::Builder::setWhitelisted(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<33>() * ::capnp::ELEMENTS, value);
}

inline bool AdminFetchResponseMessage::Reader::hasRoles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchResponseMessage::Builder::hasRoles() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader AdminFetchResponseMessage::Reader::getRoles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdminFetchResponseMessage::Builder::getRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminFetchResponseMessage::Builder::setRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void AdminFetchResponseMessage::Builder::setRoles(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdminFetchResponseMessage::Builder::initRoles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminFetchResponseMessage::Builder::adoptRoles(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> AdminFetchResponseMessage::Builder::disownRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminFetchResponseMessage::Reader::hasActiveBan() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchResponseMessage::Builder::hasActiveBan() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UserPunishment::Reader AdminFetchResponseMessage::Reader::getActiveBan() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::getActiveBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::UserPunishment::Pipeline AdminFetchResponseMessage::Pipeline::getActiveBan() {
  return  ::globed::schema::main::UserPunishment::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void AdminFetchResponseMessage::Builder::setActiveBan( ::globed::schema::main::UserPunishment::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::initActiveBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdminFetchResponseMessage::Builder::adoptActiveBan(
    ::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> AdminFetchResponseMessage::Builder::disownActiveBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AdminFetchResponseMessage::Reader::hasActiveRoomBan() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchResponseMessage::Builder::hasActiveRoomBan() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UserPunishment::Reader AdminFetchResponseMessage::Reader::getActiveRoomBan() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::getActiveRoomBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::UserPunishment::Pipeline AdminFetchResponseMessage::Pipeline::getActiveRoomBan() {
  return  ::globed::schema::main::UserPunishment::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void AdminFetchResponseMessage::Builder::setActiveRoomBan( ::globed::schema::main::UserPunishment::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::initActiveRoomBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void AdminFetchResponseMessage::Builder::adoptActiveRoomBan(
    ::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> AdminFetchResponseMessage::Builder::disownActiveRoomBan() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool AdminFetchResponseMessage::Reader::hasActiveMute() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchResponseMessage::Builder::hasActiveMute() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UserPunishment::Reader AdminFetchResponseMessage::Reader::getActiveMute() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::getActiveMute() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::main::UserPunishment::Pipeline AdminFetchResponseMessage::Pipeline::getActiveMute() {
  return  ::globed::schema::main::UserPunishment::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void AdminFetchResponseMessage::Builder::setActiveMute( ::globed::schema::main::UserPunishment::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UserPunishment::Builder AdminFetchResponseMessage::Builder::initActiveMute() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void AdminFetchResponseMessage::Builder::adoptActiveMute(
    ::capnp::Orphan< ::globed::schema::main::UserPunishment>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UserPunishment> AdminFetchResponseMessage::Builder::disownActiveMute() {
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UserPunishment>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t AdminFetchResponseMessage::Reader::getPunishmentCount() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdminFetchResponseMessage::Builder::getPunishmentCount() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdminFetchResponseMessage::Builder::setPunishmentCount( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t FetchedMod::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t FetchedMod::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void FetchedMod::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool FetchedMod::Reader::hasUsername() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool FetchedMod::Builder::hasUsername() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader FetchedMod::Reader::getUsername() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder FetchedMod::Builder::getUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void FetchedMod::Builder::setUsername( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder FetchedMod::Builder::initUsername(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void FetchedMod::Builder::adoptUsername(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> FetchedMod::Builder::disownUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t FetchedMod::Reader::getCube() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t FetchedMod::Builder::getCube() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void FetchedMod::Builder::setCube( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t FetchedMod::Reader::getColor1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t FetchedMod::Builder::getColor1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void FetchedMod::Builder::setColor1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t FetchedMod::Reader::getColor2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t FetchedMod::Builder::getColor2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void FetchedMod::Builder::setColor2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t FetchedMod::Reader::getGlowColor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t FetchedMod::Builder::getGlowColor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void FetchedMod::Builder::setGlowColor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AdminFetchModsResponseMessage::Reader::hasUsers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchModsResponseMessage::Builder::hasUsers() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Reader AdminFetchModsResponseMessage::Reader::getUsers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Builder AdminFetchModsResponseMessage::Builder::getUsers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminFetchModsResponseMessage::Builder::setUsers( ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>::Builder AdminFetchModsResponseMessage::Builder::initUsers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminFetchModsResponseMessage::Builder::adoptUsers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>> AdminFetchModsResponseMessage::Builder::disownUsers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::FetchedMod,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AdminFetchLogsMessage::Reader::getIssuer() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminFetchLogsMessage::Builder::getIssuer() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminFetchLogsMessage::Builder::setIssuer( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminFetchLogsMessage::Reader::getTarget() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminFetchLogsMessage::Builder::getTarget() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdminFetchLogsMessage::Builder::setTarget( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool AdminFetchLogsMessage::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminFetchLogsMessage::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminFetchLogsMessage::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminFetchLogsMessage::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminFetchLogsMessage::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminFetchLogsMessage::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminFetchLogsMessage::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminFetchLogsMessage::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AdminFetchLogsMessage::Reader::getBefore() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AdminFetchLogsMessage::Builder::getBefore() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdminFetchLogsMessage::Builder::setBefore( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AdminFetchLogsMessage::Reader::getAfter() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AdminFetchLogsMessage::Builder::getAfter() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdminFetchLogsMessage::Builder::setAfter( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t AdminFetchLogsMessage::Reader::getPage() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t AdminFetchLogsMessage::Builder::getPage() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void AdminFetchLogsMessage::Builder::setPage( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AuditLog::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AuditLog::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AuditLog::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AuditLog::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AuditLog::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AuditLog::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AuditLog::Reader::getTargetAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AuditLog::Builder::getTargetAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AuditLog::Builder::setTargetAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool AuditLog::Reader::hasType() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AuditLog::Builder::hasType() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AuditLog::Reader::getType() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AuditLog::Builder::getType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AuditLog::Builder::setType( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AuditLog::Builder::initType(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AuditLog::Builder::adoptType(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AuditLog::Builder::disownType() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AuditLog::Reader::getTimestamp() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AuditLog::Builder::getTimestamp() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AuditLog::Builder::setTimestamp( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::int64_t AuditLog::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AuditLog::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AuditLog::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool AuditLog::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AuditLog::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AuditLog::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AuditLog::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AuditLog::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AuditLog::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AuditLog::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AuditLog::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool AdminLogsResponseMessage::Reader::hasLogs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminLogsResponseMessage::Builder::hasLogs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Reader AdminLogsResponseMessage::Reader::getLogs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Builder AdminLogsResponseMessage::Builder::getLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminLogsResponseMessage::Builder::setLogs( ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>::Builder AdminLogsResponseMessage::Builder::initLogs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminLogsResponseMessage::Builder::adoptLogs(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>> AdminLogsResponseMessage::Builder::disownLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::AuditLog,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool AdminLogsResponseMessage::Reader::hasAccounts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool AdminLogsResponseMessage::Builder::hasAccounts() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Reader AdminLogsResponseMessage::Reader::getAccounts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Builder AdminLogsResponseMessage::Builder::getAccounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void AdminLogsResponseMessage::Builder::setAccounts( ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>::Builder AdminLogsResponseMessage::Builder::initAccounts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void AdminLogsResponseMessage::Builder::adoptAccounts(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>> AdminLogsResponseMessage::Builder::disownAccounts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::main::PlayerAccountData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::int32_t AdminBanMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminBanMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminBanMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminBanMessage::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminBanMessage::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminBanMessage::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminBanMessage::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminBanMessage::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminBanMessage::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminBanMessage::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminBanMessage::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AdminBanMessage::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AdminBanMessage::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdminBanMessage::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminUnbanMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminUnbanMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminUnbanMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminRoomBanMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminRoomBanMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminRoomBanMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminRoomBanMessage::Reader::hasReason() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminRoomBanMessage::Builder::hasReason() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminRoomBanMessage::Reader::getReason() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminRoomBanMessage::Builder::getReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminRoomBanMessage::Builder::setReason( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminRoomBanMessage::Builder::initReason(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminRoomBanMessage::Builder::adoptReason(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminRoomBanMessage::Builder::disownReason() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int64_t AdminRoomBanMessage::Reader::getExpiresAt() const {
  return _reader.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int64_t AdminRoomBanMessage::Builder::getExpiresAt() {
  return _builder.getDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void AdminRoomBanMessage::Builder::setExpiresAt( ::int64_t value) {
  _builder.setDataField< ::int64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminRoomUnbanMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminRoomUnbanMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminRoomUnbanMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t AdminEditRolesMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminEditRolesMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminEditRolesMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminEditRolesMessage::Reader::hasRoles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminEditRolesMessage::Builder::hasRoles() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader AdminEditRolesMessage::Reader::getRoles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdminEditRolesMessage::Builder::getRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminEditRolesMessage::Builder::setRoles( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void AdminEditRolesMessage::Builder::setRoles(::kj::ArrayPtr<const  ::uint8_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder AdminEditRolesMessage::Builder::initRoles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminEditRolesMessage::Builder::adoptRoles(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> AdminEditRolesMessage::Builder::disownRoles() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AdminSetPasswordMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminSetPasswordMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminSetPasswordMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminSetPasswordMessage::Reader::hasNewPassword() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminSetPasswordMessage::Builder::hasNewPassword() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminSetPasswordMessage::Reader::getNewPassword() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminSetPasswordMessage::Builder::getNewPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminSetPasswordMessage::Builder::setNewPassword( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminSetPasswordMessage::Builder::initNewPassword(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminSetPasswordMessage::Builder::adoptNewPassword(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminSetPasswordMessage::Builder::disownNewPassword() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t AdminUpdateUserMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t AdminUpdateUserMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminUpdateUserMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminUpdateUserMessage::Reader::hasUsername() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminUpdateUserMessage::Builder::hasUsername() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminUpdateUserMessage::Reader::getUsername() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminUpdateUserMessage::Builder::getUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminUpdateUserMessage::Builder::setUsername( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminUpdateUserMessage::Builder::initUsername(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminUpdateUserMessage::Builder::adoptUsername(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminUpdateUserMessage::Builder::disownUsername() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int16_t AdminUpdateUserMessage::Reader::getCube() const {
  return _reader.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int16_t AdminUpdateUserMessage::Builder::getCube() {
  return _builder.getDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void AdminUpdateUserMessage::Builder::setCube( ::int16_t value) {
  _builder.setDataField< ::int16_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AdminUpdateUserMessage::Reader::getColor1() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AdminUpdateUserMessage::Builder::getColor1() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void AdminUpdateUserMessage::Builder::setColor1( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AdminUpdateUserMessage::Reader::getColor2() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AdminUpdateUserMessage::Builder::getColor2() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void AdminUpdateUserMessage::Builder::setColor2( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t AdminUpdateUserMessage::Reader::getGlowColor() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t AdminUpdateUserMessage::Builder::getGlowColor() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void AdminUpdateUserMessage::Builder::setGlowColor( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool AdminResultMessage::Reader::getSuccess() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool AdminResultMessage::Builder::getSuccess() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void AdminResultMessage::Builder::setSuccess(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool AdminResultMessage::Reader::hasError() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool AdminResultMessage::Builder::hasError() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader AdminResultMessage::Reader::getError() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder AdminResultMessage::Builder::getError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void AdminResultMessage::Builder::setError( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder AdminResultMessage::Builder::initError(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void AdminResultMessage::Builder::adoptError(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> AdminResultMessage::Builder::disownError() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::main::Message::Which Message::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::globed::schema::main::Message::Which Message::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Message::Reader::isLoginUToken() const {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Builder::isLoginUToken() {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Reader::hasLoginUToken() const {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginUToken() {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginUTokenMessage::Reader Message::Reader::getLoginUToken() const {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginUTokenMessage::Builder Message::Builder::getLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginUToken( ::globed::schema::main::LoginUTokenMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginUTokenMessage::Builder Message::Builder::initLoginUToken() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginUToken(
    ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginUTokenMessage> Message::Builder::disownLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginUTokenMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginArgon() const {
  return which() == Message::LOGIN_ARGON;
}
inline bool Message::Builder::isLoginArgon() {
  return which() == Message::LOGIN_ARGON;
}
inline bool Message::Reader::hasLoginArgon() const {
  if (which() != Message::LOGIN_ARGON) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginArgon() {
  if (which() != Message::LOGIN_ARGON) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginArgonMessage::Reader Message::Reader::getLoginArgon() const {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginArgonMessage::Builder Message::Builder::getLoginArgon() {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginArgon( ::globed::schema::main::LoginArgonMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginArgonMessage::Builder Message::Builder::initLoginArgon() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginArgon(
    ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_ARGON);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginArgonMessage> Message::Builder::disownLoginArgon() {
  KJ_IREQUIRE((which() == Message::LOGIN_ARGON),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginArgonMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginPlain() const {
  return which() == Message::LOGIN_PLAIN;
}
inline bool Message::Builder::isLoginPlain() {
  return which() == Message::LOGIN_PLAIN;
}
inline bool Message::Reader::hasLoginPlain() const {
  if (which() != Message::LOGIN_PLAIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginPlain() {
  if (which() != Message::LOGIN_PLAIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginPlainMessage::Reader Message::Reader::getLoginPlain() const {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginPlainMessage::Builder Message::Builder::getLoginPlain() {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginPlain( ::globed::schema::main::LoginPlainMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginPlainMessage::Builder Message::Builder::initLoginPlain() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginPlain(
    ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_PLAIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginPlainMessage> Message::Builder::disownLoginPlain() {
  KJ_IREQUIRE((which() == Message::LOGIN_PLAIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginPlainMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginOk() const {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Builder::isLoginOk() {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Reader::hasLoginOk() const {
  if (which() != Message::LOGIN_OK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginOk() {
  if (which() != Message::LOGIN_OK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginOkMessage::Reader Message::Reader::getLoginOk() const {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginOkMessage::Builder Message::Builder::getLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginOk( ::globed::schema::main::LoginOkMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginOkMessage::Builder Message::Builder::initLoginOk() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginOk(
    ::capnp::Orphan< ::globed::schema::main::LoginOkMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginOkMessage> Message::Builder::disownLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginOkMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginFailed() const {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Builder::isLoginFailed() {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Reader::hasLoginFailed() const {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginFailed() {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginFailedMessage::Reader Message::Reader::getLoginFailed() const {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginFailedMessage::Builder Message::Builder::getLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginFailed( ::globed::schema::main::LoginFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginFailedMessage::Builder Message::Builder::initLoginFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginFailed(
    ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginFailedMessage> Message::Builder::disownLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginRequired() const {
  return which() == Message::LOGIN_REQUIRED;
}
inline bool Message::Builder::isLoginRequired() {
  return which() == Message::LOGIN_REQUIRED;
}
inline bool Message::Reader::hasLoginRequired() const {
  if (which() != Message::LOGIN_REQUIRED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginRequired() {
  if (which() != Message::LOGIN_REQUIRED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LoginRequiredMessage::Reader Message::Reader::getLoginRequired() const {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LoginRequiredMessage::Builder Message::Builder::getLoginRequired() {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginRequired( ::globed::schema::main::LoginRequiredMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LoginRequiredMessage::Builder Message::Builder::initLoginRequired() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginRequired(
    ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_REQUIRED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LoginRequiredMessage> Message::Builder::disownLoginRequired() {
  KJ_IREQUIRE((which() == Message::LOGIN_REQUIRED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LoginRequiredMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isUpdateOwnData() const {
  return which() == Message::UPDATE_OWN_DATA;
}
inline bool Message::Builder::isUpdateOwnData() {
  return which() == Message::UPDATE_OWN_DATA;
}
inline bool Message::Reader::hasUpdateOwnData() const {
  if (which() != Message::UPDATE_OWN_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasUpdateOwnData() {
  if (which() != Message::UPDATE_OWN_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Reader Message::Reader::getUpdateOwnData() const {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Builder Message::Builder::getUpdateOwnData() {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setUpdateOwnData( ::globed::schema::main::UpdateOwnDataMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UpdateOwnDataMessage::Builder Message::Builder::initUpdateOwnData() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptUpdateOwnData(
    ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_OWN_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UpdateOwnDataMessage> Message::Builder::disownUpdateOwnData() {
  KJ_IREQUIRE((which() == Message::UPDATE_OWN_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateOwnDataMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isCreateRoom() const {
  return which() == Message::CREATE_ROOM;
}
inline bool Message::Builder::isCreateRoom() {
  return which() == Message::CREATE_ROOM;
}
inline bool Message::Reader::hasCreateRoom() const {
  if (which() != Message::CREATE_ROOM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasCreateRoom() {
  if (which() != Message::CREATE_ROOM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::CreateRoomMessage::Reader Message::Reader::getCreateRoom() const {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::CreateRoomMessage::Builder Message::Builder::getCreateRoom() {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setCreateRoom( ::globed::schema::main::CreateRoomMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::CreateRoomMessage::Builder Message::Builder::initCreateRoom() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptCreateRoom(
    ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::CreateRoomMessage> Message::Builder::disownCreateRoom() {
  KJ_IREQUIRE((which() == Message::CREATE_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateRoomMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinRoom() const {
  return which() == Message::JOIN_ROOM;
}
inline bool Message::Builder::isJoinRoom() {
  return which() == Message::JOIN_ROOM;
}
inline bool Message::Reader::hasJoinRoom() const {
  if (which() != Message::JOIN_ROOM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinRoom() {
  if (which() != Message::JOIN_ROOM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinRoomMessage::Reader Message::Reader::getJoinRoom() const {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinRoomMessage::Builder Message::Builder::getJoinRoom() {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinRoom( ::globed::schema::main::JoinRoomMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinRoomMessage::Builder Message::Builder::initJoinRoom() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinRoom(
    ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_ROOM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinRoomMessage> Message::Builder::disownJoinRoom() {
  KJ_IREQUIRE((which() == Message::JOIN_ROOM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinRoomMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveRoom() const {
  return which() == Message::LEAVE_ROOM;
}
inline bool Message::Builder::isLeaveRoom() {
  return which() == Message::LEAVE_ROOM;
}
inline  ::capnp::Void Message::Reader::getLeaveRoom() const {
  KJ_IREQUIRE((which() == Message::LEAVE_ROOM),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Message::Builder::getLeaveRoom() {
  KJ_IREQUIRE((which() == Message::LEAVE_ROOM),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Message::Builder::setLeaveRoom( ::capnp::Void value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_ROOM);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Message::Reader::isWarpPlayer() const {
  return which() == Message::WARP_PLAYER;
}
inline bool Message::Builder::isWarpPlayer() {
  return which() == Message::WARP_PLAYER;
}
inline bool Message::Reader::hasWarpPlayer() const {
  if (which() != Message::WARP_PLAYER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasWarpPlayer() {
  if (which() != Message::WARP_PLAYER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::WarpPlayerMessage::Reader Message::Reader::getWarpPlayer() const {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::WarpPlayerMessage::Builder Message::Builder::getWarpPlayer() {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setWarpPlayer( ::globed::schema::main::WarpPlayerMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::WarpPlayerMessage::Builder Message::Builder::initWarpPlayer() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptWarpPlayer(
    ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARP_PLAYER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::WarpPlayerMessage> Message::Builder::disownWarpPlayer() {
  KJ_IREQUIRE((which() == Message::WARP_PLAYER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarpPlayerMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomState() const {
  return which() == Message::ROOM_STATE;
}
inline bool Message::Builder::isRoomState() {
  return which() == Message::ROOM_STATE;
}
inline bool Message::Reader::hasRoomState() const {
  if (which() != Message::ROOM_STATE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomState() {
  if (which() != Message::ROOM_STATE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomStateMessage::Reader Message::Reader::getRoomState() const {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomStateMessage::Builder Message::Builder::getRoomState() {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomState( ::globed::schema::main::RoomStateMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomStateMessage::Builder Message::Builder::initRoomState() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomState(
    ::capnp::Orphan< ::globed::schema::main::RoomStateMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_STATE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomStateMessage> Message::Builder::disownRoomState() {
  KJ_IREQUIRE((which() == Message::ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomStateMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSession() const {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Builder::isJoinSession() {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Reader::hasJoinSession() const {
  if (which() != Message::JOIN_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSession() {
  if (which() != Message::JOIN_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinSessionMessage::Reader Message::Reader::getJoinSession() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinSessionMessage::Builder Message::Builder::getJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSession( ::globed::schema::main::JoinSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinSessionMessage::Builder Message::Builder::initJoinSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSession(
    ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinSessionMessage> Message::Builder::disownJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveSession() const {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Builder::isLeaveSession() {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Reader::hasLeaveSession() const {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLeaveSession() {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::LeaveSessionMessage::Reader Message::Reader::getLeaveSession() const {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::LeaveSessionMessage::Builder Message::Builder::getLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLeaveSession( ::globed::schema::main::LeaveSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::LeaveSessionMessage::Builder Message::Builder::initLeaveSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLeaveSession(
    ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::LeaveSessionMessage> Message::Builder::disownLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::LeaveSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinFailed() const {
  return which() == Message::JOIN_FAILED;
}
inline bool Message::Builder::isJoinFailed() {
  return which() == Message::JOIN_FAILED;
}
inline bool Message::Reader::hasJoinFailed() const {
  if (which() != Message::JOIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinFailed() {
  if (which() != Message::JOIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::JoinFailedMessage::Reader Message::Reader::getJoinFailed() const {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::JoinFailedMessage::Builder Message::Builder::getJoinFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinFailed( ::globed::schema::main::JoinFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::JoinFailedMessage::Builder Message::Builder::initJoinFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinFailed(
    ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::JoinFailedMessage> Message::Builder::disownJoinFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::JoinFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isKicked() const {
  return which() == Message::KICKED;
}
inline bool Message::Builder::isKicked() {
  return which() == Message::KICKED;
}
inline bool Message::Reader::hasKicked() const {
  if (which() != Message::KICKED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasKicked() {
  if (which() != Message::KICKED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::KickedMessage::Reader Message::Reader::getKicked() const {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::KickedMessage::Builder Message::Builder::getKicked() {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setKicked( ::globed::schema::main::KickedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::KickedMessage::Builder Message::Builder::initKicked() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptKicked(
    ::capnp::Orphan< ::globed::schema::main::KickedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::KickedMessage> Message::Builder::disownKicked() {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::KickedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isCheckRoomState() const {
  return which() == Message::CHECK_ROOM_STATE;
}
inline bool Message::Builder::isCheckRoomState() {
  return which() == Message::CHECK_ROOM_STATE;
}
inline  ::capnp::Void Message::Reader::getCheckRoomState() const {
  KJ_IREQUIRE((which() == Message::CHECK_ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Message::Builder::getCheckRoomState() {
  KJ_IREQUIRE((which() == Message::CHECK_ROOM_STATE),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Message::Builder::setCheckRoomState( ::capnp::Void value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CHECK_ROOM_STATE);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Message::Reader::isRequestPlayerCounts() const {
  return which() == Message::REQUEST_PLAYER_COUNTS;
}
inline bool Message::Builder::isRequestPlayerCounts() {
  return which() == Message::REQUEST_PLAYER_COUNTS;
}
inline bool Message::Reader::hasRequestPlayerCounts() const {
  if (which() != Message::REQUEST_PLAYER_COUNTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRequestPlayerCounts() {
  if (which() != Message::REQUEST_PLAYER_COUNTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RequestPlayerCountsMessage::Reader Message::Reader::getRequestPlayerCounts() const {
  KJ_IREQUIRE((which() == Message::REQUEST_PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RequestPlayerCountsMessage::Builder Message::Builder::getRequestPlayerCounts() {
  KJ_IREQUIRE((which() == Message::REQUEST_PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRequestPlayerCounts( ::globed::schema::main::RequestPlayerCountsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_PLAYER_COUNTS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RequestPlayerCountsMessage::Builder Message::Builder::initRequestPlayerCounts() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_PLAYER_COUNTS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRequestPlayerCounts(
    ::capnp::Orphan< ::globed::schema::main::RequestPlayerCountsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_PLAYER_COUNTS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RequestPlayerCountsMessage> Message::Builder::disownRequestPlayerCounts() {
  KJ_IREQUIRE((which() == Message::REQUEST_PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestPlayerCountsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isPlayerCounts() const {
  return which() == Message::PLAYER_COUNTS;
}
inline bool Message::Builder::isPlayerCounts() {
  return which() == Message::PLAYER_COUNTS;
}
inline bool Message::Reader::hasPlayerCounts() const {
  if (which() != Message::PLAYER_COUNTS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasPlayerCounts() {
  if (which() != Message::PLAYER_COUNTS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::PlayerCountsMessage::Reader Message::Reader::getPlayerCounts() const {
  KJ_IREQUIRE((which() == Message::PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::PlayerCountsMessage::Builder Message::Builder::getPlayerCounts() {
  KJ_IREQUIRE((which() == Message::PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setPlayerCounts( ::globed::schema::main::PlayerCountsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_COUNTS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::PlayerCountsMessage::Builder Message::Builder::initPlayerCounts() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_COUNTS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptPlayerCounts(
    ::capnp::Orphan< ::globed::schema::main::PlayerCountsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_COUNTS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::PlayerCountsMessage> Message::Builder::disownPlayerCounts() {
  KJ_IREQUIRE((which() == Message::PLAYER_COUNTS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::PlayerCountsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomJoinFailed() const {
  return which() == Message::ROOM_JOIN_FAILED;
}
inline bool Message::Builder::isRoomJoinFailed() {
  return which() == Message::ROOM_JOIN_FAILED;
}
inline bool Message::Reader::hasRoomJoinFailed() const {
  if (which() != Message::ROOM_JOIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomJoinFailed() {
  if (which() != Message::ROOM_JOIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomJoinFailedMessage::Reader Message::Reader::getRoomJoinFailed() const {
  KJ_IREQUIRE((which() == Message::ROOM_JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomJoinFailedMessage::Builder Message::Builder::getRoomJoinFailed() {
  KJ_IREQUIRE((which() == Message::ROOM_JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomJoinFailed( ::globed::schema::main::RoomJoinFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomJoinFailedMessage::Builder Message::Builder::initRoomJoinFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_JOIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomJoinFailed(
    ::capnp::Orphan< ::globed::schema::main::RoomJoinFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_JOIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomJoinFailedMessage> Message::Builder::disownRoomJoinFailed() {
  KJ_IREQUIRE((which() == Message::ROOM_JOIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomJoinFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomCreateFailed() const {
  return which() == Message::ROOM_CREATE_FAILED;
}
inline bool Message::Builder::isRoomCreateFailed() {
  return which() == Message::ROOM_CREATE_FAILED;
}
inline bool Message::Reader::hasRoomCreateFailed() const {
  if (which() != Message::ROOM_CREATE_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomCreateFailed() {
  if (which() != Message::ROOM_CREATE_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomCreateFailedMessage::Reader Message::Reader::getRoomCreateFailed() const {
  KJ_IREQUIRE((which() == Message::ROOM_CREATE_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomCreateFailedMessage::Builder Message::Builder::getRoomCreateFailed() {
  KJ_IREQUIRE((which() == Message::ROOM_CREATE_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomCreateFailed( ::globed::schema::main::RoomCreateFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_CREATE_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomCreateFailedMessage::Builder Message::Builder::initRoomCreateFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_CREATE_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomCreateFailed(
    ::capnp::Orphan< ::globed::schema::main::RoomCreateFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_CREATE_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomCreateFailedMessage> Message::Builder::disownRoomCreateFailed() {
  KJ_IREQUIRE((which() == Message::ROOM_CREATE_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomCreateFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRequestRoomList() const {
  return which() == Message::REQUEST_ROOM_LIST;
}
inline bool Message::Builder::isRequestRoomList() {
  return which() == Message::REQUEST_ROOM_LIST;
}
inline bool Message::Reader::hasRequestRoomList() const {
  if (which() != Message::REQUEST_ROOM_LIST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRequestRoomList() {
  if (which() != Message::REQUEST_ROOM_LIST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RequestRoomListMessage::Reader Message::Reader::getRequestRoomList() const {
  KJ_IREQUIRE((which() == Message::REQUEST_ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RequestRoomListMessage::Builder Message::Builder::getRequestRoomList() {
  KJ_IREQUIRE((which() == Message::REQUEST_ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRequestRoomList( ::globed::schema::main::RequestRoomListMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_ROOM_LIST);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RequestRoomListMessage::Builder Message::Builder::initRequestRoomList() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_ROOM_LIST);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRequestRoomList(
    ::capnp::Orphan< ::globed::schema::main::RequestRoomListMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::REQUEST_ROOM_LIST);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RequestRoomListMessage> Message::Builder::disownRequestRoomList() {
  KJ_IREQUIRE((which() == Message::REQUEST_ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RequestRoomListMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomList() const {
  return which() == Message::ROOM_LIST;
}
inline bool Message::Builder::isRoomList() {
  return which() == Message::ROOM_LIST;
}
inline bool Message::Reader::hasRoomList() const {
  if (which() != Message::ROOM_LIST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomList() {
  if (which() != Message::ROOM_LIST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomListMessage::Reader Message::Reader::getRoomList() const {
  KJ_IREQUIRE((which() == Message::ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomListMessage::Builder Message::Builder::getRoomList() {
  KJ_IREQUIRE((which() == Message::ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomList( ::globed::schema::main::RoomListMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_LIST);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomListMessage::Builder Message::Builder::initRoomList() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_LIST);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomList(
    ::capnp::Orphan< ::globed::schema::main::RoomListMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_LIST);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomListMessage> Message::Builder::disownRoomList() {
  KJ_IREQUIRE((which() == Message::ROOM_LIST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomListMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isBanned() const {
  return which() == Message::BANNED;
}
inline bool Message::Builder::isBanned() {
  return which() == Message::BANNED;
}
inline bool Message::Reader::hasBanned() const {
  if (which() != Message::BANNED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasBanned() {
  if (which() != Message::BANNED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::BannedMessage::Reader Message::Reader::getBanned() const {
  KJ_IREQUIRE((which() == Message::BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::BannedMessage::Builder Message::Builder::getBanned() {
  KJ_IREQUIRE((which() == Message::BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setBanned( ::globed::schema::main::BannedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::BANNED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::BannedMessage::Builder Message::Builder::initBanned() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::BANNED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptBanned(
    ::capnp::Orphan< ::globed::schema::main::BannedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::BANNED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::BannedMessage> Message::Builder::disownBanned() {
  KJ_IREQUIRE((which() == Message::BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::BannedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomBanned() const {
  return which() == Message::ROOM_BANNED;
}
inline bool Message::Builder::isRoomBanned() {
  return which() == Message::ROOM_BANNED;
}
inline bool Message::Reader::hasRoomBanned() const {
  if (which() != Message::ROOM_BANNED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomBanned() {
  if (which() != Message::ROOM_BANNED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomBannedMessage::Reader Message::Reader::getRoomBanned() const {
  KJ_IREQUIRE((which() == Message::ROOM_BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomBannedMessage::Builder Message::Builder::getRoomBanned() {
  KJ_IREQUIRE((which() == Message::ROOM_BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomBanned( ::globed::schema::main::RoomBannedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_BANNED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomBannedMessage::Builder Message::Builder::initRoomBanned() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_BANNED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomBanned(
    ::capnp::Orphan< ::globed::schema::main::RoomBannedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_BANNED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomBannedMessage> Message::Builder::disownRoomBanned() {
  KJ_IREQUIRE((which() == Message::ROOM_BANNED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomBannedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminLogin() const {
  return which() == Message::ADMIN_LOGIN;
}
inline bool Message::Builder::isAdminLogin() {
  return which() == Message::ADMIN_LOGIN;
}
inline bool Message::Reader::hasAdminLogin() const {
  if (which() != Message::ADMIN_LOGIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminLogin() {
  if (which() != Message::ADMIN_LOGIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminLoginMessage::Reader Message::Reader::getAdminLogin() const {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminLoginMessage::Builder Message::Builder::getAdminLogin() {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminLogin( ::globed::schema::main::AdminLoginMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminLoginMessage::Builder Message::Builder::initAdminLogin() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGIN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminLogin(
    ::capnp::Orphan< ::globed::schema::main::AdminLoginMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGIN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminLoginMessage> Message::Builder::disownAdminLogin() {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLoginMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminKick() const {
  return which() == Message::ADMIN_KICK;
}
inline bool Message::Builder::isAdminKick() {
  return which() == Message::ADMIN_KICK;
}
inline bool Message::Reader::hasAdminKick() const {
  if (which() != Message::ADMIN_KICK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminKick() {
  if (which() != Message::ADMIN_KICK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminKickMessage::Reader Message::Reader::getAdminKick() const {
  KJ_IREQUIRE((which() == Message::ADMIN_KICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminKickMessage::Builder Message::Builder::getAdminKick() {
  KJ_IREQUIRE((which() == Message::ADMIN_KICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminKick( ::globed::schema::main::AdminKickMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_KICK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminKickMessage::Builder Message::Builder::initAdminKick() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_KICK);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminKick(
    ::capnp::Orphan< ::globed::schema::main::AdminKickMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_KICK);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminKickMessage> Message::Builder::disownAdminKick() {
  KJ_IREQUIRE((which() == Message::ADMIN_KICK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminKickMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminNotice() const {
  return which() == Message::ADMIN_NOTICE;
}
inline bool Message::Builder::isAdminNotice() {
  return which() == Message::ADMIN_NOTICE;
}
inline bool Message::Reader::hasAdminNotice() const {
  if (which() != Message::ADMIN_NOTICE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminNotice() {
  if (which() != Message::ADMIN_NOTICE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminNoticeMessage::Reader Message::Reader::getAdminNotice() const {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminNoticeMessage::Builder Message::Builder::getAdminNotice() {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminNotice( ::globed::schema::main::AdminNoticeMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminNoticeMessage::Builder Message::Builder::initAdminNotice() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminNotice(
    ::capnp::Orphan< ::globed::schema::main::AdminNoticeMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminNoticeMessage> Message::Builder::disownAdminNotice() {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminNoticeEveryone() const {
  return which() == Message::ADMIN_NOTICE_EVERYONE;
}
inline bool Message::Builder::isAdminNoticeEveryone() {
  return which() == Message::ADMIN_NOTICE_EVERYONE;
}
inline bool Message::Reader::hasAdminNoticeEveryone() const {
  if (which() != Message::ADMIN_NOTICE_EVERYONE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminNoticeEveryone() {
  if (which() != Message::ADMIN_NOTICE_EVERYONE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Reader Message::Reader::getAdminNoticeEveryone() const {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE_EVERYONE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Builder Message::Builder::getAdminNoticeEveryone() {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE_EVERYONE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminNoticeEveryone( ::globed::schema::main::AdminNoticeEveryoneMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE_EVERYONE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminNoticeEveryoneMessage::Builder Message::Builder::initAdminNoticeEveryone() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE_EVERYONE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminNoticeEveryone(
    ::capnp::Orphan< ::globed::schema::main::AdminNoticeEveryoneMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_NOTICE_EVERYONE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminNoticeEveryoneMessage> Message::Builder::disownAdminNoticeEveryone() {
  KJ_IREQUIRE((which() == Message::ADMIN_NOTICE_EVERYONE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminNoticeEveryoneMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminFetchUser() const {
  return which() == Message::ADMIN_FETCH_USER;
}
inline bool Message::Builder::isAdminFetchUser() {
  return which() == Message::ADMIN_FETCH_USER;
}
inline bool Message::Reader::hasAdminFetchUser() const {
  if (which() != Message::ADMIN_FETCH_USER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminFetchUser() {
  if (which() != Message::ADMIN_FETCH_USER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminFetchUserMessage::Reader Message::Reader::getAdminFetchUser() const {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminFetchUserMessage::Builder Message::Builder::getAdminFetchUser() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminFetchUser( ::globed::schema::main::AdminFetchUserMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_USER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminFetchUserMessage::Builder Message::Builder::initAdminFetchUser() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_USER);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminFetchUser(
    ::capnp::Orphan< ::globed::schema::main::AdminFetchUserMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_USER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminFetchUserMessage> Message::Builder::disownAdminFetchUser() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchUserMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminBan() const {
  return which() == Message::ADMIN_BAN;
}
inline bool Message::Builder::isAdminBan() {
  return which() == Message::ADMIN_BAN;
}
inline bool Message::Reader::hasAdminBan() const {
  if (which() != Message::ADMIN_BAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminBan() {
  if (which() != Message::ADMIN_BAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminBanMessage::Reader Message::Reader::getAdminBan() const {
  KJ_IREQUIRE((which() == Message::ADMIN_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminBanMessage::Builder Message::Builder::getAdminBan() {
  KJ_IREQUIRE((which() == Message::ADMIN_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminBan( ::globed::schema::main::AdminBanMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_BAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminBanMessage::Builder Message::Builder::initAdminBan() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_BAN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminBan(
    ::capnp::Orphan< ::globed::schema::main::AdminBanMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_BAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminBanMessage> Message::Builder::disownAdminBan() {
  KJ_IREQUIRE((which() == Message::ADMIN_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminBanMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminUnban() const {
  return which() == Message::ADMIN_UNBAN;
}
inline bool Message::Builder::isAdminUnban() {
  return which() == Message::ADMIN_UNBAN;
}
inline bool Message::Reader::hasAdminUnban() const {
  if (which() != Message::ADMIN_UNBAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminUnban() {
  if (which() != Message::ADMIN_UNBAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminUnbanMessage::Reader Message::Reader::getAdminUnban() const {
  KJ_IREQUIRE((which() == Message::ADMIN_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminUnbanMessage::Builder Message::Builder::getAdminUnban() {
  KJ_IREQUIRE((which() == Message::ADMIN_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminUnban( ::globed::schema::main::AdminUnbanMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UNBAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminUnbanMessage::Builder Message::Builder::initAdminUnban() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UNBAN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminUnban(
    ::capnp::Orphan< ::globed::schema::main::AdminUnbanMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UNBAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminUnbanMessage> Message::Builder::disownAdminUnban() {
  KJ_IREQUIRE((which() == Message::ADMIN_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUnbanMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminRoomBan() const {
  return which() == Message::ADMIN_ROOM_BAN;
}
inline bool Message::Builder::isAdminRoomBan() {
  return which() == Message::ADMIN_ROOM_BAN;
}
inline bool Message::Reader::hasAdminRoomBan() const {
  if (which() != Message::ADMIN_ROOM_BAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminRoomBan() {
  if (which() != Message::ADMIN_ROOM_BAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminRoomBanMessage::Reader Message::Reader::getAdminRoomBan() const {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminRoomBanMessage::Builder Message::Builder::getAdminRoomBan() {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminRoomBan( ::globed::schema::main::AdminRoomBanMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_BAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminRoomBanMessage::Builder Message::Builder::initAdminRoomBan() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_BAN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminRoomBan(
    ::capnp::Orphan< ::globed::schema::main::AdminRoomBanMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_BAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminRoomBanMessage> Message::Builder::disownAdminRoomBan() {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_BAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomBanMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminRoomUnban() const {
  return which() == Message::ADMIN_ROOM_UNBAN;
}
inline bool Message::Builder::isAdminRoomUnban() {
  return which() == Message::ADMIN_ROOM_UNBAN;
}
inline bool Message::Reader::hasAdminRoomUnban() const {
  if (which() != Message::ADMIN_ROOM_UNBAN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminRoomUnban() {
  if (which() != Message::ADMIN_ROOM_UNBAN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminRoomUnbanMessage::Reader Message::Reader::getAdminRoomUnban() const {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminRoomUnbanMessage::Builder Message::Builder::getAdminRoomUnban() {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminRoomUnban( ::globed::schema::main::AdminRoomUnbanMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_UNBAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminRoomUnbanMessage::Builder Message::Builder::initAdminRoomUnban() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_UNBAN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminRoomUnban(
    ::capnp::Orphan< ::globed::schema::main::AdminRoomUnbanMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_ROOM_UNBAN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminRoomUnbanMessage> Message::Builder::disownAdminRoomUnban() {
  KJ_IREQUIRE((which() == Message::ADMIN_ROOM_UNBAN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminRoomUnbanMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminEditRoles() const {
  return which() == Message::ADMIN_EDIT_ROLES;
}
inline bool Message::Builder::isAdminEditRoles() {
  return which() == Message::ADMIN_EDIT_ROLES;
}
inline bool Message::Reader::hasAdminEditRoles() const {
  if (which() != Message::ADMIN_EDIT_ROLES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminEditRoles() {
  if (which() != Message::ADMIN_EDIT_ROLES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminEditRolesMessage::Reader Message::Reader::getAdminEditRoles() const {
  KJ_IREQUIRE((which() == Message::ADMIN_EDIT_ROLES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminEditRolesMessage::Builder Message::Builder::getAdminEditRoles() {
  KJ_IREQUIRE((which() == Message::ADMIN_EDIT_ROLES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminEditRoles( ::globed::schema::main::AdminEditRolesMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_EDIT_ROLES);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminEditRolesMessage::Builder Message::Builder::initAdminEditRoles() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_EDIT_ROLES);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminEditRoles(
    ::capnp::Orphan< ::globed::schema::main::AdminEditRolesMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_EDIT_ROLES);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminEditRolesMessage> Message::Builder::disownAdminEditRoles() {
  KJ_IREQUIRE((which() == Message::ADMIN_EDIT_ROLES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminEditRolesMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminSetPassword() const {
  return which() == Message::ADMIN_SET_PASSWORD;
}
inline bool Message::Builder::isAdminSetPassword() {
  return which() == Message::ADMIN_SET_PASSWORD;
}
inline bool Message::Reader::hasAdminSetPassword() const {
  if (which() != Message::ADMIN_SET_PASSWORD) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminSetPassword() {
  if (which() != Message::ADMIN_SET_PASSWORD) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminSetPasswordMessage::Reader Message::Reader::getAdminSetPassword() const {
  KJ_IREQUIRE((which() == Message::ADMIN_SET_PASSWORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminSetPasswordMessage::Builder Message::Builder::getAdminSetPassword() {
  KJ_IREQUIRE((which() == Message::ADMIN_SET_PASSWORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminSetPassword( ::globed::schema::main::AdminSetPasswordMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_SET_PASSWORD);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminSetPasswordMessage::Builder Message::Builder::initAdminSetPassword() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_SET_PASSWORD);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminSetPassword(
    ::capnp::Orphan< ::globed::schema::main::AdminSetPasswordMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_SET_PASSWORD);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminSetPasswordMessage> Message::Builder::disownAdminSetPassword() {
  KJ_IREQUIRE((which() == Message::ADMIN_SET_PASSWORD),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminSetPasswordMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminResult() const {
  return which() == Message::ADMIN_RESULT;
}
inline bool Message::Builder::isAdminResult() {
  return which() == Message::ADMIN_RESULT;
}
inline bool Message::Reader::hasAdminResult() const {
  if (which() != Message::ADMIN_RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminResult() {
  if (which() != Message::ADMIN_RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminResultMessage::Reader Message::Reader::getAdminResult() const {
  KJ_IREQUIRE((which() == Message::ADMIN_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminResultMessage::Builder Message::Builder::getAdminResult() {
  KJ_IREQUIRE((which() == Message::ADMIN_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminResult( ::globed::schema::main::AdminResultMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_RESULT);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminResultMessage::Builder Message::Builder::initAdminResult() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_RESULT);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminResult(
    ::capnp::Orphan< ::globed::schema::main::AdminResultMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_RESULT);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminResultMessage> Message::Builder::disownAdminResult() {
  KJ_IREQUIRE((which() == Message::ADMIN_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminResultMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminFetchResponse() const {
  return which() == Message::ADMIN_FETCH_RESPONSE;
}
inline bool Message::Builder::isAdminFetchResponse() {
  return which() == Message::ADMIN_FETCH_RESPONSE;
}
inline bool Message::Reader::hasAdminFetchResponse() const {
  if (which() != Message::ADMIN_FETCH_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminFetchResponse() {
  if (which() != Message::ADMIN_FETCH_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminFetchResponseMessage::Reader Message::Reader::getAdminFetchResponse() const {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminFetchResponseMessage::Builder Message::Builder::getAdminFetchResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminFetchResponse( ::globed::schema::main::AdminFetchResponseMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminFetchResponseMessage::Builder Message::Builder::initAdminFetchResponse() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_RESPONSE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminFetchResponse(
    ::capnp::Orphan< ::globed::schema::main::AdminFetchResponseMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminFetchResponseMessage> Message::Builder::disownAdminFetchResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchResponseMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isNotice() const {
  return which() == Message::NOTICE;
}
inline bool Message::Builder::isNotice() {
  return which() == Message::NOTICE;
}
inline bool Message::Reader::hasNotice() const {
  if (which() != Message::NOTICE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasNotice() {
  if (which() != Message::NOTICE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::NoticeMessage::Reader Message::Reader::getNotice() const {
  KJ_IREQUIRE((which() == Message::NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::NoticeMessage::Builder Message::Builder::getNotice() {
  KJ_IREQUIRE((which() == Message::NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setNotice( ::globed::schema::main::NoticeMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::NOTICE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::NoticeMessage::Builder Message::Builder::initNotice() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::NOTICE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptNotice(
    ::capnp::Orphan< ::globed::schema::main::NoticeMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::NOTICE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::NoticeMessage> Message::Builder::disownNotice() {
  KJ_IREQUIRE((which() == Message::NOTICE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::NoticeMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminUpdateUser() const {
  return which() == Message::ADMIN_UPDATE_USER;
}
inline bool Message::Builder::isAdminUpdateUser() {
  return which() == Message::ADMIN_UPDATE_USER;
}
inline bool Message::Reader::hasAdminUpdateUser() const {
  if (which() != Message::ADMIN_UPDATE_USER) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminUpdateUser() {
  if (which() != Message::ADMIN_UPDATE_USER) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminUpdateUserMessage::Reader Message::Reader::getAdminUpdateUser() const {
  KJ_IREQUIRE((which() == Message::ADMIN_UPDATE_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminUpdateUserMessage::Builder Message::Builder::getAdminUpdateUser() {
  KJ_IREQUIRE((which() == Message::ADMIN_UPDATE_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminUpdateUser( ::globed::schema::main::AdminUpdateUserMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UPDATE_USER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminUpdateUserMessage::Builder Message::Builder::initAdminUpdateUser() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UPDATE_USER);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminUpdateUser(
    ::capnp::Orphan< ::globed::schema::main::AdminUpdateUserMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_UPDATE_USER);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminUpdateUserMessage> Message::Builder::disownAdminUpdateUser() {
  KJ_IREQUIRE((which() == Message::ADMIN_UPDATE_USER),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminUpdateUserMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminFetchLogs() const {
  return which() == Message::ADMIN_FETCH_LOGS;
}
inline bool Message::Builder::isAdminFetchLogs() {
  return which() == Message::ADMIN_FETCH_LOGS;
}
inline bool Message::Reader::hasAdminFetchLogs() const {
  if (which() != Message::ADMIN_FETCH_LOGS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminFetchLogs() {
  if (which() != Message::ADMIN_FETCH_LOGS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminFetchLogsMessage::Reader Message::Reader::getAdminFetchLogs() const {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminFetchLogsMessage::Builder Message::Builder::getAdminFetchLogs() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminFetchLogs( ::globed::schema::main::AdminFetchLogsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_LOGS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminFetchLogsMessage::Builder Message::Builder::initAdminFetchLogs() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_LOGS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminFetchLogs(
    ::capnp::Orphan< ::globed::schema::main::AdminFetchLogsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_LOGS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminFetchLogsMessage> Message::Builder::disownAdminFetchLogs() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchLogsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminLogsResponse() const {
  return which() == Message::ADMIN_LOGS_RESPONSE;
}
inline bool Message::Builder::isAdminLogsResponse() {
  return which() == Message::ADMIN_LOGS_RESPONSE;
}
inline bool Message::Reader::hasAdminLogsResponse() const {
  if (which() != Message::ADMIN_LOGS_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminLogsResponse() {
  if (which() != Message::ADMIN_LOGS_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminLogsResponseMessage::Reader Message::Reader::getAdminLogsResponse() const {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminLogsResponseMessage::Builder Message::Builder::getAdminLogsResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminLogsResponse( ::globed::schema::main::AdminLogsResponseMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGS_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminLogsResponseMessage::Builder Message::Builder::initAdminLogsResponse() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGS_RESPONSE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminLogsResponse(
    ::capnp::Orphan< ::globed::schema::main::AdminLogsResponseMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_LOGS_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminLogsResponseMessage> Message::Builder::disownAdminLogsResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_LOGS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminLogsResponseMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAssignTeam() const {
  return which() == Message::ASSIGN_TEAM;
}
inline bool Message::Builder::isAssignTeam() {
  return which() == Message::ASSIGN_TEAM;
}
inline bool Message::Reader::hasAssignTeam() const {
  if (which() != Message::ASSIGN_TEAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAssignTeam() {
  if (which() != Message::ASSIGN_TEAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AssignTeamMessage::Reader Message::Reader::getAssignTeam() const {
  KJ_IREQUIRE((which() == Message::ASSIGN_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AssignTeamMessage::Builder Message::Builder::getAssignTeam() {
  KJ_IREQUIRE((which() == Message::ASSIGN_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAssignTeam( ::globed::schema::main::AssignTeamMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ASSIGN_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AssignTeamMessage::Builder Message::Builder::initAssignTeam() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ASSIGN_TEAM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAssignTeam(
    ::capnp::Orphan< ::globed::schema::main::AssignTeamMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ASSIGN_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AssignTeamMessage> Message::Builder::disownAssignTeam() {
  KJ_IREQUIRE((which() == Message::ASSIGN_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AssignTeamMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isCreateTeam() const {
  return which() == Message::CREATE_TEAM;
}
inline bool Message::Builder::isCreateTeam() {
  return which() == Message::CREATE_TEAM;
}
inline bool Message::Reader::hasCreateTeam() const {
  if (which() != Message::CREATE_TEAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasCreateTeam() {
  if (which() != Message::CREATE_TEAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::CreateTeamMessage::Reader Message::Reader::getCreateTeam() const {
  KJ_IREQUIRE((which() == Message::CREATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::CreateTeamMessage::Builder Message::Builder::getCreateTeam() {
  KJ_IREQUIRE((which() == Message::CREATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setCreateTeam( ::globed::schema::main::CreateTeamMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::CreateTeamMessage::Builder Message::Builder::initCreateTeam() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_TEAM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptCreateTeam(
    ::capnp::Orphan< ::globed::schema::main::CreateTeamMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CREATE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::CreateTeamMessage> Message::Builder::disownCreateTeam() {
  KJ_IREQUIRE((which() == Message::CREATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::CreateTeamMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isDeleteTeam() const {
  return which() == Message::DELETE_TEAM;
}
inline bool Message::Builder::isDeleteTeam() {
  return which() == Message::DELETE_TEAM;
}
inline bool Message::Reader::hasDeleteTeam() const {
  if (which() != Message::DELETE_TEAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasDeleteTeam() {
  if (which() != Message::DELETE_TEAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::DeleteTeamMessage::Reader Message::Reader::getDeleteTeam() const {
  KJ_IREQUIRE((which() == Message::DELETE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::DeleteTeamMessage::Builder Message::Builder::getDeleteTeam() {
  KJ_IREQUIRE((which() == Message::DELETE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setDeleteTeam( ::globed::schema::main::DeleteTeamMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::DELETE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::DeleteTeamMessage::Builder Message::Builder::initDeleteTeam() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::DELETE_TEAM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptDeleteTeam(
    ::capnp::Orphan< ::globed::schema::main::DeleteTeamMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::DELETE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::DeleteTeamMessage> Message::Builder::disownDeleteTeam() {
  KJ_IREQUIRE((which() == Message::DELETE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::DeleteTeamMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isWarn() const {
  return which() == Message::WARN;
}
inline bool Message::Builder::isWarn() {
  return which() == Message::WARN;
}
inline bool Message::Reader::hasWarn() const {
  if (which() != Message::WARN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasWarn() {
  if (which() != Message::WARN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::WarnMessage::Reader Message::Reader::getWarn() const {
  KJ_IREQUIRE((which() == Message::WARN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::WarnMessage::Builder Message::Builder::getWarn() {
  KJ_IREQUIRE((which() == Message::WARN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setWarn( ::globed::schema::main::WarnMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::WarnMessage::Builder Message::Builder::initWarn() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARN);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptWarn(
    ::capnp::Orphan< ::globed::schema::main::WarnMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::WARN);
  ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::WarnMessage> Message::Builder::disownWarn() {
  KJ_IREQUIRE((which() == Message::WARN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::WarnMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isTeamCreationResult() const {
  return which() == Message::TEAM_CREATION_RESULT;
}
inline bool Message::Builder::isTeamCreationResult() {
  return which() == Message::TEAM_CREATION_RESULT;
}
inline bool Message::Reader::hasTeamCreationResult() const {
  if (which() != Message::TEAM_CREATION_RESULT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasTeamCreationResult() {
  if (which() != Message::TEAM_CREATION_RESULT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::TeamCreationResultMessage::Reader Message::Reader::getTeamCreationResult() const {
  KJ_IREQUIRE((which() == Message::TEAM_CREATION_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::TeamCreationResultMessage::Builder Message::Builder::getTeamCreationResult() {
  KJ_IREQUIRE((which() == Message::TEAM_CREATION_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setTeamCreationResult( ::globed::schema::main::TeamCreationResultMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CREATION_RESULT);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::TeamCreationResultMessage::Builder Message::Builder::initTeamCreationResult() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CREATION_RESULT);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptTeamCreationResult(
    ::capnp::Orphan< ::globed::schema::main::TeamCreationResultMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CREATION_RESULT);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::TeamCreationResultMessage> Message::Builder::disownTeamCreationResult() {
  KJ_IREQUIRE((which() == Message::TEAM_CREATION_RESULT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamCreationResultMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isTeamChanged() const {
  return which() == Message::TEAM_CHANGED;
}
inline bool Message::Builder::isTeamChanged() {
  return which() == Message::TEAM_CHANGED;
}
inline bool Message::Reader::hasTeamChanged() const {
  if (which() != Message::TEAM_CHANGED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasTeamChanged() {
  if (which() != Message::TEAM_CHANGED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::TeamChangedMessage::Reader Message::Reader::getTeamChanged() const {
  KJ_IREQUIRE((which() == Message::TEAM_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::TeamChangedMessage::Builder Message::Builder::getTeamChanged() {
  KJ_IREQUIRE((which() == Message::TEAM_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setTeamChanged( ::globed::schema::main::TeamChangedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CHANGED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::TeamChangedMessage::Builder Message::Builder::initTeamChanged() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CHANGED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptTeamChanged(
    ::capnp::Orphan< ::globed::schema::main::TeamChangedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_CHANGED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::TeamChangedMessage> Message::Builder::disownTeamChanged() {
  KJ_IREQUIRE((which() == Message::TEAM_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamChangedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isGetTeamMembers() const {
  return which() == Message::GET_TEAM_MEMBERS;
}
inline bool Message::Builder::isGetTeamMembers() {
  return which() == Message::GET_TEAM_MEMBERS;
}
inline bool Message::Reader::hasGetTeamMembers() const {
  if (which() != Message::GET_TEAM_MEMBERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasGetTeamMembers() {
  if (which() != Message::GET_TEAM_MEMBERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::GetTeamMembersMessage::Reader Message::Reader::getGetTeamMembers() const {
  KJ_IREQUIRE((which() == Message::GET_TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::GetTeamMembersMessage::Builder Message::Builder::getGetTeamMembers() {
  KJ_IREQUIRE((which() == Message::GET_TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setGetTeamMembers( ::globed::schema::main::GetTeamMembersMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::GET_TEAM_MEMBERS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::GetTeamMembersMessage::Builder Message::Builder::initGetTeamMembers() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::GET_TEAM_MEMBERS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptGetTeamMembers(
    ::capnp::Orphan< ::globed::schema::main::GetTeamMembersMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::GET_TEAM_MEMBERS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::GetTeamMembersMessage> Message::Builder::disownGetTeamMembers() {
  KJ_IREQUIRE((which() == Message::GET_TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::GetTeamMembersMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isTeamMembers() const {
  return which() == Message::TEAM_MEMBERS;
}
inline bool Message::Builder::isTeamMembers() {
  return which() == Message::TEAM_MEMBERS;
}
inline bool Message::Reader::hasTeamMembers() const {
  if (which() != Message::TEAM_MEMBERS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasTeamMembers() {
  if (which() != Message::TEAM_MEMBERS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::TeamMembersMessage::Reader Message::Reader::getTeamMembers() const {
  KJ_IREQUIRE((which() == Message::TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::TeamMembersMessage::Builder Message::Builder::getTeamMembers() {
  KJ_IREQUIRE((which() == Message::TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setTeamMembers( ::globed::schema::main::TeamMembersMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_MEMBERS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::TeamMembersMessage::Builder Message::Builder::initTeamMembers() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_MEMBERS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptTeamMembers(
    ::capnp::Orphan< ::globed::schema::main::TeamMembersMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAM_MEMBERS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::TeamMembersMessage> Message::Builder::disownTeamMembers() {
  KJ_IREQUIRE((which() == Message::TEAM_MEMBERS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamMembersMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isUpdateTeam() const {
  return which() == Message::UPDATE_TEAM;
}
inline bool Message::Builder::isUpdateTeam() {
  return which() == Message::UPDATE_TEAM;
}
inline bool Message::Reader::hasUpdateTeam() const {
  if (which() != Message::UPDATE_TEAM) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasUpdateTeam() {
  if (which() != Message::UPDATE_TEAM) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::UpdateTeamMessage::Reader Message::Reader::getUpdateTeam() const {
  KJ_IREQUIRE((which() == Message::UPDATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::UpdateTeamMessage::Builder Message::Builder::getUpdateTeam() {
  KJ_IREQUIRE((which() == Message::UPDATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setUpdateTeam( ::globed::schema::main::UpdateTeamMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::UpdateTeamMessage::Builder Message::Builder::initUpdateTeam() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_TEAM);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptUpdateTeam(
    ::capnp::Orphan< ::globed::schema::main::UpdateTeamMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_TEAM);
  ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::UpdateTeamMessage> Message::Builder::disownUpdateTeam() {
  KJ_IREQUIRE((which() == Message::UPDATE_TEAM),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::UpdateTeamMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isTeamsUpdated() const {
  return which() == Message::TEAMS_UPDATED;
}
inline bool Message::Builder::isTeamsUpdated() {
  return which() == Message::TEAMS_UPDATED;
}
inline bool Message::Reader::hasTeamsUpdated() const {
  if (which() != Message::TEAMS_UPDATED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasTeamsUpdated() {
  if (which() != Message::TEAMS_UPDATED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::TeamsUpdatedMessage::Reader Message::Reader::getTeamsUpdated() const {
  KJ_IREQUIRE((which() == Message::TEAMS_UPDATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::TeamsUpdatedMessage::Builder Message::Builder::getTeamsUpdated() {
  KJ_IREQUIRE((which() == Message::TEAMS_UPDATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setTeamsUpdated( ::globed::schema::main::TeamsUpdatedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAMS_UPDATED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::TeamsUpdatedMessage::Builder Message::Builder::initTeamsUpdated() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAMS_UPDATED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptTeamsUpdated(
    ::capnp::Orphan< ::globed::schema::main::TeamsUpdatedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::TEAMS_UPDATED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::TeamsUpdatedMessage> Message::Builder::disownTeamsUpdated() {
  KJ_IREQUIRE((which() == Message::TEAMS_UPDATED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::TeamsUpdatedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminFetchMods() const {
  return which() == Message::ADMIN_FETCH_MODS;
}
inline bool Message::Builder::isAdminFetchMods() {
  return which() == Message::ADMIN_FETCH_MODS;
}
inline bool Message::Reader::hasAdminFetchMods() const {
  if (which() != Message::ADMIN_FETCH_MODS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminFetchMods() {
  if (which() != Message::ADMIN_FETCH_MODS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminFetchModsMessage::Reader Message::Reader::getAdminFetchMods() const {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminFetchModsMessage::Builder Message::Builder::getAdminFetchMods() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminFetchMods( ::globed::schema::main::AdminFetchModsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminFetchModsMessage::Builder Message::Builder::initAdminFetchMods() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminFetchMods(
    ::capnp::Orphan< ::globed::schema::main::AdminFetchModsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminFetchModsMessage> Message::Builder::disownAdminFetchMods() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isAdminFetchModsResponse() const {
  return which() == Message::ADMIN_FETCH_MODS_RESPONSE;
}
inline bool Message::Builder::isAdminFetchModsResponse() {
  return which() == Message::ADMIN_FETCH_MODS_RESPONSE;
}
inline bool Message::Reader::hasAdminFetchModsResponse() const {
  if (which() != Message::ADMIN_FETCH_MODS_RESPONSE) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasAdminFetchModsResponse() {
  if (which() != Message::ADMIN_FETCH_MODS_RESPONSE) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::AdminFetchModsResponseMessage::Reader Message::Reader::getAdminFetchModsResponse() const {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::AdminFetchModsResponseMessage::Builder Message::Builder::getAdminFetchModsResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setAdminFetchModsResponse( ::globed::schema::main::AdminFetchModsResponseMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::AdminFetchModsResponseMessage::Builder Message::Builder::initAdminFetchModsResponse() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS_RESPONSE);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptAdminFetchModsResponse(
    ::capnp::Orphan< ::globed::schema::main::AdminFetchModsResponseMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ADMIN_FETCH_MODS_RESPONSE);
  ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::AdminFetchModsResponseMessage> Message::Builder::disownAdminFetchModsResponse() {
  KJ_IREQUIRE((which() == Message::ADMIN_FETCH_MODS_RESPONSE),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::AdminFetchModsResponseMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isServersChanged() const {
  return which() == Message::SERVERS_CHANGED;
}
inline bool Message::Builder::isServersChanged() {
  return which() == Message::SERVERS_CHANGED;
}
inline bool Message::Reader::hasServersChanged() const {
  if (which() != Message::SERVERS_CHANGED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasServersChanged() {
  if (which() != Message::SERVERS_CHANGED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::ServersChangedMessage::Reader Message::Reader::getServersChanged() const {
  KJ_IREQUIRE((which() == Message::SERVERS_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::ServersChangedMessage::Builder Message::Builder::getServersChanged() {
  KJ_IREQUIRE((which() == Message::SERVERS_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setServersChanged( ::globed::schema::main::ServersChangedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SERVERS_CHANGED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::ServersChangedMessage::Builder Message::Builder::initServersChanged() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SERVERS_CHANGED);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptServersChanged(
    ::capnp::Orphan< ::globed::schema::main::ServersChangedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SERVERS_CHANGED);
  ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::ServersChangedMessage> Message::Builder::disownServersChanged() {
  KJ_IREQUIRE((which() == Message::SERVERS_CHANGED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::ServersChangedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isRoomOwnerAction() const {
  return which() == Message::ROOM_OWNER_ACTION;
}
inline bool Message::Builder::isRoomOwnerAction() {
  return which() == Message::ROOM_OWNER_ACTION;
}
inline bool Message::Reader::hasRoomOwnerAction() const {
  if (which() != Message::ROOM_OWNER_ACTION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasRoomOwnerAction() {
  if (which() != Message::ROOM_OWNER_ACTION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::main::RoomOwnerActionMessage::Reader Message::Reader::getRoomOwnerAction() const {
  KJ_IREQUIRE((which() == Message::ROOM_OWNER_ACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::main::RoomOwnerActionMessage::Builder Message::Builder::getRoomOwnerAction() {
  KJ_IREQUIRE((which() == Message::ROOM_OWNER_ACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setRoomOwnerAction( ::globed::schema::main::RoomOwnerActionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_OWNER_ACTION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::main::RoomOwnerActionMessage::Builder Message::Builder::initRoomOwnerAction() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_OWNER_ACTION);
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptRoomOwnerAction(
    ::capnp::Orphan< ::globed::schema::main::RoomOwnerActionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::ROOM_OWNER_ACTION);
  ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::main::RoomOwnerActionMessage> Message::Builder::disownRoomOwnerAction() {
  KJ_IREQUIRE((which() == Message::ROOM_OWNER_ACTION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::main::RoomOwnerActionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

