// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: game.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c89d589e40b63e4c);
CAPNP_DECLARE_SCHEMA(b5df2f02ff01e1a4);
CAPNP_DECLARE_SCHEMA(d1b22feb8db7bef2);
CAPNP_DECLARE_SCHEMA(844b8252298018d8);
enum class LoginFailedReason_844b8252298018d8: uint16_t {
  INVALID_USER_TOKEN,
  CENTRAL_SERVER_UNREACHABLE,
};
CAPNP_DECLARE_ENUM(LoginFailedReason, 844b8252298018d8);
CAPNP_DECLARE_SCHEMA(bcf24c2476f6df38);
CAPNP_DECLARE_SCHEMA(cb73420259ca5cfc);
CAPNP_DECLARE_SCHEMA(bc6decb777029037);
CAPNP_DECLARE_SCHEMA(dff86b3bb0c6c45f);
enum class JoinSessionFailedReason_dff86b3bb0c6c45f: uint16_t {
  NOT_FOUND,
  INVALID_PASSCODE,
};
CAPNP_DECLARE_ENUM(JoinSessionFailedReason, dff86b3bb0c6c45f);
CAPNP_DECLARE_SCHEMA(d0220b919cc3f7e9);
CAPNP_DECLARE_SCHEMA(ab51fdae26ff1d81);
CAPNP_DECLARE_SCHEMA(ee430f29eef52d4e);

}  // namespace schemas
}  // namespace capnp

namespace globed {
namespace schema {
namespace game {

struct LoginUTokenMessage {
  LoginUTokenMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c89d589e40b63e4c, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginUTokenAndJoinMessage {
  LoginUTokenAndJoinMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b5df2f02ff01e1a4, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginOkMessage {
  LoginOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1b22feb8db7bef2, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::LoginFailedReason_844b8252298018d8 LoginFailedReason;

struct LoginFailedMessage {
  LoginFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcf24c2476f6df38, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionMessage {
  JoinSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb73420259ca5cfc, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionOkMessage {
  JoinSessionOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc6decb777029037, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::JoinSessionFailedReason_dff86b3bb0c6c45f JoinSessionFailedReason;

struct JoinSessionFailedMessage {
  JoinSessionFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0220b919cc3f7e9, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LeaveSessionMessage {
  LeaveSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab51fdae26ff1d81, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    LOGIN_U_TOKEN,
    LOGIN_OK,
    LOGIN_FAILED,
    LOGIN_U_TOKEN_AND_JOIN,
    JOIN_SESSION,
    LEAVE_SESSION,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee430f29eef52d4e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class LoginUTokenMessage::Reader {
public:
  typedef LoginUTokenMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginUTokenMessage::Builder {
public:
  typedef LoginUTokenMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginUTokenMessage::Pipeline {
public:
  typedef LoginUTokenMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginUTokenAndJoinMessage::Reader {
public:
  typedef LoginUTokenAndJoinMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline  ::uint64_t getSessionId() const;

  inline  ::uint32_t getPasscode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginUTokenAndJoinMessage::Builder {
public:
  typedef LoginUTokenAndJoinMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginUTokenAndJoinMessage::Pipeline {
public:
  typedef LoginUTokenAndJoinMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginOkMessage::Reader {
public:
  typedef LoginOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginOkMessage::Builder {
public:
  typedef LoginOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginOkMessage::Pipeline {
public:
  typedef LoginOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginFailedMessage::Reader {
public:
  typedef LoginFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::LoginFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginFailedMessage::Builder {
public:
  typedef LoginFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::LoginFailedReason getReason();
  inline void setReason( ::globed::schema::game::LoginFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginFailedMessage::Pipeline {
public:
  typedef LoginFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionMessage::Reader {
public:
  typedef JoinSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

  inline  ::uint32_t getPasscode() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionMessage::Builder {
public:
  typedef JoinSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionMessage::Pipeline {
public:
  typedef JoinSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionOkMessage::Reader {
public:
  typedef JoinSessionOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionOkMessage::Builder {
public:
  typedef JoinSessionOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionOkMessage::Pipeline {
public:
  typedef JoinSessionOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionFailedMessage::Reader {
public:
  typedef JoinSessionFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::JoinSessionFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionFailedMessage::Builder {
public:
  typedef JoinSessionFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::JoinSessionFailedReason getReason();
  inline void setReason( ::globed::schema::game::JoinSessionFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionFailedMessage::Pipeline {
public:
  typedef JoinSessionFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LeaveSessionMessage::Reader {
public:
  typedef LeaveSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LeaveSessionMessage::Builder {
public:
  typedef LeaveSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LeaveSessionMessage::Pipeline {
public:
  typedef LeaveSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isLoginUToken() const;
  inline bool hasLoginUToken() const;
  inline  ::globed::schema::game::LoginUTokenMessage::Reader getLoginUToken() const;

  inline bool isLoginOk() const;
  inline bool hasLoginOk() const;
  inline  ::globed::schema::game::LoginOkMessage::Reader getLoginOk() const;

  inline bool isLoginFailed() const;
  inline bool hasLoginFailed() const;
  inline  ::globed::schema::game::LoginFailedMessage::Reader getLoginFailed() const;

  inline bool isLoginUTokenAndJoin() const;
  inline bool hasLoginUTokenAndJoin() const;
  inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Reader getLoginUTokenAndJoin() const;

  inline bool isJoinSession() const;
  inline bool hasJoinSession() const;
  inline  ::globed::schema::game::JoinSessionMessage::Reader getJoinSession() const;

  inline bool isLeaveSession() const;
  inline bool hasLeaveSession() const;
  inline  ::globed::schema::game::LeaveSessionMessage::Reader getLeaveSession() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isLoginUToken();
  inline bool hasLoginUToken();
  inline  ::globed::schema::game::LoginUTokenMessage::Builder getLoginUToken();
  inline void setLoginUToken( ::globed::schema::game::LoginUTokenMessage::Reader value);
  inline  ::globed::schema::game::LoginUTokenMessage::Builder initLoginUToken();
  inline void adoptLoginUToken(::capnp::Orphan< ::globed::schema::game::LoginUTokenMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginUTokenMessage> disownLoginUToken();

  inline bool isLoginOk();
  inline bool hasLoginOk();
  inline  ::globed::schema::game::LoginOkMessage::Builder getLoginOk();
  inline void setLoginOk( ::globed::schema::game::LoginOkMessage::Reader value);
  inline  ::globed::schema::game::LoginOkMessage::Builder initLoginOk();
  inline void adoptLoginOk(::capnp::Orphan< ::globed::schema::game::LoginOkMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginOkMessage> disownLoginOk();

  inline bool isLoginFailed();
  inline bool hasLoginFailed();
  inline  ::globed::schema::game::LoginFailedMessage::Builder getLoginFailed();
  inline void setLoginFailed( ::globed::schema::game::LoginFailedMessage::Reader value);
  inline  ::globed::schema::game::LoginFailedMessage::Builder initLoginFailed();
  inline void adoptLoginFailed(::capnp::Orphan< ::globed::schema::game::LoginFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage> disownLoginFailed();

  inline bool isLoginUTokenAndJoin();
  inline bool hasLoginUTokenAndJoin();
  inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Builder getLoginUTokenAndJoin();
  inline void setLoginUTokenAndJoin( ::globed::schema::game::LoginUTokenAndJoinMessage::Reader value);
  inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Builder initLoginUTokenAndJoin();
  inline void adoptLoginUTokenAndJoin(::capnp::Orphan< ::globed::schema::game::LoginUTokenAndJoinMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginUTokenAndJoinMessage> disownLoginUTokenAndJoin();

  inline bool isJoinSession();
  inline bool hasJoinSession();
  inline  ::globed::schema::game::JoinSessionMessage::Builder getJoinSession();
  inline void setJoinSession( ::globed::schema::game::JoinSessionMessage::Reader value);
  inline  ::globed::schema::game::JoinSessionMessage::Builder initJoinSession();
  inline void adoptJoinSession(::capnp::Orphan< ::globed::schema::game::JoinSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage> disownJoinSession();

  inline bool isLeaveSession();
  inline bool hasLeaveSession();
  inline  ::globed::schema::game::LeaveSessionMessage::Builder getLeaveSession();
  inline void setLeaveSession( ::globed::schema::game::LeaveSessionMessage::Reader value);
  inline  ::globed::schema::game::LeaveSessionMessage::Builder initLeaveSession();
  inline void adoptLeaveSession(::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage> disownLeaveSession();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t LoginUTokenMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginUTokenMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginUTokenMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginUTokenMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginUTokenMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginUTokenMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginUTokenMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginUTokenMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t LoginUTokenAndJoinMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginUTokenAndJoinMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenAndJoinMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginUTokenAndJoinMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginUTokenAndJoinMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginUTokenAndJoinMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginUTokenAndJoinMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginUTokenAndJoinMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginUTokenAndJoinMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginUTokenAndJoinMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginUTokenAndJoinMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t LoginUTokenAndJoinMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LoginUTokenAndJoinMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenAndJoinMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LoginUTokenAndJoinMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LoginUTokenAndJoinMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LoginUTokenAndJoinMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::game::LoginFailedReason LoginFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::game::LoginFailedReason LoginFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginFailedMessage::Builder::setReason( ::globed::schema::game::LoginFailedReason value) {
  _builder.setDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t JoinSessionMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t JoinSessionMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t JoinSessionMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t JoinSessionOkMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionOkMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionOkMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::game::JoinSessionFailedReason JoinSessionFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::game::JoinSessionFailedReason JoinSessionFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionFailedMessage::Builder::setReason( ::globed::schema::game::JoinSessionFailedReason value) {
  _builder.setDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::game::Message::Which Message::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::globed::schema::game::Message::Which Message::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Message::Reader::isLoginUToken() const {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Builder::isLoginUToken() {
  return which() == Message::LOGIN_U_TOKEN;
}
inline bool Message::Reader::hasLoginUToken() const {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginUToken() {
  if (which() != Message::LOGIN_U_TOKEN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginUTokenMessage::Reader Message::Reader::getLoginUToken() const {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginUTokenMessage::Builder Message::Builder::getLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginUToken( ::globed::schema::game::LoginUTokenMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginUTokenMessage::Builder Message::Builder::initLoginUToken() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginUToken(
    ::capnp::Orphan< ::globed::schema::game::LoginUTokenMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginUTokenMessage> Message::Builder::disownLoginUToken() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginOk() const {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Builder::isLoginOk() {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Reader::hasLoginOk() const {
  if (which() != Message::LOGIN_OK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginOk() {
  if (which() != Message::LOGIN_OK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginOkMessage::Reader Message::Reader::getLoginOk() const {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginOkMessage::Builder Message::Builder::getLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginOk( ::globed::schema::game::LoginOkMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginOkMessage::Builder Message::Builder::initLoginOk() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginOk(
    ::capnp::Orphan< ::globed::schema::game::LoginOkMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginOkMessage> Message::Builder::disownLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginFailed() const {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Builder::isLoginFailed() {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Reader::hasLoginFailed() const {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginFailed() {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginFailedMessage::Reader Message::Reader::getLoginFailed() const {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginFailedMessage::Builder Message::Builder::getLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginFailed( ::globed::schema::game::LoginFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginFailedMessage::Builder Message::Builder::initLoginFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginFailed(
    ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage> Message::Builder::disownLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginUTokenAndJoin() const {
  return which() == Message::LOGIN_U_TOKEN_AND_JOIN;
}
inline bool Message::Builder::isLoginUTokenAndJoin() {
  return which() == Message::LOGIN_U_TOKEN_AND_JOIN;
}
inline bool Message::Reader::hasLoginUTokenAndJoin() const {
  if (which() != Message::LOGIN_U_TOKEN_AND_JOIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginUTokenAndJoin() {
  if (which() != Message::LOGIN_U_TOKEN_AND_JOIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Reader Message::Reader::getLoginUTokenAndJoin() const {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN_AND_JOIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Builder Message::Builder::getLoginUTokenAndJoin() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN_AND_JOIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginUTokenAndJoin( ::globed::schema::game::LoginUTokenAndJoinMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN_AND_JOIN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginUTokenAndJoinMessage::Builder Message::Builder::initLoginUTokenAndJoin() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN_AND_JOIN);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginUTokenAndJoin(
    ::capnp::Orphan< ::globed::schema::game::LoginUTokenAndJoinMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_U_TOKEN_AND_JOIN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginUTokenAndJoinMessage> Message::Builder::disownLoginUTokenAndJoin() {
  KJ_IREQUIRE((which() == Message::LOGIN_U_TOKEN_AND_JOIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginUTokenAndJoinMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSession() const {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Builder::isJoinSession() {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Reader::hasJoinSession() const {
  if (which() != Message::JOIN_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSession() {
  if (which() != Message::JOIN_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::JoinSessionMessage::Reader Message::Reader::getJoinSession() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::JoinSessionMessage::Builder Message::Builder::getJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSession( ::globed::schema::game::JoinSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::JoinSessionMessage::Builder Message::Builder::initJoinSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSession(
    ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage> Message::Builder::disownJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveSession() const {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Builder::isLeaveSession() {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Reader::hasLeaveSession() const {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLeaveSession() {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LeaveSessionMessage::Reader Message::Reader::getLeaveSession() const {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LeaveSessionMessage::Builder Message::Builder::getLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLeaveSession( ::globed::schema::game::LeaveSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LeaveSessionMessage::Builder Message::Builder::initLeaveSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLeaveSession(
    ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage> Message::Builder::disownLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

