// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: game.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1002000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "shared.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(aae1e6391a0fa6f6);
CAPNP_DECLARE_SCHEMA(d1b22feb8db7bef2);
CAPNP_DECLARE_SCHEMA(844b8252298018d8);
enum class LoginFailedReason_844b8252298018d8: uint16_t {
  INVALID_USER_TOKEN,
  CENTRAL_SERVER_UNREACHABLE,
};
CAPNP_DECLARE_ENUM(LoginFailedReason, 844b8252298018d8);
CAPNP_DECLARE_SCHEMA(bcf24c2476f6df38);
CAPNP_DECLARE_SCHEMA(cb73420259ca5cfc);
CAPNP_DECLARE_SCHEMA(bc6decb777029037);
CAPNP_DECLARE_SCHEMA(dff86b3bb0c6c45f);
enum class JoinSessionFailedReason_dff86b3bb0c6c45f: uint16_t {
  INVALID_PASSCODE,
  INVALID_ROOM,
};
CAPNP_DECLARE_ENUM(JoinSessionFailedReason, dff86b3bb0c6c45f);
CAPNP_DECLARE_SCHEMA(d0220b919cc3f7e9);
CAPNP_DECLARE_SCHEMA(ab51fdae26ff1d81);
CAPNP_DECLARE_SCHEMA(d6d14ce809fc7c4d);
CAPNP_DECLARE_SCHEMA(920467072fa8ce3c);
CAPNP_DECLARE_SCHEMA(ea51b18e3e4bdda6);
CAPNP_DECLARE_SCHEMA(8c81bcb5b34031b2);
CAPNP_DECLARE_SCHEMA(93f977e044434ab7);
CAPNP_DECLARE_SCHEMA(cf89bb52472b08d4);
CAPNP_DECLARE_SCHEMA(f3df92cfd07ba2ea);
CAPNP_DECLARE_SCHEMA(f5b211f1db0defbc);
CAPNP_DECLARE_SCHEMA(f3e0f84d2138b356);
CAPNP_DECLARE_SCHEMA(ee95a98b84cdb612);
CAPNP_DECLARE_SCHEMA(a5e1158db5d33982);
CAPNP_DECLARE_SCHEMA(a66df788476d46df);
CAPNP_DECLARE_SCHEMA(931b0abb37c2eb2e);
CAPNP_DECLARE_SCHEMA(c8a95e9766c5920c);
enum class KickReason_c8a95e9766c5920c: uint16_t {
  CUSTOM,
  DUPLICATE_LOGIN,
};
CAPNP_DECLARE_ENUM(KickReason, c8a95e9766c5920c);
CAPNP_DECLARE_SCHEMA(b42ff33e56f21298);
CAPNP_DECLARE_SCHEMA(d2d77b5d2f998da1);
CAPNP_DECLARE_SCHEMA(be5fa37583693d04);
CAPNP_DECLARE_SCHEMA(dea093f0d56cacfb);
CAPNP_DECLARE_SCHEMA(ee430f29eef52d4e);

}  // namespace schemas
}  // namespace capnp

namespace globed {
namespace schema {
namespace game {

struct LoginMessage {
  LoginMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aae1e6391a0fa6f6, 3, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LoginOkMessage {
  LoginOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d1b22feb8db7bef2, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::LoginFailedReason_844b8252298018d8 LoginFailedReason;

struct LoginFailedMessage {
  LoginFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bcf24c2476f6df38, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionMessage {
  JoinSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cb73420259ca5cfc, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct JoinSessionOkMessage {
  JoinSessionOkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bc6decb777029037, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::JoinSessionFailedReason_dff86b3bb0c6c45f JoinSessionFailedReason;

struct JoinSessionFailedMessage {
  JoinSessionFailedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d0220b919cc3f7e9, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LeaveSessionMessage {
  LeaveSessionMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab51fdae26ff1d81, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ExtendedPlayerData {
  ExtendedPlayerData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d6d14ce809fc7c4d, 4, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerObjectData {
  PlayerObjectData() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(920467072fa8ce3c, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerData {
  PlayerData() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    DUAL,
    SINGLE,
    CULLED,
  };
  struct Dual;
  struct Single;
  struct Culled;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ea51b18e3e4bdda6, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerData::Dual {
  Dual() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c81bcb5b34031b2, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerData::Single {
  Single() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(93f977e044434ab7, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerData::Culled {
  Culled() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf89bb52472b08d4, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3df92cfd07ba2ea, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerDataMessage {
  PlayerDataMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f5b211f1db0defbc, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LevelDataMessage {
  LevelDataMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f3e0f84d2138b356, 0, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct UpdateIconsMessage {
  UpdateIconsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee95a98b84cdb612, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct LevelScript {
  LevelScript() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a5e1158db5d33982, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct SendLevelScriptMessage {
  SendLevelScriptMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a66df788476d46df, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VoiceDataMessage {
  VoiceDataMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(931b0abb37c2eb2e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

typedef ::capnp::schemas::KickReason_c8a95e9766c5920c KickReason;

struct KickedMessage {
  KickedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b42ff33e56f21298, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ScriptLogsMessage {
  ScriptLogsMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d2d77b5d2f998da1, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct VoiceBroadcastMessage {
  VoiceBroadcastMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be5fa37583693d04, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ChatNotPermittedMessage {
  ChatNotPermittedMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(dea093f0d56cacfb, 0, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Message {
  Message() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    LOGIN,
    JOIN_SESSION,
    LEAVE_SESSION,
    PLAYER_DATA,
    UPDATE_ICONS,
    SEND_LEVEL_SCRIPT,
    VOICE_DATA,
    LOGIN_OK,
    LOGIN_FAILED,
    JOIN_SESSION_OK,
    JOIN_SESSION_FAILED,
    LEVEL_DATA,
    KICKED,
    SCRIPT_LOGS,
    VOICE_BROADCAST,
    CHAT_NOT_PERMITTED,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee430f29eef52d4e, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class LoginMessage::Reader {
public:
  typedef LoginMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasToken() const;
  inline  ::capnp::Text::Reader getToken() const;

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

  inline bool hasSettings() const;
  inline  ::globed::schema::shared::UserSettings::Reader getSettings() const;

  inline  ::uint64_t getSessionId() const;

  inline  ::uint32_t getPasscode() const;

  inline bool getPlatformer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginMessage::Builder {
public:
  typedef LoginMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasToken();
  inline  ::capnp::Text::Builder getToken();
  inline void setToken( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initToken(unsigned int size);
  inline void adoptToken(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownToken();

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

  inline bool hasSettings();
  inline  ::globed::schema::shared::UserSettings::Builder getSettings();
  inline void setSettings( ::globed::schema::shared::UserSettings::Reader value);
  inline  ::globed::schema::shared::UserSettings::Builder initSettings();
  inline void adoptSettings(::capnp::Orphan< ::globed::schema::shared::UserSettings>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::UserSettings> disownSettings();

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

  inline bool getPlatformer();
  inline void setPlatformer(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginMessage::Pipeline {
public:
  typedef LoginMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
  inline  ::globed::schema::shared::UserSettings::Pipeline getSettings();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginOkMessage::Reader {
public:
  typedef LoginOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTickrate() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginOkMessage::Builder {
public:
  typedef LoginOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getTickrate();
  inline void setTickrate( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginOkMessage::Pipeline {
public:
  typedef LoginOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LoginFailedMessage::Reader {
public:
  typedef LoginFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::LoginFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LoginFailedMessage::Builder {
public:
  typedef LoginFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::LoginFailedReason getReason();
  inline void setReason( ::globed::schema::game::LoginFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LoginFailedMessage::Pipeline {
public:
  typedef LoginFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionMessage::Reader {
public:
  typedef JoinSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

  inline  ::uint32_t getPasscode() const;

  inline bool getPlatformer() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionMessage::Builder {
public:
  typedef JoinSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

  inline  ::uint32_t getPasscode();
  inline void setPasscode( ::uint32_t value);

  inline bool getPlatformer();
  inline void setPlatformer(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionMessage::Pipeline {
public:
  typedef JoinSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionOkMessage::Reader {
public:
  typedef JoinSessionOkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionOkMessage::Builder {
public:
  typedef JoinSessionOkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint64_t getSessionId();
  inline void setSessionId( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionOkMessage::Pipeline {
public:
  typedef JoinSessionOkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class JoinSessionFailedMessage::Reader {
public:
  typedef JoinSessionFailedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::JoinSessionFailedReason getReason() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class JoinSessionFailedMessage::Builder {
public:
  typedef JoinSessionFailedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::JoinSessionFailedReason getReason();
  inline void setReason( ::globed::schema::game::JoinSessionFailedReason value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class JoinSessionFailedMessage::Pipeline {
public:
  typedef JoinSessionFailedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LeaveSessionMessage::Reader {
public:
  typedef LeaveSessionMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LeaveSessionMessage::Builder {
public:
  typedef LeaveSessionMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LeaveSessionMessage::Pipeline {
public:
  typedef LeaveSessionMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ExtendedPlayerData::Reader {
public:
  typedef ExtendedPlayerData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getVelocityX() const;

  inline float getVelocityY() const;

  inline bool getAccelerating() const;

  inline float getAcceleration() const;

  inline float getFallStartY() const;

  inline bool getIsOnGround2() const;

  inline float getGravityMod() const;

  inline float getGravity() const;

  inline bool getTouchedPad() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ExtendedPlayerData::Builder {
public:
  typedef ExtendedPlayerData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getVelocityX();
  inline void setVelocityX(float value);

  inline float getVelocityY();
  inline void setVelocityY(float value);

  inline bool getAccelerating();
  inline void setAccelerating(bool value);

  inline float getAcceleration();
  inline void setAcceleration(float value);

  inline float getFallStartY();
  inline void setFallStartY(float value);

  inline bool getIsOnGround2();
  inline void setIsOnGround2(bool value);

  inline float getGravityMod();
  inline void setGravityMod(float value);

  inline float getGravity();
  inline void setGravity(float value);

  inline bool getTouchedPad();
  inline void setTouchedPad(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ExtendedPlayerData::Pipeline {
public:
  typedef ExtendedPlayerData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerObjectData::Reader {
public:
  typedef PlayerObjectData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline float getPositionX() const;

  inline float getPositionY() const;

  inline float getRotation() const;

  inline  ::globed::schema::shared::IconType getIconType() const;

  inline bool getIsVisible() const;

  inline bool getIsLookingLeft() const;

  inline bool getIsUpsideDown() const;

  inline bool getIsDashing() const;

  inline bool getIsMini() const;

  inline bool getIsGrounded() const;

  inline bool getIsStationary() const;

  inline bool getIsFalling() const;

  inline bool getIsRotating() const;

  inline bool getIsSideways() const;

  inline bool hasExtData() const;
  inline  ::globed::schema::game::ExtendedPlayerData::Reader getExtData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerObjectData::Builder {
public:
  typedef PlayerObjectData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline float getPositionX();
  inline void setPositionX(float value);

  inline float getPositionY();
  inline void setPositionY(float value);

  inline float getRotation();
  inline void setRotation(float value);

  inline  ::globed::schema::shared::IconType getIconType();
  inline void setIconType( ::globed::schema::shared::IconType value);

  inline bool getIsVisible();
  inline void setIsVisible(bool value);

  inline bool getIsLookingLeft();
  inline void setIsLookingLeft(bool value);

  inline bool getIsUpsideDown();
  inline void setIsUpsideDown(bool value);

  inline bool getIsDashing();
  inline void setIsDashing(bool value);

  inline bool getIsMini();
  inline void setIsMini(bool value);

  inline bool getIsGrounded();
  inline void setIsGrounded(bool value);

  inline bool getIsStationary();
  inline void setIsStationary(bool value);

  inline bool getIsFalling();
  inline void setIsFalling(bool value);

  inline bool getIsRotating();
  inline void setIsRotating(bool value);

  inline bool getIsSideways();
  inline void setIsSideways(bool value);

  inline bool hasExtData();
  inline  ::globed::schema::game::ExtendedPlayerData::Builder getExtData();
  inline void setExtData( ::globed::schema::game::ExtendedPlayerData::Reader value);
  inline  ::globed::schema::game::ExtendedPlayerData::Builder initExtData();
  inline void adoptExtData(::capnp::Orphan< ::globed::schema::game::ExtendedPlayerData>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::ExtendedPlayerData> disownExtData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerObjectData::Pipeline {
public:
  typedef PlayerObjectData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::game::ExtendedPlayerData::Pipeline getExtData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerData::Reader {
public:
  typedef PlayerData Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline  ::int32_t getAccountId() const;

  inline float getTimestamp() const;

  inline  ::uint8_t getFrameNumber() const;

  inline  ::uint8_t getDeathCount() const;

  inline  ::uint16_t getPercentage() const;

  inline bool getIsDead() const;

  inline bool getIsPaused() const;

  inline bool getIsPracticing() const;

  inline bool getIsInEditor() const;

  inline bool getIsEditorBuilding() const;

  inline bool getIsLastDeathReal() const;

  inline bool isDual() const;
  inline typename Dual::Reader getDual() const;

  inline bool isSingle() const;
  inline typename Single::Reader getSingle() const;

  inline bool isCulled() const;
  inline typename Culled::Reader getCulled() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerData::Builder {
public:
  typedef PlayerData Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline float getTimestamp();
  inline void setTimestamp(float value);

  inline  ::uint8_t getFrameNumber();
  inline void setFrameNumber( ::uint8_t value);

  inline  ::uint8_t getDeathCount();
  inline void setDeathCount( ::uint8_t value);

  inline  ::uint16_t getPercentage();
  inline void setPercentage( ::uint16_t value);

  inline bool getIsDead();
  inline void setIsDead(bool value);

  inline bool getIsPaused();
  inline void setIsPaused(bool value);

  inline bool getIsPracticing();
  inline void setIsPracticing(bool value);

  inline bool getIsInEditor();
  inline void setIsInEditor(bool value);

  inline bool getIsEditorBuilding();
  inline void setIsEditorBuilding(bool value);

  inline bool getIsLastDeathReal();
  inline void setIsLastDeathReal(bool value);

  inline bool isDual();
  inline typename Dual::Builder getDual();
  inline typename Dual::Builder initDual();

  inline bool isSingle();
  inline typename Single::Builder getSingle();
  inline typename Single::Builder initSingle();

  inline bool isCulled();
  inline typename Culled::Builder getCulled();
  inline typename Culled::Builder initCulled();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerData::Pipeline {
public:
  typedef PlayerData Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerData::Dual::Reader {
public:
  typedef Dual Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayer1() const;
  inline  ::globed::schema::game::PlayerObjectData::Reader getPlayer1() const;

  inline bool hasPlayer2() const;
  inline  ::globed::schema::game::PlayerObjectData::Reader getPlayer2() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerData::Dual::Builder {
public:
  typedef Dual Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayer1();
  inline  ::globed::schema::game::PlayerObjectData::Builder getPlayer1();
  inline void setPlayer1( ::globed::schema::game::PlayerObjectData::Reader value);
  inline  ::globed::schema::game::PlayerObjectData::Builder initPlayer1();
  inline void adoptPlayer1(::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> disownPlayer1();

  inline bool hasPlayer2();
  inline  ::globed::schema::game::PlayerObjectData::Builder getPlayer2();
  inline void setPlayer2( ::globed::schema::game::PlayerObjectData::Reader value);
  inline  ::globed::schema::game::PlayerObjectData::Builder initPlayer2();
  inline void adoptPlayer2(::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> disownPlayer2();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerData::Dual::Pipeline {
public:
  typedef Dual Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::game::PlayerObjectData::Pipeline getPlayer1();
  inline  ::globed::schema::game::PlayerObjectData::Pipeline getPlayer2();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerData::Single::Reader {
public:
  typedef Single Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayer1() const;
  inline  ::globed::schema::game::PlayerObjectData::Reader getPlayer1() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerData::Single::Builder {
public:
  typedef Single Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayer1();
  inline  ::globed::schema::game::PlayerObjectData::Builder getPlayer1();
  inline void setPlayer1( ::globed::schema::game::PlayerObjectData::Reader value);
  inline  ::globed::schema::game::PlayerObjectData::Builder initPlayer1();
  inline void adoptPlayer1(::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> disownPlayer1();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerData::Single::Pipeline {
public:
  typedef Single Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::game::PlayerObjectData::Pipeline getPlayer1();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerData::Culled::Reader {
public:
  typedef Culled Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getNothing() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerData::Culled::Builder {
public:
  typedef Culled Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::capnp::Void getNothing();
  inline void setNothing( ::capnp::Void value = ::capnp::VOID);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerData::Culled::Pipeline {
public:
  typedef Culled Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getType() const;

  inline bool hasData() const;
  inline  ::capnp::Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint16_t getType();
  inline void setType( ::uint16_t value);

  inline bool hasData();
  inline  ::capnp::Data::Builder getData();
  inline void setData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerDataMessage::Reader {
public:
  typedef PlayerDataMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasData() const;
  inline  ::globed::schema::game::PlayerData::Reader getData() const;

  inline bool hasDataRequests() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getDataRequests() const;

  inline bool hasEventData() const;
  inline  ::capnp::Data::Reader getEventData() const;

  inline float getCameraX() const;

  inline float getCameraY() const;

  inline float getCameraRadius() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerDataMessage::Builder {
public:
  typedef PlayerDataMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasData();
  inline  ::globed::schema::game::PlayerData::Builder getData();
  inline void setData( ::globed::schema::game::PlayerData::Reader value);
  inline  ::globed::schema::game::PlayerData::Builder initData();
  inline void adoptData(::capnp::Orphan< ::globed::schema::game::PlayerData>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::PlayerData> disownData();

  inline bool hasDataRequests();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getDataRequests();
  inline void setDataRequests( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setDataRequests(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initDataRequests(unsigned int size);
  inline void adoptDataRequests(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownDataRequests();

  inline bool hasEventData();
  inline  ::capnp::Data::Builder getEventData();
  inline void setEventData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initEventData(unsigned int size);
  inline void adoptEventData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownEventData();

  inline float getCameraX();
  inline void setCameraX(float value);

  inline float getCameraY();
  inline void setCameraY(float value);

  inline float getCameraRadius();
  inline void setCameraRadius(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerDataMessage::Pipeline {
public:
  typedef PlayerDataMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::game::PlayerData::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LevelDataMessage::Reader {
public:
  typedef LevelDataMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayers() const;
  inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Reader getPlayers() const;

  inline bool hasDisplayDatas() const;
  inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Reader getDisplayDatas() const;

  inline bool hasEventData() const;
  inline  ::capnp::Data::Reader getEventData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LevelDataMessage::Builder {
public:
  typedef LevelDataMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayers();
  inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Builder getPlayers();
  inline void setPlayers( ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Builder initPlayers(unsigned int size);
  inline void adoptPlayers(::capnp::Orphan< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>> disownPlayers();

  inline bool hasDisplayDatas();
  inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Builder getDisplayDatas();
  inline void setDisplayDatas( ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Builder initDisplayDatas(unsigned int size);
  inline void adoptDisplayDatas(::capnp::Orphan< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>> disownDisplayDatas();

  inline bool hasEventData();
  inline  ::capnp::Data::Builder getEventData();
  inline void setEventData( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initEventData(unsigned int size);
  inline void adoptEventData(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownEventData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LevelDataMessage::Pipeline {
public:
  typedef LevelDataMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class UpdateIconsMessage::Reader {
public:
  typedef UpdateIconsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasIcons() const;
  inline  ::globed::schema::shared::PlayerIconData::Reader getIcons() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class UpdateIconsMessage::Builder {
public:
  typedef UpdateIconsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasIcons();
  inline  ::globed::schema::shared::PlayerIconData::Builder getIcons();
  inline void setIcons( ::globed::schema::shared::PlayerIconData::Reader value);
  inline  ::globed::schema::shared::PlayerIconData::Builder initIcons();
  inline void adoptIcons(::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value);
  inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> disownIcons();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class UpdateIconsMessage::Pipeline {
public:
  typedef UpdateIconsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::globed::schema::shared::PlayerIconData::Pipeline getIcons();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class LevelScript::Reader {
public:
  typedef LevelScript Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasContent() const;
  inline  ::capnp::Text::Reader getContent() const;

  inline bool hasFilename() const;
  inline  ::capnp::Text::Reader getFilename() const;

  inline bool getMain() const;

  inline bool hasSignature() const;
  inline  ::capnp::Data::Reader getSignature() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class LevelScript::Builder {
public:
  typedef LevelScript Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasContent();
  inline  ::capnp::Text::Builder getContent();
  inline void setContent( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContent(unsigned int size);
  inline void adoptContent(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContent();

  inline bool hasFilename();
  inline  ::capnp::Text::Builder getFilename();
  inline void setFilename( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initFilename(unsigned int size);
  inline void adoptFilename(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownFilename();

  inline bool getMain();
  inline void setMain(bool value);

  inline bool hasSignature();
  inline  ::capnp::Data::Builder getSignature();
  inline void setSignature( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initSignature(unsigned int size);
  inline void adoptSignature(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownSignature();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class LevelScript::Pipeline {
public:
  typedef LevelScript Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class SendLevelScriptMessage::Reader {
public:
  typedef SendLevelScriptMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasScripts() const;
  inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Reader getScripts() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SendLevelScriptMessage::Builder {
public:
  typedef SendLevelScriptMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasScripts();
  inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Builder getScripts();
  inline void setScripts( ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Builder initScripts(unsigned int size);
  inline void adoptScripts(::capnp::Orphan< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>> disownScripts();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SendLevelScriptMessage::Pipeline {
public:
  typedef SendLevelScriptMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VoiceDataMessage::Reader {
public:
  typedef VoiceDataMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasFrames() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getFrames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VoiceDataMessage::Builder {
public:
  typedef VoiceDataMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasFrames();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getFrames();
  inline void setFrames( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setFrames(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initFrames(unsigned int size);
  inline void adoptFrames(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownFrames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VoiceDataMessage::Pipeline {
public:
  typedef VoiceDataMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class KickedMessage::Reader {
public:
  typedef KickedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::KickReason getReason() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class KickedMessage::Builder {
public:
  typedef KickedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::globed::schema::game::KickReason getReason();
  inline void setReason( ::globed::schema::game::KickReason value);

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class KickedMessage::Pipeline {
public:
  typedef KickedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ScriptLogsMessage::Reader {
public:
  typedef ScriptLogsMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLogs() const;
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader getLogs() const;

  inline float getRamUsage() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ScriptLogsMessage::Builder {
public:
  typedef ScriptLogsMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLogs();
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder getLogs();
  inline void setLogs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value);
  inline void setLogs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value);
  inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder initLogs(unsigned int size);
  inline void adoptLogs(::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> disownLogs();

  inline float getRamUsage();
  inline void setRamUsage(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ScriptLogsMessage::Pipeline {
public:
  typedef ScriptLogsMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class VoiceBroadcastMessage::Reader {
public:
  typedef VoiceBroadcastMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId() const;

  inline bool hasFrames() const;
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader getFrames() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class VoiceBroadcastMessage::Builder {
public:
  typedef VoiceBroadcastMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::int32_t getAccountId();
  inline void setAccountId( ::int32_t value);

  inline bool hasFrames();
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder getFrames();
  inline void setFrames( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value);
  inline void setFrames(::kj::ArrayPtr<const  ::capnp::Data::Reader> value);
  inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder initFrames(unsigned int size);
  inline void adoptFrames(::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> disownFrames();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class VoiceBroadcastMessage::Pipeline {
public:
  typedef VoiceBroadcastMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ChatNotPermittedMessage::Reader {
public:
  typedef ChatNotPermittedMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ChatNotPermittedMessage::Builder {
public:
  typedef ChatNotPermittedMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ChatNotPermittedMessage::Pipeline {
public:
  typedef ChatNotPermittedMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Message::Reader {
public:
  typedef Message Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isLogin() const;
  inline bool hasLogin() const;
  inline  ::globed::schema::game::LoginMessage::Reader getLogin() const;

  inline bool isJoinSession() const;
  inline bool hasJoinSession() const;
  inline  ::globed::schema::game::JoinSessionMessage::Reader getJoinSession() const;

  inline bool isLeaveSession() const;
  inline bool hasLeaveSession() const;
  inline  ::globed::schema::game::LeaveSessionMessage::Reader getLeaveSession() const;

  inline bool isPlayerData() const;
  inline bool hasPlayerData() const;
  inline  ::globed::schema::game::PlayerDataMessage::Reader getPlayerData() const;

  inline bool isUpdateIcons() const;
  inline bool hasUpdateIcons() const;
  inline  ::globed::schema::game::UpdateIconsMessage::Reader getUpdateIcons() const;

  inline bool isSendLevelScript() const;
  inline bool hasSendLevelScript() const;
  inline  ::globed::schema::game::SendLevelScriptMessage::Reader getSendLevelScript() const;

  inline bool isVoiceData() const;
  inline bool hasVoiceData() const;
  inline  ::globed::schema::game::VoiceDataMessage::Reader getVoiceData() const;

  inline bool isLoginOk() const;
  inline bool hasLoginOk() const;
  inline  ::globed::schema::game::LoginOkMessage::Reader getLoginOk() const;

  inline bool isLoginFailed() const;
  inline bool hasLoginFailed() const;
  inline  ::globed::schema::game::LoginFailedMessage::Reader getLoginFailed() const;

  inline bool isJoinSessionOk() const;
  inline bool hasJoinSessionOk() const;
  inline  ::globed::schema::game::JoinSessionOkMessage::Reader getJoinSessionOk() const;

  inline bool isJoinSessionFailed() const;
  inline bool hasJoinSessionFailed() const;
  inline  ::globed::schema::game::JoinSessionFailedMessage::Reader getJoinSessionFailed() const;

  inline bool isLevelData() const;
  inline bool hasLevelData() const;
  inline  ::globed::schema::game::LevelDataMessage::Reader getLevelData() const;

  inline bool isKicked() const;
  inline bool hasKicked() const;
  inline  ::globed::schema::game::KickedMessage::Reader getKicked() const;

  inline bool isScriptLogs() const;
  inline bool hasScriptLogs() const;
  inline  ::globed::schema::game::ScriptLogsMessage::Reader getScriptLogs() const;

  inline bool isVoiceBroadcast() const;
  inline bool hasVoiceBroadcast() const;
  inline  ::globed::schema::game::VoiceBroadcastMessage::Reader getVoiceBroadcast() const;

  inline bool isChatNotPermitted() const;
  inline bool hasChatNotPermitted() const;
  inline  ::globed::schema::game::ChatNotPermittedMessage::Reader getChatNotPermitted() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Message::Builder {
public:
  typedef Message Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isLogin();
  inline bool hasLogin();
  inline  ::globed::schema::game::LoginMessage::Builder getLogin();
  inline void setLogin( ::globed::schema::game::LoginMessage::Reader value);
  inline  ::globed::schema::game::LoginMessage::Builder initLogin();
  inline void adoptLogin(::capnp::Orphan< ::globed::schema::game::LoginMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginMessage> disownLogin();

  inline bool isJoinSession();
  inline bool hasJoinSession();
  inline  ::globed::schema::game::JoinSessionMessage::Builder getJoinSession();
  inline void setJoinSession( ::globed::schema::game::JoinSessionMessage::Reader value);
  inline  ::globed::schema::game::JoinSessionMessage::Builder initJoinSession();
  inline void adoptJoinSession(::capnp::Orphan< ::globed::schema::game::JoinSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage> disownJoinSession();

  inline bool isLeaveSession();
  inline bool hasLeaveSession();
  inline  ::globed::schema::game::LeaveSessionMessage::Builder getLeaveSession();
  inline void setLeaveSession( ::globed::schema::game::LeaveSessionMessage::Reader value);
  inline  ::globed::schema::game::LeaveSessionMessage::Builder initLeaveSession();
  inline void adoptLeaveSession(::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage> disownLeaveSession();

  inline bool isPlayerData();
  inline bool hasPlayerData();
  inline  ::globed::schema::game::PlayerDataMessage::Builder getPlayerData();
  inline void setPlayerData( ::globed::schema::game::PlayerDataMessage::Reader value);
  inline  ::globed::schema::game::PlayerDataMessage::Builder initPlayerData();
  inline void adoptPlayerData(::capnp::Orphan< ::globed::schema::game::PlayerDataMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::PlayerDataMessage> disownPlayerData();

  inline bool isUpdateIcons();
  inline bool hasUpdateIcons();
  inline  ::globed::schema::game::UpdateIconsMessage::Builder getUpdateIcons();
  inline void setUpdateIcons( ::globed::schema::game::UpdateIconsMessage::Reader value);
  inline  ::globed::schema::game::UpdateIconsMessage::Builder initUpdateIcons();
  inline void adoptUpdateIcons(::capnp::Orphan< ::globed::schema::game::UpdateIconsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::UpdateIconsMessage> disownUpdateIcons();

  inline bool isSendLevelScript();
  inline bool hasSendLevelScript();
  inline  ::globed::schema::game::SendLevelScriptMessage::Builder getSendLevelScript();
  inline void setSendLevelScript( ::globed::schema::game::SendLevelScriptMessage::Reader value);
  inline  ::globed::schema::game::SendLevelScriptMessage::Builder initSendLevelScript();
  inline void adoptSendLevelScript(::capnp::Orphan< ::globed::schema::game::SendLevelScriptMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::SendLevelScriptMessage> disownSendLevelScript();

  inline bool isVoiceData();
  inline bool hasVoiceData();
  inline  ::globed::schema::game::VoiceDataMessage::Builder getVoiceData();
  inline void setVoiceData( ::globed::schema::game::VoiceDataMessage::Reader value);
  inline  ::globed::schema::game::VoiceDataMessage::Builder initVoiceData();
  inline void adoptVoiceData(::capnp::Orphan< ::globed::schema::game::VoiceDataMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::VoiceDataMessage> disownVoiceData();

  inline bool isLoginOk();
  inline bool hasLoginOk();
  inline  ::globed::schema::game::LoginOkMessage::Builder getLoginOk();
  inline void setLoginOk( ::globed::schema::game::LoginOkMessage::Reader value);
  inline  ::globed::schema::game::LoginOkMessage::Builder initLoginOk();
  inline void adoptLoginOk(::capnp::Orphan< ::globed::schema::game::LoginOkMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginOkMessage> disownLoginOk();

  inline bool isLoginFailed();
  inline bool hasLoginFailed();
  inline  ::globed::schema::game::LoginFailedMessage::Builder getLoginFailed();
  inline void setLoginFailed( ::globed::schema::game::LoginFailedMessage::Reader value);
  inline  ::globed::schema::game::LoginFailedMessage::Builder initLoginFailed();
  inline void adoptLoginFailed(::capnp::Orphan< ::globed::schema::game::LoginFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage> disownLoginFailed();

  inline bool isJoinSessionOk();
  inline bool hasJoinSessionOk();
  inline  ::globed::schema::game::JoinSessionOkMessage::Builder getJoinSessionOk();
  inline void setJoinSessionOk( ::globed::schema::game::JoinSessionOkMessage::Reader value);
  inline  ::globed::schema::game::JoinSessionOkMessage::Builder initJoinSessionOk();
  inline void adoptJoinSessionOk(::capnp::Orphan< ::globed::schema::game::JoinSessionOkMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::JoinSessionOkMessage> disownJoinSessionOk();

  inline bool isJoinSessionFailed();
  inline bool hasJoinSessionFailed();
  inline  ::globed::schema::game::JoinSessionFailedMessage::Builder getJoinSessionFailed();
  inline void setJoinSessionFailed( ::globed::schema::game::JoinSessionFailedMessage::Reader value);
  inline  ::globed::schema::game::JoinSessionFailedMessage::Builder initJoinSessionFailed();
  inline void adoptJoinSessionFailed(::capnp::Orphan< ::globed::schema::game::JoinSessionFailedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::JoinSessionFailedMessage> disownJoinSessionFailed();

  inline bool isLevelData();
  inline bool hasLevelData();
  inline  ::globed::schema::game::LevelDataMessage::Builder getLevelData();
  inline void setLevelData( ::globed::schema::game::LevelDataMessage::Reader value);
  inline  ::globed::schema::game::LevelDataMessage::Builder initLevelData();
  inline void adoptLevelData(::capnp::Orphan< ::globed::schema::game::LevelDataMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::LevelDataMessage> disownLevelData();

  inline bool isKicked();
  inline bool hasKicked();
  inline  ::globed::schema::game::KickedMessage::Builder getKicked();
  inline void setKicked( ::globed::schema::game::KickedMessage::Reader value);
  inline  ::globed::schema::game::KickedMessage::Builder initKicked();
  inline void adoptKicked(::capnp::Orphan< ::globed::schema::game::KickedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::KickedMessage> disownKicked();

  inline bool isScriptLogs();
  inline bool hasScriptLogs();
  inline  ::globed::schema::game::ScriptLogsMessage::Builder getScriptLogs();
  inline void setScriptLogs( ::globed::schema::game::ScriptLogsMessage::Reader value);
  inline  ::globed::schema::game::ScriptLogsMessage::Builder initScriptLogs();
  inline void adoptScriptLogs(::capnp::Orphan< ::globed::schema::game::ScriptLogsMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::ScriptLogsMessage> disownScriptLogs();

  inline bool isVoiceBroadcast();
  inline bool hasVoiceBroadcast();
  inline  ::globed::schema::game::VoiceBroadcastMessage::Builder getVoiceBroadcast();
  inline void setVoiceBroadcast( ::globed::schema::game::VoiceBroadcastMessage::Reader value);
  inline  ::globed::schema::game::VoiceBroadcastMessage::Builder initVoiceBroadcast();
  inline void adoptVoiceBroadcast(::capnp::Orphan< ::globed::schema::game::VoiceBroadcastMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::VoiceBroadcastMessage> disownVoiceBroadcast();

  inline bool isChatNotPermitted();
  inline bool hasChatNotPermitted();
  inline  ::globed::schema::game::ChatNotPermittedMessage::Builder getChatNotPermitted();
  inline void setChatNotPermitted( ::globed::schema::game::ChatNotPermittedMessage::Reader value);
  inline  ::globed::schema::game::ChatNotPermittedMessage::Builder initChatNotPermitted();
  inline void adoptChatNotPermitted(::capnp::Orphan< ::globed::schema::game::ChatNotPermittedMessage>&& value);
  inline ::capnp::Orphan< ::globed::schema::game::ChatNotPermittedMessage> disownChatNotPermitted();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Message::Pipeline {
public:
  typedef Message Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::int32_t LoginMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t LoginMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LoginMessage::Reader::hasToken() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LoginMessage::Builder::hasToken() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LoginMessage::Reader::getToken() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LoginMessage::Builder::getToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LoginMessage::Builder::setToken( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LoginMessage::Builder::initToken(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LoginMessage::Builder::adoptToken(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LoginMessage::Builder::disownToken() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LoginMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LoginMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader LoginMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline LoginMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void LoginMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder LoginMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LoginMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> LoginMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LoginMessage::Reader::hasSettings() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LoginMessage::Builder::hasSettings() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::UserSettings::Reader LoginMessage::Reader::getSettings() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::UserSettings::Builder LoginMessage::Builder::getSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::UserSettings::Pipeline LoginMessage::Pipeline::getSettings() {
  return  ::globed::schema::shared::UserSettings::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void LoginMessage::Builder::setSettings( ::globed::schema::shared::UserSettings::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::UserSettings::Builder LoginMessage::Builder::initSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LoginMessage::Builder::adoptSettings(
    ::capnp::Orphan< ::globed::schema::shared::UserSettings>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::UserSettings> LoginMessage::Builder::disownSettings() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::UserSettings>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t LoginMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t LoginMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LoginMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t LoginMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t LoginMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void LoginMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool LoginMessage::Reader::getPlatformer() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool LoginMessage::Builder::getPlatformer() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void LoginMessage::Builder::setPlatformer(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t LoginOkMessage::Reader::getTickrate() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t LoginOkMessage::Builder::getTickrate() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginOkMessage::Builder::setTickrate( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::game::LoginFailedReason LoginFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::game::LoginFailedReason LoginFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LoginFailedMessage::Builder::setReason( ::globed::schema::game::LoginFailedReason value) {
  _builder.setDataField< ::globed::schema::game::LoginFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t JoinSessionMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t JoinSessionMessage::Reader::getPasscode() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t JoinSessionMessage::Builder::getPasscode() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setPasscode( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool JoinSessionMessage::Reader::getPlatformer() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool JoinSessionMessage::Builder::getPlatformer() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void JoinSessionMessage::Builder::setPlatformer(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t JoinSessionOkMessage::Reader::getSessionId() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t JoinSessionOkMessage::Builder::getSessionId() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionOkMessage::Builder::setSessionId( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::game::JoinSessionFailedReason JoinSessionFailedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::game::JoinSessionFailedReason JoinSessionFailedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void JoinSessionFailedMessage::Builder::setReason( ::globed::schema::game::JoinSessionFailedReason value) {
  _builder.setDataField< ::globed::schema::game::JoinSessionFailedReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getVelocityX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getVelocityX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setVelocityX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getVelocityY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getVelocityY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setVelocityY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ExtendedPlayerData::Reader::getAccelerating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}

inline bool ExtendedPlayerData::Builder::getAccelerating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setAccelerating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<64>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getAcceleration() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getAcceleration() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setAcceleration(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getFallStartY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getFallStartY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setFallStartY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline bool ExtendedPlayerData::Reader::getIsOnGround2() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}

inline bool ExtendedPlayerData::Builder::getIsOnGround2() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setIsOnGround2(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<65>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getGravityMod() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getGravityMod() {
  return _builder.getDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setGravityMod(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float ExtendedPlayerData::Reader::getGravity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float ExtendedPlayerData::Builder::getGravity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setGravity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool ExtendedPlayerData::Reader::getTouchedPad() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}

inline bool ExtendedPlayerData::Builder::getTouchedPad() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS);
}
inline void ExtendedPlayerData::Builder::setTouchedPad(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<66>() * ::capnp::ELEMENTS, value);
}

inline float PlayerObjectData::Reader::getPositionX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float PlayerObjectData::Builder::getPositionX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setPositionX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PlayerObjectData::Reader::getPositionY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PlayerObjectData::Builder::getPositionY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setPositionY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PlayerObjectData::Reader::getRotation() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PlayerObjectData::Builder::getRotation() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setRotation(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::globed::schema::shared::IconType PlayerObjectData::Reader::getIconType() const {
  return _reader.getDataField< ::globed::schema::shared::IconType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::shared::IconType PlayerObjectData::Builder::getIconType() {
  return _builder.getDataField< ::globed::schema::shared::IconType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIconType( ::globed::schema::shared::IconType value) {
  _builder.setDataField< ::globed::schema::shared::IconType>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsVisible() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsVisible() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsVisible(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<112>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsLookingLeft() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsLookingLeft() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsLookingLeft(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<113>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsUpsideDown() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsUpsideDown() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsUpsideDown(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<114>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsDashing() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsDashing() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsDashing(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<115>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsMini() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsMini() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsMini(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<116>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsGrounded() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsGrounded() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsGrounded(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<117>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsStationary() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsStationary() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsStationary(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<118>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsFalling() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsFalling() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsFalling(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<119>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsRotating() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsRotating() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsRotating(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<120>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::getIsSideways() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}

inline bool PlayerObjectData::Builder::getIsSideways() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS);
}
inline void PlayerObjectData::Builder::setIsSideways(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<121>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerObjectData::Reader::hasExtData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerObjectData::Builder::hasExtData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::ExtendedPlayerData::Reader PlayerObjectData::Reader::getExtData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::ExtendedPlayerData::Builder PlayerObjectData::Builder::getExtData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::game::ExtendedPlayerData::Pipeline PlayerObjectData::Pipeline::getExtData() {
  return  ::globed::schema::game::ExtendedPlayerData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlayerObjectData::Builder::setExtData( ::globed::schema::game::ExtendedPlayerData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::ExtendedPlayerData::Builder PlayerObjectData::Builder::initExtData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerObjectData::Builder::adoptExtData(
    ::capnp::Orphan< ::globed::schema::game::ExtendedPlayerData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::ExtendedPlayerData> PlayerObjectData::Builder::disownExtData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ExtendedPlayerData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::game::PlayerData::Which PlayerData::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline  ::globed::schema::game::PlayerData::Which PlayerData::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerData::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t PlayerData::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PlayerData::Reader::getTimestamp() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PlayerData::Builder::getTimestamp() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setTimestamp(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PlayerData::Reader::getFrameNumber() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PlayerData::Builder::getFrameNumber() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setFrameNumber( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t PlayerData::Reader::getDeathCount() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t PlayerData::Builder::getDeathCount() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setDeathCount( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t PlayerData::Reader::getPercentage() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t PlayerData::Builder::getPercentage() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setPercentage( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsDead() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsDead() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsDead(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<96>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsPaused() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsPaused() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsPaused(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<97>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsPracticing() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsPracticing() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsPracticing(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<98>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsInEditor() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsInEditor() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsInEditor(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<99>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsEditorBuilding() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsEditorBuilding() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsEditorBuilding(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<100>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::getIsLastDeathReal() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}

inline bool PlayerData::Builder::getIsLastDeathReal() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Builder::setIsLastDeathReal(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<101>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerData::Reader::isDual() const {
  return which() == PlayerData::DUAL;
}
inline bool PlayerData::Builder::isDual() {
  return which() == PlayerData::DUAL;
}
inline typename PlayerData::Dual::Reader PlayerData::Reader::getDual() const {
  KJ_IREQUIRE((which() == PlayerData::DUAL),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Dual::Reader(_reader);
}
inline typename PlayerData::Dual::Builder PlayerData::Builder::getDual() {
  KJ_IREQUIRE((which() == PlayerData::DUAL),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Dual::Builder(_builder);
}
inline typename PlayerData::Dual::Builder PlayerData::Builder::initDual() {
  _builder.setDataField<PlayerData::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PlayerData::DUAL);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  _builder.getPointerField(::capnp::bounded<1>() * ::capnp::POINTERS).clear();
  return typename PlayerData::Dual::Builder(_builder);
}
inline bool PlayerData::Reader::isSingle() const {
  return which() == PlayerData::SINGLE;
}
inline bool PlayerData::Builder::isSingle() {
  return which() == PlayerData::SINGLE;
}
inline typename PlayerData::Single::Reader PlayerData::Reader::getSingle() const {
  KJ_IREQUIRE((which() == PlayerData::SINGLE),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Single::Reader(_reader);
}
inline typename PlayerData::Single::Builder PlayerData::Builder::getSingle() {
  KJ_IREQUIRE((which() == PlayerData::SINGLE),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Single::Builder(_builder);
}
inline typename PlayerData::Single::Builder PlayerData::Builder::initSingle() {
  _builder.setDataField<PlayerData::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PlayerData::SINGLE);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename PlayerData::Single::Builder(_builder);
}
inline bool PlayerData::Reader::isCulled() const {
  return which() == PlayerData::CULLED;
}
inline bool PlayerData::Builder::isCulled() {
  return which() == PlayerData::CULLED;
}
inline typename PlayerData::Culled::Reader PlayerData::Reader::getCulled() const {
  KJ_IREQUIRE((which() == PlayerData::CULLED),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Culled::Reader(_reader);
}
inline typename PlayerData::Culled::Builder PlayerData::Builder::getCulled() {
  KJ_IREQUIRE((which() == PlayerData::CULLED),
              "Must check which() before get()ing a union member.");
  return typename PlayerData::Culled::Builder(_builder);
}
inline typename PlayerData::Culled::Builder PlayerData::Builder::initCulled() {
  _builder.setDataField<PlayerData::Which>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, PlayerData::CULLED);
  return typename PlayerData::Culled::Builder(_builder);
}
inline bool PlayerData::Dual::Reader::hasPlayer1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerData::Dual::Builder::hasPlayer1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::PlayerObjectData::Reader PlayerData::Dual::Reader::getPlayer1() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Dual::Builder::getPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::game::PlayerObjectData::Pipeline PlayerData::Dual::Pipeline::getPlayer1() {
  return  ::globed::schema::game::PlayerObjectData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlayerData::Dual::Builder::setPlayer1( ::globed::schema::game::PlayerObjectData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Dual::Builder::initPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerData::Dual::Builder::adoptPlayer1(
    ::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> PlayerData::Dual::Builder::disownPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerData::Dual::Reader::hasPlayer2() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerData::Dual::Builder::hasPlayer2() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::PlayerObjectData::Reader PlayerData::Dual::Reader::getPlayer2() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Dual::Builder::getPlayer2() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::game::PlayerObjectData::Pipeline PlayerData::Dual::Pipeline::getPlayer2() {
  return  ::globed::schema::game::PlayerObjectData::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlayerData::Dual::Builder::setPlayer2( ::globed::schema::game::PlayerObjectData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Dual::Builder::initPlayer2() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerData::Dual::Builder::adoptPlayer2(
    ::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> PlayerData::Dual::Builder::disownPlayer2() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlayerData::Single::Reader::hasPlayer1() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerData::Single::Builder::hasPlayer1() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::PlayerObjectData::Reader PlayerData::Single::Reader::getPlayer1() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Single::Builder::getPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::game::PlayerObjectData::Pipeline PlayerData::Single::Pipeline::getPlayer1() {
  return  ::globed::schema::game::PlayerObjectData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlayerData::Single::Builder::setPlayer1( ::globed::schema::game::PlayerObjectData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::PlayerObjectData::Builder PlayerData::Single::Builder::initPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerData::Single::Builder::adoptPlayer1(
    ::capnp::Orphan< ::globed::schema::game::PlayerObjectData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::PlayerObjectData> PlayerData::Single::Builder::disownPlayer1() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerObjectData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::capnp::Void PlayerData::Culled::Reader::getNothing() const {
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void PlayerData::Culled::Builder::getNothing() {
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerData::Culled::Builder::setNothing( ::capnp::Void value) {
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t Event::Reader::getType() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t Event::Builder::getType() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Builder::setType( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader Event::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder Event::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Builder::setData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder Event::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> Event::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerDataMessage::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerDataMessage::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::PlayerData::Reader PlayerDataMessage::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::PlayerData::Builder PlayerDataMessage::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::game::PlayerData::Pipeline PlayerDataMessage::Pipeline::getData() {
  return  ::globed::schema::game::PlayerData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void PlayerDataMessage::Builder::setData( ::globed::schema::game::PlayerData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::PlayerData::Builder PlayerDataMessage::Builder::initData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerDataMessage::Builder::adoptData(
    ::capnp::Orphan< ::globed::schema::game::PlayerData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::PlayerData> PlayerDataMessage::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerDataMessage::Reader::hasDataRequests() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerDataMessage::Builder::hasDataRequests() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader PlayerDataMessage::Reader::getDataRequests() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerDataMessage::Builder::getDataRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerDataMessage::Builder::setDataRequests( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void PlayerDataMessage::Builder::setDataRequests(::kj::ArrayPtr<const  ::int32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder PlayerDataMessage::Builder::initDataRequests(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlayerDataMessage::Builder::adoptDataRequests(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> PlayerDataMessage::Builder::disownDataRequests() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlayerDataMessage::Reader::hasEventData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerDataMessage::Builder::hasEventData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PlayerDataMessage::Reader::getEventData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PlayerDataMessage::Builder::getEventData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlayerDataMessage::Builder::setEventData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PlayerDataMessage::Builder::initEventData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PlayerDataMessage::Builder::adoptEventData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PlayerDataMessage::Builder::disownEventData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline float PlayerDataMessage::Reader::getCameraX() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float PlayerDataMessage::Builder::getCameraX() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerDataMessage::Builder::setCameraX(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float PlayerDataMessage::Reader::getCameraY() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float PlayerDataMessage::Builder::getCameraY() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerDataMessage::Builder::setCameraY(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline float PlayerDataMessage::Reader::getCameraRadius() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline float PlayerDataMessage::Builder::getCameraRadius() {
  return _builder.getDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void PlayerDataMessage::Builder::setCameraRadius(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline bool LevelDataMessage::Reader::hasPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LevelDataMessage::Builder::hasPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Reader LevelDataMessage::Reader::getPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Builder LevelDataMessage::Builder::getPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LevelDataMessage::Builder::setPlayers( ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>::Builder LevelDataMessage::Builder::initPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LevelDataMessage::Builder::adoptPlayers(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>> LevelDataMessage::Builder::disownPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::PlayerData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LevelDataMessage::Reader::hasDisplayDatas() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LevelDataMessage::Builder::hasDisplayDatas() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Reader LevelDataMessage::Reader::getDisplayDatas() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Builder LevelDataMessage::Builder::getDisplayDatas() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LevelDataMessage::Builder::setDisplayDatas( ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>::Builder LevelDataMessage::Builder::initDisplayDatas(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LevelDataMessage::Builder::adoptDisplayDatas(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>> LevelDataMessage::Builder::disownDisplayDatas() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::shared::PlayerDisplayData,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LevelDataMessage::Reader::hasEventData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LevelDataMessage::Builder::hasEventData() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LevelDataMessage::Reader::getEventData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LevelDataMessage::Builder::getEventData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LevelDataMessage::Builder::setEventData( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LevelDataMessage::Builder::initEventData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LevelDataMessage::Builder::adoptEventData(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LevelDataMessage::Builder::disownEventData() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool UpdateIconsMessage::Reader::hasIcons() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool UpdateIconsMessage::Builder::hasIcons() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::shared::PlayerIconData::Reader UpdateIconsMessage::Reader::getIcons() const {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::shared::PlayerIconData::Builder UpdateIconsMessage::Builder::getIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::globed::schema::shared::PlayerIconData::Pipeline UpdateIconsMessage::Pipeline::getIcons() {
  return  ::globed::schema::shared::PlayerIconData::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void UpdateIconsMessage::Builder::setIcons( ::globed::schema::shared::PlayerIconData::Reader value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::shared::PlayerIconData::Builder UpdateIconsMessage::Builder::initIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void UpdateIconsMessage::Builder::adoptIcons(
    ::capnp::Orphan< ::globed::schema::shared::PlayerIconData>&& value) {
  ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::shared::PlayerIconData> UpdateIconsMessage::Builder::disownIcons() {
  return ::capnp::_::PointerHelpers< ::globed::schema::shared::PlayerIconData>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LevelScript::Reader::hasContent() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool LevelScript::Builder::hasContent() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LevelScript::Reader::getContent() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LevelScript::Builder::getContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void LevelScript::Builder::setContent( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LevelScript::Builder::initContent(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void LevelScript::Builder::adoptContent(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LevelScript::Builder::disownContent() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool LevelScript::Reader::hasFilename() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool LevelScript::Builder::hasFilename() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader LevelScript::Reader::getFilename() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder LevelScript::Builder::getFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void LevelScript::Builder::setFilename( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder LevelScript::Builder::initFilename(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void LevelScript::Builder::adoptFilename(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> LevelScript::Builder::disownFilename() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool LevelScript::Reader::getMain() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool LevelScript::Builder::getMain() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void LevelScript::Builder::setMain(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool LevelScript::Reader::hasSignature() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool LevelScript::Builder::hasSignature() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader LevelScript::Reader::getSignature() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder LevelScript::Builder::getSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void LevelScript::Builder::setSignature( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder LevelScript::Builder::initSignature(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void LevelScript::Builder::adoptSignature(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> LevelScript::Builder::disownSignature() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool SendLevelScriptMessage::Reader::hasScripts() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SendLevelScriptMessage::Builder::hasScripts() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Reader SendLevelScriptMessage::Reader::getScripts() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Builder SendLevelScriptMessage::Builder::getScripts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SendLevelScriptMessage::Builder::setScripts( ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>::Builder SendLevelScriptMessage::Builder::initScripts(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SendLevelScriptMessage::Builder::adoptScripts(
    ::capnp::Orphan< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>> SendLevelScriptMessage::Builder::disownScripts() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::globed::schema::game::LevelScript,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool VoiceDataMessage::Reader::hasFrames() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VoiceDataMessage::Builder::hasFrames() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader VoiceDataMessage::Reader::getFrames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder VoiceDataMessage::Builder::getFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VoiceDataMessage::Builder::setFrames( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void VoiceDataMessage::Builder::setFrames(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder VoiceDataMessage::Builder::initFrames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void VoiceDataMessage::Builder::adoptFrames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> VoiceDataMessage::Builder::disownFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::game::KickReason KickedMessage::Reader::getReason() const {
  return _reader.getDataField< ::globed::schema::game::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::globed::schema::game::KickReason KickedMessage::Builder::getReason() {
  return _builder.getDataField< ::globed::schema::game::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void KickedMessage::Builder::setReason( ::globed::schema::game::KickReason value) {
  _builder.setDataField< ::globed::schema::game::KickReason>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool KickedMessage::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool KickedMessage::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader KickedMessage::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder KickedMessage::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void KickedMessage::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder KickedMessage::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void KickedMessage::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> KickedMessage::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ScriptLogsMessage::Reader::hasLogs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ScriptLogsMessage::Builder::hasLogs() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader ScriptLogsMessage::Reader::getLogs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ScriptLogsMessage::Builder::getLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ScriptLogsMessage::Builder::setLogs( ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ScriptLogsMessage::Builder::setLogs(::kj::ArrayPtr<const  ::capnp::Text::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>::Builder ScriptLogsMessage::Builder::initLogs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ScriptLogsMessage::Builder::adoptLogs(
    ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>> ScriptLogsMessage::Builder::disownLogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Text,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline float ScriptLogsMessage::Reader::getRamUsage() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline float ScriptLogsMessage::Builder::getRamUsage() {
  return _builder.getDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ScriptLogsMessage::Builder::setRamUsage(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::int32_t VoiceBroadcastMessage::Reader::getAccountId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::int32_t VoiceBroadcastMessage::Builder::getAccountId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void VoiceBroadcastMessage::Builder::setAccountId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool VoiceBroadcastMessage::Reader::hasFrames() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool VoiceBroadcastMessage::Builder::hasFrames() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader VoiceBroadcastMessage::Reader::getFrames() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder VoiceBroadcastMessage::Builder::getFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void VoiceBroadcastMessage::Builder::setFrames( ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void VoiceBroadcastMessage::Builder::setFrames(::kj::ArrayPtr<const  ::capnp::Data::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>::Builder VoiceBroadcastMessage::Builder::initFrames(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void VoiceBroadcastMessage::Builder::adoptFrames(
    ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>> VoiceBroadcastMessage::Builder::disownFrames() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::Data,  ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::globed::schema::game::Message::Which Message::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::globed::schema::game::Message::Which Message::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Message::Reader::isLogin() const {
  return which() == Message::LOGIN;
}
inline bool Message::Builder::isLogin() {
  return which() == Message::LOGIN;
}
inline bool Message::Reader::hasLogin() const {
  if (which() != Message::LOGIN) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLogin() {
  if (which() != Message::LOGIN) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginMessage::Reader Message::Reader::getLogin() const {
  KJ_IREQUIRE((which() == Message::LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginMessage::Builder Message::Builder::getLogin() {
  KJ_IREQUIRE((which() == Message::LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLogin( ::globed::schema::game::LoginMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginMessage::Builder Message::Builder::initLogin() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLogin(
    ::capnp::Orphan< ::globed::schema::game::LoginMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginMessage> Message::Builder::disownLogin() {
  KJ_IREQUIRE((which() == Message::LOGIN),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSession() const {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Builder::isJoinSession() {
  return which() == Message::JOIN_SESSION;
}
inline bool Message::Reader::hasJoinSession() const {
  if (which() != Message::JOIN_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSession() {
  if (which() != Message::JOIN_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::JoinSessionMessage::Reader Message::Reader::getJoinSession() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::JoinSessionMessage::Builder Message::Builder::getJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSession( ::globed::schema::game::JoinSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::JoinSessionMessage::Builder Message::Builder::initJoinSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSession(
    ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::JoinSessionMessage> Message::Builder::disownJoinSession() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLeaveSession() const {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Builder::isLeaveSession() {
  return which() == Message::LEAVE_SESSION;
}
inline bool Message::Reader::hasLeaveSession() const {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLeaveSession() {
  if (which() != Message::LEAVE_SESSION) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LeaveSessionMessage::Reader Message::Reader::getLeaveSession() const {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LeaveSessionMessage::Builder Message::Builder::getLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLeaveSession( ::globed::schema::game::LeaveSessionMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LeaveSessionMessage::Builder Message::Builder::initLeaveSession() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLeaveSession(
    ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEAVE_SESSION);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LeaveSessionMessage> Message::Builder::disownLeaveSession() {
  KJ_IREQUIRE((which() == Message::LEAVE_SESSION),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LeaveSessionMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isPlayerData() const {
  return which() == Message::PLAYER_DATA;
}
inline bool Message::Builder::isPlayerData() {
  return which() == Message::PLAYER_DATA;
}
inline bool Message::Reader::hasPlayerData() const {
  if (which() != Message::PLAYER_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasPlayerData() {
  if (which() != Message::PLAYER_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::PlayerDataMessage::Reader Message::Reader::getPlayerData() const {
  KJ_IREQUIRE((which() == Message::PLAYER_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::PlayerDataMessage::Builder Message::Builder::getPlayerData() {
  KJ_IREQUIRE((which() == Message::PLAYER_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setPlayerData( ::globed::schema::game::PlayerDataMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::PlayerDataMessage::Builder Message::Builder::initPlayerData() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_DATA);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptPlayerData(
    ::capnp::Orphan< ::globed::schema::game::PlayerDataMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::PLAYER_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::PlayerDataMessage> Message::Builder::disownPlayerData() {
  KJ_IREQUIRE((which() == Message::PLAYER_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::PlayerDataMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isUpdateIcons() const {
  return which() == Message::UPDATE_ICONS;
}
inline bool Message::Builder::isUpdateIcons() {
  return which() == Message::UPDATE_ICONS;
}
inline bool Message::Reader::hasUpdateIcons() const {
  if (which() != Message::UPDATE_ICONS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasUpdateIcons() {
  if (which() != Message::UPDATE_ICONS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::UpdateIconsMessage::Reader Message::Reader::getUpdateIcons() const {
  KJ_IREQUIRE((which() == Message::UPDATE_ICONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::UpdateIconsMessage::Builder Message::Builder::getUpdateIcons() {
  KJ_IREQUIRE((which() == Message::UPDATE_ICONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setUpdateIcons( ::globed::schema::game::UpdateIconsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_ICONS);
  ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::UpdateIconsMessage::Builder Message::Builder::initUpdateIcons() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_ICONS);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptUpdateIcons(
    ::capnp::Orphan< ::globed::schema::game::UpdateIconsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::UPDATE_ICONS);
  ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::UpdateIconsMessage> Message::Builder::disownUpdateIcons() {
  KJ_IREQUIRE((which() == Message::UPDATE_ICONS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::UpdateIconsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isSendLevelScript() const {
  return which() == Message::SEND_LEVEL_SCRIPT;
}
inline bool Message::Builder::isSendLevelScript() {
  return which() == Message::SEND_LEVEL_SCRIPT;
}
inline bool Message::Reader::hasSendLevelScript() const {
  if (which() != Message::SEND_LEVEL_SCRIPT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasSendLevelScript() {
  if (which() != Message::SEND_LEVEL_SCRIPT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::SendLevelScriptMessage::Reader Message::Reader::getSendLevelScript() const {
  KJ_IREQUIRE((which() == Message::SEND_LEVEL_SCRIPT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::SendLevelScriptMessage::Builder Message::Builder::getSendLevelScript() {
  KJ_IREQUIRE((which() == Message::SEND_LEVEL_SCRIPT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setSendLevelScript( ::globed::schema::game::SendLevelScriptMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SEND_LEVEL_SCRIPT);
  ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::SendLevelScriptMessage::Builder Message::Builder::initSendLevelScript() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SEND_LEVEL_SCRIPT);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptSendLevelScript(
    ::capnp::Orphan< ::globed::schema::game::SendLevelScriptMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SEND_LEVEL_SCRIPT);
  ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::SendLevelScriptMessage> Message::Builder::disownSendLevelScript() {
  KJ_IREQUIRE((which() == Message::SEND_LEVEL_SCRIPT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::SendLevelScriptMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isVoiceData() const {
  return which() == Message::VOICE_DATA;
}
inline bool Message::Builder::isVoiceData() {
  return which() == Message::VOICE_DATA;
}
inline bool Message::Reader::hasVoiceData() const {
  if (which() != Message::VOICE_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasVoiceData() {
  if (which() != Message::VOICE_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::VoiceDataMessage::Reader Message::Reader::getVoiceData() const {
  KJ_IREQUIRE((which() == Message::VOICE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::VoiceDataMessage::Builder Message::Builder::getVoiceData() {
  KJ_IREQUIRE((which() == Message::VOICE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setVoiceData( ::globed::schema::game::VoiceDataMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::VoiceDataMessage::Builder Message::Builder::initVoiceData() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_DATA);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptVoiceData(
    ::capnp::Orphan< ::globed::schema::game::VoiceDataMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::VoiceDataMessage> Message::Builder::disownVoiceData() {
  KJ_IREQUIRE((which() == Message::VOICE_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceDataMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginOk() const {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Builder::isLoginOk() {
  return which() == Message::LOGIN_OK;
}
inline bool Message::Reader::hasLoginOk() const {
  if (which() != Message::LOGIN_OK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginOk() {
  if (which() != Message::LOGIN_OK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginOkMessage::Reader Message::Reader::getLoginOk() const {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginOkMessage::Builder Message::Builder::getLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginOk( ::globed::schema::game::LoginOkMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginOkMessage::Builder Message::Builder::initLoginOk() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginOk(
    ::capnp::Orphan< ::globed::schema::game::LoginOkMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginOkMessage> Message::Builder::disownLoginOk() {
  KJ_IREQUIRE((which() == Message::LOGIN_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginOkMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLoginFailed() const {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Builder::isLoginFailed() {
  return which() == Message::LOGIN_FAILED;
}
inline bool Message::Reader::hasLoginFailed() const {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLoginFailed() {
  if (which() != Message::LOGIN_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LoginFailedMessage::Reader Message::Reader::getLoginFailed() const {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LoginFailedMessage::Builder Message::Builder::getLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLoginFailed( ::globed::schema::game::LoginFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LoginFailedMessage::Builder Message::Builder::initLoginFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLoginFailed(
    ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LOGIN_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LoginFailedMessage> Message::Builder::disownLoginFailed() {
  KJ_IREQUIRE((which() == Message::LOGIN_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LoginFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSessionOk() const {
  return which() == Message::JOIN_SESSION_OK;
}
inline bool Message::Builder::isJoinSessionOk() {
  return which() == Message::JOIN_SESSION_OK;
}
inline bool Message::Reader::hasJoinSessionOk() const {
  if (which() != Message::JOIN_SESSION_OK) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSessionOk() {
  if (which() != Message::JOIN_SESSION_OK) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::JoinSessionOkMessage::Reader Message::Reader::getJoinSessionOk() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::JoinSessionOkMessage::Builder Message::Builder::getJoinSessionOk() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSessionOk( ::globed::schema::game::JoinSessionOkMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::JoinSessionOkMessage::Builder Message::Builder::initJoinSessionOk() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_OK);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSessionOk(
    ::capnp::Orphan< ::globed::schema::game::JoinSessionOkMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_OK);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::JoinSessionOkMessage> Message::Builder::disownJoinSessionOk() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_OK),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionOkMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isJoinSessionFailed() const {
  return which() == Message::JOIN_SESSION_FAILED;
}
inline bool Message::Builder::isJoinSessionFailed() {
  return which() == Message::JOIN_SESSION_FAILED;
}
inline bool Message::Reader::hasJoinSessionFailed() const {
  if (which() != Message::JOIN_SESSION_FAILED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasJoinSessionFailed() {
  if (which() != Message::JOIN_SESSION_FAILED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::JoinSessionFailedMessage::Reader Message::Reader::getJoinSessionFailed() const {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::JoinSessionFailedMessage::Builder Message::Builder::getJoinSessionFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setJoinSessionFailed( ::globed::schema::game::JoinSessionFailedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::JoinSessionFailedMessage::Builder Message::Builder::initJoinSessionFailed() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_FAILED);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptJoinSessionFailed(
    ::capnp::Orphan< ::globed::schema::game::JoinSessionFailedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::JOIN_SESSION_FAILED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::JoinSessionFailedMessage> Message::Builder::disownJoinSessionFailed() {
  KJ_IREQUIRE((which() == Message::JOIN_SESSION_FAILED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::JoinSessionFailedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isLevelData() const {
  return which() == Message::LEVEL_DATA;
}
inline bool Message::Builder::isLevelData() {
  return which() == Message::LEVEL_DATA;
}
inline bool Message::Reader::hasLevelData() const {
  if (which() != Message::LEVEL_DATA) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasLevelData() {
  if (which() != Message::LEVEL_DATA) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::LevelDataMessage::Reader Message::Reader::getLevelData() const {
  KJ_IREQUIRE((which() == Message::LEVEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::LevelDataMessage::Builder Message::Builder::getLevelData() {
  KJ_IREQUIRE((which() == Message::LEVEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setLevelData( ::globed::schema::game::LevelDataMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEVEL_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::LevelDataMessage::Builder Message::Builder::initLevelData() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEVEL_DATA);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptLevelData(
    ::capnp::Orphan< ::globed::schema::game::LevelDataMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::LEVEL_DATA);
  ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::LevelDataMessage> Message::Builder::disownLevelData() {
  KJ_IREQUIRE((which() == Message::LEVEL_DATA),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::LevelDataMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isKicked() const {
  return which() == Message::KICKED;
}
inline bool Message::Builder::isKicked() {
  return which() == Message::KICKED;
}
inline bool Message::Reader::hasKicked() const {
  if (which() != Message::KICKED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasKicked() {
  if (which() != Message::KICKED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::KickedMessage::Reader Message::Reader::getKicked() const {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::KickedMessage::Builder Message::Builder::getKicked() {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setKicked( ::globed::schema::game::KickedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::KickedMessage::Builder Message::Builder::initKicked() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptKicked(
    ::capnp::Orphan< ::globed::schema::game::KickedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::KICKED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::KickedMessage> Message::Builder::disownKicked() {
  KJ_IREQUIRE((which() == Message::KICKED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::KickedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isScriptLogs() const {
  return which() == Message::SCRIPT_LOGS;
}
inline bool Message::Builder::isScriptLogs() {
  return which() == Message::SCRIPT_LOGS;
}
inline bool Message::Reader::hasScriptLogs() const {
  if (which() != Message::SCRIPT_LOGS) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasScriptLogs() {
  if (which() != Message::SCRIPT_LOGS) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::ScriptLogsMessage::Reader Message::Reader::getScriptLogs() const {
  KJ_IREQUIRE((which() == Message::SCRIPT_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::ScriptLogsMessage::Builder Message::Builder::getScriptLogs() {
  KJ_IREQUIRE((which() == Message::SCRIPT_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setScriptLogs( ::globed::schema::game::ScriptLogsMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SCRIPT_LOGS);
  ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::ScriptLogsMessage::Builder Message::Builder::initScriptLogs() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SCRIPT_LOGS);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptScriptLogs(
    ::capnp::Orphan< ::globed::schema::game::ScriptLogsMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::SCRIPT_LOGS);
  ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::ScriptLogsMessage> Message::Builder::disownScriptLogs() {
  KJ_IREQUIRE((which() == Message::SCRIPT_LOGS),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ScriptLogsMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isVoiceBroadcast() const {
  return which() == Message::VOICE_BROADCAST;
}
inline bool Message::Builder::isVoiceBroadcast() {
  return which() == Message::VOICE_BROADCAST;
}
inline bool Message::Reader::hasVoiceBroadcast() const {
  if (which() != Message::VOICE_BROADCAST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasVoiceBroadcast() {
  if (which() != Message::VOICE_BROADCAST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::VoiceBroadcastMessage::Reader Message::Reader::getVoiceBroadcast() const {
  KJ_IREQUIRE((which() == Message::VOICE_BROADCAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::VoiceBroadcastMessage::Builder Message::Builder::getVoiceBroadcast() {
  KJ_IREQUIRE((which() == Message::VOICE_BROADCAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setVoiceBroadcast( ::globed::schema::game::VoiceBroadcastMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_BROADCAST);
  ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::VoiceBroadcastMessage::Builder Message::Builder::initVoiceBroadcast() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_BROADCAST);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptVoiceBroadcast(
    ::capnp::Orphan< ::globed::schema::game::VoiceBroadcastMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::VOICE_BROADCAST);
  ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::VoiceBroadcastMessage> Message::Builder::disownVoiceBroadcast() {
  KJ_IREQUIRE((which() == Message::VOICE_BROADCAST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::VoiceBroadcastMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Message::Reader::isChatNotPermitted() const {
  return which() == Message::CHAT_NOT_PERMITTED;
}
inline bool Message::Builder::isChatNotPermitted() {
  return which() == Message::CHAT_NOT_PERMITTED;
}
inline bool Message::Reader::hasChatNotPermitted() const {
  if (which() != Message::CHAT_NOT_PERMITTED) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Message::Builder::hasChatNotPermitted() {
  if (which() != Message::CHAT_NOT_PERMITTED) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::globed::schema::game::ChatNotPermittedMessage::Reader Message::Reader::getChatNotPermitted() const {
  KJ_IREQUIRE((which() == Message::CHAT_NOT_PERMITTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::globed::schema::game::ChatNotPermittedMessage::Builder Message::Builder::getChatNotPermitted() {
  KJ_IREQUIRE((which() == Message::CHAT_NOT_PERMITTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::setChatNotPermitted( ::globed::schema::game::ChatNotPermittedMessage::Reader value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CHAT_NOT_PERMITTED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::globed::schema::game::ChatNotPermittedMessage::Builder Message::Builder::initChatNotPermitted() {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CHAT_NOT_PERMITTED);
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Message::Builder::adoptChatNotPermitted(
    ::capnp::Orphan< ::globed::schema::game::ChatNotPermittedMessage>&& value) {
  _builder.setDataField<Message::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Message::CHAT_NOT_PERMITTED);
  ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::globed::schema::game::ChatNotPermittedMessage> Message::Builder::disownChatNotPermitted() {
  KJ_IREQUIRE((which() == Message::CHAT_NOT_PERMITTED),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::globed::schema::game::ChatNotPermittedMessage>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace
}  // namespace

CAPNP_END_HEADER

